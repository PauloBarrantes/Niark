Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> File
Rule 1     File -> Niark
Rule 2     Niark -> methodDefinition NEWLINE Niark
Rule 3     Niark -> instruction NEWLINE Niark
Rule 4     Niark -> methodDefinition
Rule 5     Niark -> instruction
Rule 6     methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
Rule 7     methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
Rule 8     instructions -> instruction NEWLINE instructions
Rule 9     instructions -> empty
Rule 10    instruction -> simple
Rule 11    instruction -> complex
Rule 12    simple -> asignation
Rule 13    simple -> declaration
Rule 14    simple -> read
Rule 15    simple -> print
Rule 16    simple -> functionCall
Rule 17    simple -> return
Rule 18    asignation -> NAME ASIGNATION dataTypeAsignation
Rule 19    asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
Rule 20    declaration -> VARDECLARATION
Rule 21    declaration -> VARDECLARATION ASIGNATION dataTypeAsignation
Rule 22    declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
Rule 23    declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
Rule 24    dataTypeAsignation -> variable
Rule 25    dataTypeAsignation -> variableType
Rule 26    dataTypeAsignation -> arithmetic
Rule 27    read -> READ LEFTPAR NAME RIGHTPAR
Rule 28    print -> PRINT LEFTPAR sendingVariables RIGHTPAR
Rule 29    functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR
Rule 30    functionCall -> NAME LEFTPAR empty RIGHTPAR
Rule 31    return -> RETURN sendingVariable
Rule 32    complex -> ifCondition
Rule 33    complex -> forCondition
Rule 34    complex -> whileCondition
Rule 35    ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
Rule 36    ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
Rule 37    ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
Rule 38    forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
Rule 39    whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
Rule 40    conditionals -> condition
Rule 41    conditionals -> condition conditionalOp conditionals
Rule 42    conditionals -> LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
Rule 43    conditionals -> LEFTPAR conditionals RIGHTPAR
Rule 44    condition -> sendingVariable conditionOp sendingVariable
Rule 45    incdec -> preIncdec
Rule 46    incdec -> postIncdec
Rule 47    preIncdec -> INCREASE variable
Rule 48    preIncdec -> DECREASE variable
Rule 49    postIncdec -> variable INCREASE
Rule 50    postIncdec -> variable DECREASE
Rule 51    conditionalOp -> AND
Rule 52    conditionalOp -> OR
Rule 53    conditionOp -> EQUALS
Rule 54    conditionOp -> DIFFERENT
Rule 55    conditionOp -> LESSER
Rule 56    conditionOp -> GREATER
Rule 57    conditionOp -> LESSEREQUAL
Rule 58    conditionOp -> GREATEREQUAL
Rule 59    domain -> PUBLIC
Rule 60    domain -> PRIVATE
Rule 61    methodType -> VOID
Rule 62    methodType -> FUNCTION
Rule 63    parameters -> NAME COMMA parameters
Rule 64    parameters -> NAME
Rule 65    sendingVariables -> sendingVariable COMMA sendingVariables
Rule 66    sendingVariables -> sendingVariable
Rule 67    sendingVariable -> variableType
Rule 68    sendingVariable -> arithmetic
Rule 69    sendingVariable -> variable
Rule 70    sendingVariable -> functionCall
Rule 71    variable -> NAME
Rule 72    variable -> vectorVariable
Rule 73    vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET
Rule 74    vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET
Rule 75    vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET
Rule 76    dataLocalizatorType -> INT
Rule 77    dataLocalizatorType -> variable
Rule 78    dataLocalizatorType -> arithmetic
Rule 79    variableType -> numberType
Rule 80    variableType -> stringType
Rule 81    variableType -> booleanType
Rule 82    numberType -> INT
Rule 83    numberType -> DOUBLE
Rule 84    stringType -> STRING
Rule 85    booleanType -> FALSE
Rule 86    booleanType -> TRUE
Rule 87    arithmetic -> moreArithmetic arithmeticOp arithmeticDataType
Rule 88    arithmetic -> LEFTPAR arithmetic RIGHTPAR
Rule 89    arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
Rule 90    arithmetic -> arithmeticOp arithmeticDataType
Rule 91    moreArithmetic -> arithmeticDataType
Rule 92    moreArithmetic -> arithmetic
Rule 93    arithmeticDataType -> numberType
Rule 94    arithmeticDataType -> variable
Rule 95    arithmeticDataType -> functionCall
Rule 96    arithmeticOp -> SUM
Rule 97    arithmeticOp -> SUBSTRACTION
Rule 98    arithmeticOp -> MULTIPLICATION
Rule 99    arithmeticOp -> DIVISION
Rule 100   empty -> <empty>

Terminals, with rules where they appear

AND                  : 51
ASIGNATION           : 18 19 21 23
COMMA                : 63 65
DECREASE             : 48 50
DIFFERENT            : 54
DIVISION             : 99
DOUBLE               : 83
ELSE                 : 36 37
EQUALS               : 53
FALSE                : 85
FOR                  : 38
FUNCTION             : 62
GREATER              : 56
GREATEREQUAL         : 58
IF                   : 35 36 37
INCREASE             : 47 49
INT                  : 74 76 82
LEFTBRACKET          : 19 22 23 73 74 75
LEFTKEY              : 6 7 35 36 36 37 38 39
LEFTPAR              : 6 7 27 28 29 30 35 36 37 38 39 42 43 88 89
LESSER               : 55
LESSEREQUAL          : 57
MULTIPLICATION       : 98
NAME                 : 6 7 18 19 27 29 30 63 64 71 73 74 75
NEWLINE              : 2 3 6 7 8 35 36 36 37 38 39
OR                   : 52
PRINT                : 28
PRIVATE              : 60
PUBLIC               : 59
READ                 : 27
RETURN               : 31
RIGHTBRACKET         : 19 22 23 73 74 75
RIGHTKEY             : 6 7 35 36 36 37 38 39
RIGHTPAR             : 6 7 27 28 29 30 35 36 37 38 39 42 43 88 89
SEMICOLON            : 38 38
STRING               : 84
SUBSTRACTION         : 97
SUM                  : 96
TRUE                 : 86
VARDECLARATION       : 20 21 22 23
VOID                 : 61
WHILE                : 39
error                : 

Nonterminals, with rules where they appear

File                 : 0
Niark                : 1 2 3
arithmetic           : 26 68 73 78 88 89 92
arithmeticDataType   : 87 90 91
arithmeticOp         : 87 89 90
asignation           : 12
booleanType          : 81
complex              : 11
condition            : 40 41
conditionOp          : 44
conditionalOp        : 41 42
conditionals         : 35 36 37 38 39 41 42 42 43
dataLocalizatorType  : 19 22 23
dataTypeAsignation   : 18 19 21 23
declaration          : 13 38
domain               : 6 7
empty                : 9 30
forCondition         : 33
functionCall         : 16 70 95
ifCondition          : 32 37
incdec               : 38
instruction          : 3 5 8
instructions         : 6 7 8 35 36 36 37 38 39
methodDefinition     : 2 4
methodType           : 6 7
moreArithmetic       : 87 89
numberType           : 79 93
parameters           : 6 63
postIncdec           : 46
preIncdec            : 45
print                : 15
read                 : 14
return               : 17
sendingVariable      : 31 44 44 65 66
sendingVariables     : 28 29 65
simple               : 10
stringType           : 80
variable             : 24 47 48 49 50 69 75 77 94
variableType         : 25 67
vectorVariable       : 72
whileCondition       : 34

Parsing method: LALR

state 0

    (0) S' -> . File
    (1) File -> . Niark
    (2) Niark -> . methodDefinition NEWLINE Niark
    (3) Niark -> . instruction NEWLINE Niark
    (4) Niark -> . methodDefinition
    (5) Niark -> . instruction
    (6) methodDefinition -> . domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (7) methodDefinition -> . domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (10) instruction -> . simple
    (11) instruction -> . complex
    (59) domain -> . PUBLIC
    (60) domain -> . PRIVATE
    (12) simple -> . asignation
    (13) simple -> . declaration
    (14) simple -> . read
    (15) simple -> . print
    (16) simple -> . functionCall
    (17) simple -> . return
    (32) complex -> . ifCondition
    (33) complex -> . forCondition
    (34) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (27) read -> . READ LEFTPAR NAME RIGHTPAR
    (28) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (31) return -> . RETURN sendingVariable
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
    (38) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (39) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    PUBLIC          shift and go to state 9
    PRIVATE         shift and go to state 10
    NAME            shift and go to state 6
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

    File                           shift and go to state 1
    Niark                          shift and go to state 2
    methodDefinition               shift and go to state 3
    instruction                    shift and go to state 4
    domain                         shift and go to state 5
    simple                         shift and go to state 7
    complex                        shift and go to state 8
    asignation                     shift and go to state 11
    declaration                    shift and go to state 12
    read                           shift and go to state 13
    print                          shift and go to state 14
    functionCall                   shift and go to state 15
    return                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19

state 1

    (0) S' -> File .



state 2

    (1) File -> Niark .

    $end            reduce using rule 1 (File -> Niark .)


state 3

    (2) Niark -> methodDefinition . NEWLINE Niark
    (4) Niark -> methodDefinition .

    NEWLINE         shift and go to state 27
    $end            reduce using rule 4 (Niark -> methodDefinition .)


state 4

    (3) Niark -> instruction . NEWLINE Niark
    (5) Niark -> instruction .

    NEWLINE         shift and go to state 28
    $end            reduce using rule 5 (Niark -> instruction .)


state 5

    (6) methodDefinition -> domain . methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (7) methodDefinition -> domain . methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (61) methodType -> . VOID
    (62) methodType -> . FUNCTION

    VOID            shift and go to state 30
    FUNCTION        shift and go to state 31

    methodType                     shift and go to state 29

state 6

    (18) asignation -> NAME . ASIGNATION dataTypeAsignation
    (19) asignation -> NAME . LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (29) functionCall -> NAME . LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> NAME . LEFTPAR empty RIGHTPAR

    ASIGNATION      shift and go to state 32
    LEFTBRACKET     shift and go to state 33
    LEFTPAR         shift and go to state 34


state 7

    (10) instruction -> simple .

    NEWLINE         reduce using rule 10 (instruction -> simple .)
    $end            reduce using rule 10 (instruction -> simple .)


state 8

    (11) instruction -> complex .

    NEWLINE         reduce using rule 11 (instruction -> complex .)
    $end            reduce using rule 11 (instruction -> complex .)


state 9

    (59) domain -> PUBLIC .

    VOID            reduce using rule 59 (domain -> PUBLIC .)
    FUNCTION        reduce using rule 59 (domain -> PUBLIC .)


state 10

    (60) domain -> PRIVATE .

    VOID            reduce using rule 60 (domain -> PRIVATE .)
    FUNCTION        reduce using rule 60 (domain -> PRIVATE .)


state 11

    (12) simple -> asignation .

    NEWLINE         reduce using rule 12 (simple -> asignation .)
    $end            reduce using rule 12 (simple -> asignation .)


state 12

    (13) simple -> declaration .

    NEWLINE         reduce using rule 13 (simple -> declaration .)
    $end            reduce using rule 13 (simple -> declaration .)


state 13

    (14) simple -> read .

    NEWLINE         reduce using rule 14 (simple -> read .)
    $end            reduce using rule 14 (simple -> read .)


state 14

    (15) simple -> print .

    NEWLINE         reduce using rule 15 (simple -> print .)
    $end            reduce using rule 15 (simple -> print .)


state 15

    (16) simple -> functionCall .

    NEWLINE         reduce using rule 16 (simple -> functionCall .)
    $end            reduce using rule 16 (simple -> functionCall .)


state 16

    (17) simple -> return .

    NEWLINE         reduce using rule 17 (simple -> return .)
    $end            reduce using rule 17 (simple -> return .)


state 17

    (32) complex -> ifCondition .

    NEWLINE         reduce using rule 32 (complex -> ifCondition .)
    $end            reduce using rule 32 (complex -> ifCondition .)


state 18

    (33) complex -> forCondition .

    NEWLINE         reduce using rule 33 (complex -> forCondition .)
    $end            reduce using rule 33 (complex -> forCondition .)


state 19

    (34) complex -> whileCondition .

    NEWLINE         reduce using rule 34 (complex -> whileCondition .)
    $end            reduce using rule 34 (complex -> whileCondition .)


state 20

    (20) declaration -> VARDECLARATION .
    (21) declaration -> VARDECLARATION . ASIGNATION dataTypeAsignation
    (22) declaration -> VARDECLARATION . LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> VARDECLARATION . LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation

    NEWLINE         reduce using rule 20 (declaration -> VARDECLARATION .)
    $end            reduce using rule 20 (declaration -> VARDECLARATION .)
    SEMICOLON       reduce using rule 20 (declaration -> VARDECLARATION .)
    ASIGNATION      shift and go to state 35
    LEFTBRACKET     shift and go to state 36


state 21

    (27) read -> READ . LEFTPAR NAME RIGHTPAR

    LEFTPAR         shift and go to state 37


state 22

    (28) print -> PRINT . LEFTPAR sendingVariables RIGHTPAR

    LEFTPAR         shift and go to state 38


state 23

    (31) return -> RETURN . sendingVariable
    (67) sendingVariable -> . variableType
    (68) sendingVariable -> . arithmetic
    (69) sendingVariable -> . variable
    (70) sendingVariable -> . functionCall
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 50
    NAME            shift and go to state 51
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    sendingVariable                shift and go to state 39
    variableType                   shift and go to state 40
    arithmetic                     shift and go to state 41
    variable                       shift and go to state 42
    functionCall                   shift and go to state 43
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    vectorVariable                 shift and go to state 52

state 24

    (35) ifCondition -> IF . LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> IF . LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> IF . LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition

    LEFTPAR         shift and go to state 62


state 25

    (38) forCondition -> FOR . LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTPAR         shift and go to state 63


state 26

    (39) whileCondition -> WHILE . LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTPAR         shift and go to state 64


state 27

    (2) Niark -> methodDefinition NEWLINE . Niark
    (2) Niark -> . methodDefinition NEWLINE Niark
    (3) Niark -> . instruction NEWLINE Niark
    (4) Niark -> . methodDefinition
    (5) Niark -> . instruction
    (6) methodDefinition -> . domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (7) methodDefinition -> . domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (10) instruction -> . simple
    (11) instruction -> . complex
    (59) domain -> . PUBLIC
    (60) domain -> . PRIVATE
    (12) simple -> . asignation
    (13) simple -> . declaration
    (14) simple -> . read
    (15) simple -> . print
    (16) simple -> . functionCall
    (17) simple -> . return
    (32) complex -> . ifCondition
    (33) complex -> . forCondition
    (34) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (27) read -> . READ LEFTPAR NAME RIGHTPAR
    (28) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (31) return -> . RETURN sendingVariable
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
    (38) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (39) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    PUBLIC          shift and go to state 9
    PRIVATE         shift and go to state 10
    NAME            shift and go to state 6
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

    methodDefinition               shift and go to state 3
    Niark                          shift and go to state 65
    instruction                    shift and go to state 4
    domain                         shift and go to state 5
    simple                         shift and go to state 7
    complex                        shift and go to state 8
    asignation                     shift and go to state 11
    declaration                    shift and go to state 12
    read                           shift and go to state 13
    print                          shift and go to state 14
    functionCall                   shift and go to state 15
    return                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19

state 28

    (3) Niark -> instruction NEWLINE . Niark
    (2) Niark -> . methodDefinition NEWLINE Niark
    (3) Niark -> . instruction NEWLINE Niark
    (4) Niark -> . methodDefinition
    (5) Niark -> . instruction
    (6) methodDefinition -> . domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (7) methodDefinition -> . domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (10) instruction -> . simple
    (11) instruction -> . complex
    (59) domain -> . PUBLIC
    (60) domain -> . PRIVATE
    (12) simple -> . asignation
    (13) simple -> . declaration
    (14) simple -> . read
    (15) simple -> . print
    (16) simple -> . functionCall
    (17) simple -> . return
    (32) complex -> . ifCondition
    (33) complex -> . forCondition
    (34) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (27) read -> . READ LEFTPAR NAME RIGHTPAR
    (28) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (31) return -> . RETURN sendingVariable
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
    (38) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (39) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    PUBLIC          shift and go to state 9
    PRIVATE         shift and go to state 10
    NAME            shift and go to state 6
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

    instruction                    shift and go to state 4
    Niark                          shift and go to state 66
    methodDefinition               shift and go to state 3
    domain                         shift and go to state 5
    simple                         shift and go to state 7
    complex                        shift and go to state 8
    asignation                     shift and go to state 11
    declaration                    shift and go to state 12
    read                           shift and go to state 13
    print                          shift and go to state 14
    functionCall                   shift and go to state 15
    return                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19

state 29

    (6) methodDefinition -> domain methodType . NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (7) methodDefinition -> domain methodType . NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    NAME            shift and go to state 67


state 30

    (61) methodType -> VOID .

    NAME            reduce using rule 61 (methodType -> VOID .)


state 31

    (62) methodType -> FUNCTION .

    NAME            reduce using rule 62 (methodType -> FUNCTION .)


state 32

    (18) asignation -> NAME ASIGNATION . dataTypeAsignation
    (24) dataTypeAsignation -> . variable
    (25) dataTypeAsignation -> . variableType
    (26) dataTypeAsignation -> . arithmetic
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    NAME            shift and go to state 68
    LEFTPAR         shift and go to state 50
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    dataTypeAsignation             shift and go to state 69
    variable                       shift and go to state 70
    variableType                   shift and go to state 71
    arithmetic                     shift and go to state 72
    vectorVariable                 shift and go to state 52
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    functionCall                   shift and go to state 73

state 33

    (19) asignation -> NAME LEFTBRACKET . dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (76) dataLocalizatorType -> . INT
    (77) dataLocalizatorType -> . variable
    (78) dataLocalizatorType -> . arithmetic
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    INT             shift and go to state 75
    NAME            shift and go to state 68
    LEFTPAR         shift and go to state 50
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61
    DOUBLE          shift and go to state 54

    dataLocalizatorType            shift and go to state 74
    variable                       shift and go to state 76
    arithmetic                     shift and go to state 77
    vectorVariable                 shift and go to state 52
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    numberType                     shift and go to state 78
    functionCall                   shift and go to state 73

state 34

    (29) functionCall -> NAME LEFTPAR . sendingVariables RIGHTPAR
    (30) functionCall -> NAME LEFTPAR . empty RIGHTPAR
    (65) sendingVariables -> . sendingVariable COMMA sendingVariables
    (66) sendingVariables -> . sendingVariable
    (100) empty -> .
    (67) sendingVariable -> . variableType
    (68) sendingVariable -> . arithmetic
    (69) sendingVariable -> . variable
    (70) sendingVariable -> . functionCall
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall

    RIGHTPAR        reduce using rule 100 (empty -> .)
    LEFTPAR         shift and go to state 50
    NAME            shift and go to state 51
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    sendingVariables               shift and go to state 79
    empty                          shift and go to state 80
    sendingVariable                shift and go to state 81
    variableType                   shift and go to state 40
    arithmetic                     shift and go to state 41
    variable                       shift and go to state 42
    functionCall                   shift and go to state 43
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    vectorVariable                 shift and go to state 52

state 35

    (21) declaration -> VARDECLARATION ASIGNATION . dataTypeAsignation
    (24) dataTypeAsignation -> . variable
    (25) dataTypeAsignation -> . variableType
    (26) dataTypeAsignation -> . arithmetic
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    NAME            shift and go to state 68
    LEFTPAR         shift and go to state 50
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    dataTypeAsignation             shift and go to state 82
    variable                       shift and go to state 70
    variableType                   shift and go to state 71
    arithmetic                     shift and go to state 72
    vectorVariable                 shift and go to state 52
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    functionCall                   shift and go to state 73

state 36

    (22) declaration -> VARDECLARATION LEFTBRACKET . dataLocalizatorType RIGHTBRACKET
    (23) declaration -> VARDECLARATION LEFTBRACKET . dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (76) dataLocalizatorType -> . INT
    (77) dataLocalizatorType -> . variable
    (78) dataLocalizatorType -> . arithmetic
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    INT             shift and go to state 75
    NAME            shift and go to state 68
    LEFTPAR         shift and go to state 50
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61
    DOUBLE          shift and go to state 54

    dataLocalizatorType            shift and go to state 83
    variable                       shift and go to state 76
    arithmetic                     shift and go to state 77
    vectorVariable                 shift and go to state 52
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    numberType                     shift and go to state 78
    functionCall                   shift and go to state 73

state 37

    (27) read -> READ LEFTPAR . NAME RIGHTPAR

    NAME            shift and go to state 84


state 38

    (28) print -> PRINT LEFTPAR . sendingVariables RIGHTPAR
    (65) sendingVariables -> . sendingVariable COMMA sendingVariables
    (66) sendingVariables -> . sendingVariable
    (67) sendingVariable -> . variableType
    (68) sendingVariable -> . arithmetic
    (69) sendingVariable -> . variable
    (70) sendingVariable -> . functionCall
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 50
    NAME            shift and go to state 51
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    sendingVariables               shift and go to state 85
    sendingVariable                shift and go to state 81
    variableType                   shift and go to state 40
    arithmetic                     shift and go to state 41
    variable                       shift and go to state 42
    functionCall                   shift and go to state 43
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    vectorVariable                 shift and go to state 52

state 39

    (31) return -> RETURN sendingVariable .

    NEWLINE         reduce using rule 31 (return -> RETURN sendingVariable .)
    $end            reduce using rule 31 (return -> RETURN sendingVariable .)


state 40

    (67) sendingVariable -> variableType .

    NEWLINE         reduce using rule 67 (sendingVariable -> variableType .)
    $end            reduce using rule 67 (sendingVariable -> variableType .)
    COMMA           reduce using rule 67 (sendingVariable -> variableType .)
    RIGHTPAR        reduce using rule 67 (sendingVariable -> variableType .)
    EQUALS          reduce using rule 67 (sendingVariable -> variableType .)
    DIFFERENT       reduce using rule 67 (sendingVariable -> variableType .)
    LESSER          reduce using rule 67 (sendingVariable -> variableType .)
    GREATER         reduce using rule 67 (sendingVariable -> variableType .)
    LESSEREQUAL     reduce using rule 67 (sendingVariable -> variableType .)
    GREATEREQUAL    reduce using rule 67 (sendingVariable -> variableType .)
    AND             reduce using rule 67 (sendingVariable -> variableType .)
    OR              reduce using rule 67 (sendingVariable -> variableType .)
    SEMICOLON       reduce using rule 67 (sendingVariable -> variableType .)


state 41

    (68) sendingVariable -> arithmetic .
    (92) moreArithmetic -> arithmetic .

    NEWLINE         reduce using rule 68 (sendingVariable -> arithmetic .)
    $end            reduce using rule 68 (sendingVariable -> arithmetic .)
    COMMA           reduce using rule 68 (sendingVariable -> arithmetic .)
    RIGHTPAR        reduce using rule 68 (sendingVariable -> arithmetic .)
    EQUALS          reduce using rule 68 (sendingVariable -> arithmetic .)
    DIFFERENT       reduce using rule 68 (sendingVariable -> arithmetic .)
    LESSER          reduce using rule 68 (sendingVariable -> arithmetic .)
    GREATER         reduce using rule 68 (sendingVariable -> arithmetic .)
    LESSEREQUAL     reduce using rule 68 (sendingVariable -> arithmetic .)
    GREATEREQUAL    reduce using rule 68 (sendingVariable -> arithmetic .)
    AND             reduce using rule 68 (sendingVariable -> arithmetic .)
    OR              reduce using rule 68 (sendingVariable -> arithmetic .)
    SEMICOLON       reduce using rule 68 (sendingVariable -> arithmetic .)
    SUM             reduce using rule 92 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 92 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 92 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 92 (moreArithmetic -> arithmetic .)


state 42

    (69) sendingVariable -> variable .
    (94) arithmeticDataType -> variable .

    NEWLINE         reduce using rule 69 (sendingVariable -> variable .)
    $end            reduce using rule 69 (sendingVariable -> variable .)
    COMMA           reduce using rule 69 (sendingVariable -> variable .)
    RIGHTPAR        reduce using rule 69 (sendingVariable -> variable .)
    EQUALS          reduce using rule 69 (sendingVariable -> variable .)
    DIFFERENT       reduce using rule 69 (sendingVariable -> variable .)
    LESSER          reduce using rule 69 (sendingVariable -> variable .)
    GREATER         reduce using rule 69 (sendingVariable -> variable .)
    LESSEREQUAL     reduce using rule 69 (sendingVariable -> variable .)
    GREATEREQUAL    reduce using rule 69 (sendingVariable -> variable .)
    AND             reduce using rule 69 (sendingVariable -> variable .)
    OR              reduce using rule 69 (sendingVariable -> variable .)
    SEMICOLON       reduce using rule 69 (sendingVariable -> variable .)
    SUM             reduce using rule 94 (arithmeticDataType -> variable .)
    SUBSTRACTION    reduce using rule 94 (arithmeticDataType -> variable .)
    MULTIPLICATION  reduce using rule 94 (arithmeticDataType -> variable .)
    DIVISION        reduce using rule 94 (arithmeticDataType -> variable .)


state 43

    (70) sendingVariable -> functionCall .
    (95) arithmeticDataType -> functionCall .

    NEWLINE         reduce using rule 70 (sendingVariable -> functionCall .)
    $end            reduce using rule 70 (sendingVariable -> functionCall .)
    COMMA           reduce using rule 70 (sendingVariable -> functionCall .)
    RIGHTPAR        reduce using rule 70 (sendingVariable -> functionCall .)
    EQUALS          reduce using rule 70 (sendingVariable -> functionCall .)
    DIFFERENT       reduce using rule 70 (sendingVariable -> functionCall .)
    LESSER          reduce using rule 70 (sendingVariable -> functionCall .)
    GREATER         reduce using rule 70 (sendingVariable -> functionCall .)
    LESSEREQUAL     reduce using rule 70 (sendingVariable -> functionCall .)
    GREATEREQUAL    reduce using rule 70 (sendingVariable -> functionCall .)
    AND             reduce using rule 70 (sendingVariable -> functionCall .)
    OR              reduce using rule 70 (sendingVariable -> functionCall .)
    SEMICOLON       reduce using rule 70 (sendingVariable -> functionCall .)
    SUM             reduce using rule 95 (arithmeticDataType -> functionCall .)
    SUBSTRACTION    reduce using rule 95 (arithmeticDataType -> functionCall .)
    MULTIPLICATION  reduce using rule 95 (arithmeticDataType -> functionCall .)
    DIVISION        reduce using rule 95 (arithmeticDataType -> functionCall .)


state 44

    (79) variableType -> numberType .
    (93) arithmeticDataType -> numberType .

    NEWLINE         reduce using rule 79 (variableType -> numberType .)
    $end            reduce using rule 79 (variableType -> numberType .)
    COMMA           reduce using rule 79 (variableType -> numberType .)
    RIGHTPAR        reduce using rule 79 (variableType -> numberType .)
    SEMICOLON       reduce using rule 79 (variableType -> numberType .)
    EQUALS          reduce using rule 79 (variableType -> numberType .)
    DIFFERENT       reduce using rule 79 (variableType -> numberType .)
    LESSER          reduce using rule 79 (variableType -> numberType .)
    GREATER         reduce using rule 79 (variableType -> numberType .)
    LESSEREQUAL     reduce using rule 79 (variableType -> numberType .)
    GREATEREQUAL    reduce using rule 79 (variableType -> numberType .)
    AND             reduce using rule 79 (variableType -> numberType .)
    OR              reduce using rule 79 (variableType -> numberType .)
    SUM             reduce using rule 93 (arithmeticDataType -> numberType .)
    SUBSTRACTION    reduce using rule 93 (arithmeticDataType -> numberType .)
    MULTIPLICATION  reduce using rule 93 (arithmeticDataType -> numberType .)
    DIVISION        reduce using rule 93 (arithmeticDataType -> numberType .)


state 45

    (80) variableType -> stringType .

    NEWLINE         reduce using rule 80 (variableType -> stringType .)
    $end            reduce using rule 80 (variableType -> stringType .)
    COMMA           reduce using rule 80 (variableType -> stringType .)
    RIGHTPAR        reduce using rule 80 (variableType -> stringType .)
    SEMICOLON       reduce using rule 80 (variableType -> stringType .)
    EQUALS          reduce using rule 80 (variableType -> stringType .)
    DIFFERENT       reduce using rule 80 (variableType -> stringType .)
    LESSER          reduce using rule 80 (variableType -> stringType .)
    GREATER         reduce using rule 80 (variableType -> stringType .)
    LESSEREQUAL     reduce using rule 80 (variableType -> stringType .)
    GREATEREQUAL    reduce using rule 80 (variableType -> stringType .)
    AND             reduce using rule 80 (variableType -> stringType .)
    OR              reduce using rule 80 (variableType -> stringType .)


state 46

    (81) variableType -> booleanType .

    NEWLINE         reduce using rule 81 (variableType -> booleanType .)
    $end            reduce using rule 81 (variableType -> booleanType .)
    COMMA           reduce using rule 81 (variableType -> booleanType .)
    RIGHTPAR        reduce using rule 81 (variableType -> booleanType .)
    SEMICOLON       reduce using rule 81 (variableType -> booleanType .)
    EQUALS          reduce using rule 81 (variableType -> booleanType .)
    DIFFERENT       reduce using rule 81 (variableType -> booleanType .)
    LESSER          reduce using rule 81 (variableType -> booleanType .)
    GREATER         reduce using rule 81 (variableType -> booleanType .)
    LESSEREQUAL     reduce using rule 81 (variableType -> booleanType .)
    GREATEREQUAL    reduce using rule 81 (variableType -> booleanType .)
    AND             reduce using rule 81 (variableType -> booleanType .)
    OR              reduce using rule 81 (variableType -> booleanType .)


state 47

    (87) arithmetic -> moreArithmetic . arithmeticOp arithmeticDataType
    (89) arithmetic -> moreArithmetic . arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION

    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    arithmeticOp                   shift and go to state 86

state 48

    (90) arithmetic -> arithmeticOp . arithmeticDataType
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    NAME            shift and go to state 51

    arithmeticDataType             shift and go to state 87
    numberType                     shift and go to state 78
    variable                       shift and go to state 88
    functionCall                   shift and go to state 73
    vectorVariable                 shift and go to state 52

state 49

    (91) moreArithmetic -> arithmeticDataType .

    SUM             reduce using rule 91 (moreArithmetic -> arithmeticDataType .)
    SUBSTRACTION    reduce using rule 91 (moreArithmetic -> arithmeticDataType .)
    MULTIPLICATION  reduce using rule 91 (moreArithmetic -> arithmeticDataType .)
    DIVISION        reduce using rule 91 (moreArithmetic -> arithmeticDataType .)


state 50

    (88) arithmetic -> LEFTPAR . arithmetic RIGHTPAR
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET

    LEFTPAR         shift and go to state 50
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    NAME            shift and go to state 51

    arithmetic                     shift and go to state 89
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    numberType                     shift and go to state 78
    variable                       shift and go to state 88
    functionCall                   shift and go to state 73
    vectorVariable                 shift and go to state 52

state 51

    (71) variable -> NAME .
    (29) functionCall -> NAME . LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> NAME . LEFTPAR empty RIGHTPAR
    (73) vectorVariable -> NAME . LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> NAME . LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> NAME . LEFTBRACKET variable RIGHTBRACKET

    NEWLINE         reduce using rule 71 (variable -> NAME .)
    $end            reduce using rule 71 (variable -> NAME .)
    SUM             reduce using rule 71 (variable -> NAME .)
    SUBSTRACTION    reduce using rule 71 (variable -> NAME .)
    MULTIPLICATION  reduce using rule 71 (variable -> NAME .)
    DIVISION        reduce using rule 71 (variable -> NAME .)
    COMMA           reduce using rule 71 (variable -> NAME .)
    RIGHTPAR        reduce using rule 71 (variable -> NAME .)
    RIGHTBRACKET    reduce using rule 71 (variable -> NAME .)
    SEMICOLON       reduce using rule 71 (variable -> NAME .)
    EQUALS          reduce using rule 71 (variable -> NAME .)
    DIFFERENT       reduce using rule 71 (variable -> NAME .)
    LESSER          reduce using rule 71 (variable -> NAME .)
    GREATER         reduce using rule 71 (variable -> NAME .)
    LESSEREQUAL     reduce using rule 71 (variable -> NAME .)
    GREATEREQUAL    reduce using rule 71 (variable -> NAME .)
    AND             reduce using rule 71 (variable -> NAME .)
    OR              reduce using rule 71 (variable -> NAME .)
    LEFTPAR         shift and go to state 34
    LEFTBRACKET     shift and go to state 90


state 52

    (72) variable -> vectorVariable .

    NEWLINE         reduce using rule 72 (variable -> vectorVariable .)
    $end            reduce using rule 72 (variable -> vectorVariable .)
    SUM             reduce using rule 72 (variable -> vectorVariable .)
    SUBSTRACTION    reduce using rule 72 (variable -> vectorVariable .)
    MULTIPLICATION  reduce using rule 72 (variable -> vectorVariable .)
    DIVISION        reduce using rule 72 (variable -> vectorVariable .)
    RIGHTBRACKET    reduce using rule 72 (variable -> vectorVariable .)
    COMMA           reduce using rule 72 (variable -> vectorVariable .)
    RIGHTPAR        reduce using rule 72 (variable -> vectorVariable .)
    SEMICOLON       reduce using rule 72 (variable -> vectorVariable .)
    EQUALS          reduce using rule 72 (variable -> vectorVariable .)
    DIFFERENT       reduce using rule 72 (variable -> vectorVariable .)
    LESSER          reduce using rule 72 (variable -> vectorVariable .)
    GREATER         reduce using rule 72 (variable -> vectorVariable .)
    LESSEREQUAL     reduce using rule 72 (variable -> vectorVariable .)
    GREATEREQUAL    reduce using rule 72 (variable -> vectorVariable .)
    AND             reduce using rule 72 (variable -> vectorVariable .)
    OR              reduce using rule 72 (variable -> vectorVariable .)
    INCREASE        reduce using rule 72 (variable -> vectorVariable .)
    DECREASE        reduce using rule 72 (variable -> vectorVariable .)


state 53

    (82) numberType -> INT .

    NEWLINE         reduce using rule 82 (numberType -> INT .)
    $end            reduce using rule 82 (numberType -> INT .)
    SUM             reduce using rule 82 (numberType -> INT .)
    SUBSTRACTION    reduce using rule 82 (numberType -> INT .)
    MULTIPLICATION  reduce using rule 82 (numberType -> INT .)
    DIVISION        reduce using rule 82 (numberType -> INT .)
    COMMA           reduce using rule 82 (numberType -> INT .)
    RIGHTPAR        reduce using rule 82 (numberType -> INT .)
    SEMICOLON       reduce using rule 82 (numberType -> INT .)
    RIGHTBRACKET    reduce using rule 82 (numberType -> INT .)
    EQUALS          reduce using rule 82 (numberType -> INT .)
    DIFFERENT       reduce using rule 82 (numberType -> INT .)
    LESSER          reduce using rule 82 (numberType -> INT .)
    GREATER         reduce using rule 82 (numberType -> INT .)
    LESSEREQUAL     reduce using rule 82 (numberType -> INT .)
    GREATEREQUAL    reduce using rule 82 (numberType -> INT .)
    AND             reduce using rule 82 (numberType -> INT .)
    OR              reduce using rule 82 (numberType -> INT .)


state 54

    (83) numberType -> DOUBLE .

    NEWLINE         reduce using rule 83 (numberType -> DOUBLE .)
    $end            reduce using rule 83 (numberType -> DOUBLE .)
    SUM             reduce using rule 83 (numberType -> DOUBLE .)
    SUBSTRACTION    reduce using rule 83 (numberType -> DOUBLE .)
    MULTIPLICATION  reduce using rule 83 (numberType -> DOUBLE .)
    DIVISION        reduce using rule 83 (numberType -> DOUBLE .)
    COMMA           reduce using rule 83 (numberType -> DOUBLE .)
    RIGHTPAR        reduce using rule 83 (numberType -> DOUBLE .)
    SEMICOLON       reduce using rule 83 (numberType -> DOUBLE .)
    RIGHTBRACKET    reduce using rule 83 (numberType -> DOUBLE .)
    EQUALS          reduce using rule 83 (numberType -> DOUBLE .)
    DIFFERENT       reduce using rule 83 (numberType -> DOUBLE .)
    LESSER          reduce using rule 83 (numberType -> DOUBLE .)
    GREATER         reduce using rule 83 (numberType -> DOUBLE .)
    LESSEREQUAL     reduce using rule 83 (numberType -> DOUBLE .)
    GREATEREQUAL    reduce using rule 83 (numberType -> DOUBLE .)
    AND             reduce using rule 83 (numberType -> DOUBLE .)
    OR              reduce using rule 83 (numberType -> DOUBLE .)


state 55

    (84) stringType -> STRING .

    NEWLINE         reduce using rule 84 (stringType -> STRING .)
    $end            reduce using rule 84 (stringType -> STRING .)
    COMMA           reduce using rule 84 (stringType -> STRING .)
    RIGHTPAR        reduce using rule 84 (stringType -> STRING .)
    SEMICOLON       reduce using rule 84 (stringType -> STRING .)
    EQUALS          reduce using rule 84 (stringType -> STRING .)
    DIFFERENT       reduce using rule 84 (stringType -> STRING .)
    LESSER          reduce using rule 84 (stringType -> STRING .)
    GREATER         reduce using rule 84 (stringType -> STRING .)
    LESSEREQUAL     reduce using rule 84 (stringType -> STRING .)
    GREATEREQUAL    reduce using rule 84 (stringType -> STRING .)
    AND             reduce using rule 84 (stringType -> STRING .)
    OR              reduce using rule 84 (stringType -> STRING .)


state 56

    (85) booleanType -> FALSE .

    NEWLINE         reduce using rule 85 (booleanType -> FALSE .)
    $end            reduce using rule 85 (booleanType -> FALSE .)
    COMMA           reduce using rule 85 (booleanType -> FALSE .)
    RIGHTPAR        reduce using rule 85 (booleanType -> FALSE .)
    SEMICOLON       reduce using rule 85 (booleanType -> FALSE .)
    EQUALS          reduce using rule 85 (booleanType -> FALSE .)
    DIFFERENT       reduce using rule 85 (booleanType -> FALSE .)
    LESSER          reduce using rule 85 (booleanType -> FALSE .)
    GREATER         reduce using rule 85 (booleanType -> FALSE .)
    LESSEREQUAL     reduce using rule 85 (booleanType -> FALSE .)
    GREATEREQUAL    reduce using rule 85 (booleanType -> FALSE .)
    AND             reduce using rule 85 (booleanType -> FALSE .)
    OR              reduce using rule 85 (booleanType -> FALSE .)


state 57

    (86) booleanType -> TRUE .

    NEWLINE         reduce using rule 86 (booleanType -> TRUE .)
    $end            reduce using rule 86 (booleanType -> TRUE .)
    COMMA           reduce using rule 86 (booleanType -> TRUE .)
    RIGHTPAR        reduce using rule 86 (booleanType -> TRUE .)
    SEMICOLON       reduce using rule 86 (booleanType -> TRUE .)
    EQUALS          reduce using rule 86 (booleanType -> TRUE .)
    DIFFERENT       reduce using rule 86 (booleanType -> TRUE .)
    LESSER          reduce using rule 86 (booleanType -> TRUE .)
    GREATER         reduce using rule 86 (booleanType -> TRUE .)
    LESSEREQUAL     reduce using rule 86 (booleanType -> TRUE .)
    GREATEREQUAL    reduce using rule 86 (booleanType -> TRUE .)
    AND             reduce using rule 86 (booleanType -> TRUE .)
    OR              reduce using rule 86 (booleanType -> TRUE .)


state 58

    (96) arithmeticOp -> SUM .

    INT             reduce using rule 96 (arithmeticOp -> SUM .)
    DOUBLE          reduce using rule 96 (arithmeticOp -> SUM .)
    NAME            reduce using rule 96 (arithmeticOp -> SUM .)
    LEFTPAR         reduce using rule 96 (arithmeticOp -> SUM .)


state 59

    (97) arithmeticOp -> SUBSTRACTION .

    INT             reduce using rule 97 (arithmeticOp -> SUBSTRACTION .)
    DOUBLE          reduce using rule 97 (arithmeticOp -> SUBSTRACTION .)
    NAME            reduce using rule 97 (arithmeticOp -> SUBSTRACTION .)
    LEFTPAR         reduce using rule 97 (arithmeticOp -> SUBSTRACTION .)


state 60

    (98) arithmeticOp -> MULTIPLICATION .

    INT             reduce using rule 98 (arithmeticOp -> MULTIPLICATION .)
    DOUBLE          reduce using rule 98 (arithmeticOp -> MULTIPLICATION .)
    NAME            reduce using rule 98 (arithmeticOp -> MULTIPLICATION .)
    LEFTPAR         reduce using rule 98 (arithmeticOp -> MULTIPLICATION .)


state 61

    (99) arithmeticOp -> DIVISION .

    INT             reduce using rule 99 (arithmeticOp -> DIVISION .)
    DOUBLE          reduce using rule 99 (arithmeticOp -> DIVISION .)
    NAME            reduce using rule 99 (arithmeticOp -> DIVISION .)
    LEFTPAR         reduce using rule 99 (arithmeticOp -> DIVISION .)


state 62

    (35) ifCondition -> IF LEFTPAR . conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> IF LEFTPAR . conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> IF LEFTPAR . conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
    (40) conditionals -> . condition
    (41) conditionals -> . condition conditionalOp conditionals
    (42) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (43) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (44) condition -> . sendingVariable conditionOp sendingVariable
    (67) sendingVariable -> . variableType
    (68) sendingVariable -> . arithmetic
    (69) sendingVariable -> . variable
    (70) sendingVariable -> . functionCall
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 91
    NAME            shift and go to state 51
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    conditionals                   shift and go to state 92
    condition                      shift and go to state 93
    sendingVariable                shift and go to state 94
    variableType                   shift and go to state 40
    arithmetic                     shift and go to state 41
    variable                       shift and go to state 42
    functionCall                   shift and go to state 43
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    vectorVariable                 shift and go to state 52

state 63

    (38) forCondition -> FOR LEFTPAR . declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation

    VARDECLARATION  shift and go to state 20

    declaration                    shift and go to state 95

state 64

    (39) whileCondition -> WHILE LEFTPAR . conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (40) conditionals -> . condition
    (41) conditionals -> . condition conditionalOp conditionals
    (42) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (43) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (44) condition -> . sendingVariable conditionOp sendingVariable
    (67) sendingVariable -> . variableType
    (68) sendingVariable -> . arithmetic
    (69) sendingVariable -> . variable
    (70) sendingVariable -> . functionCall
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 91
    NAME            shift and go to state 51
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    conditionals                   shift and go to state 96
    condition                      shift and go to state 93
    sendingVariable                shift and go to state 94
    variableType                   shift and go to state 40
    arithmetic                     shift and go to state 41
    variable                       shift and go to state 42
    functionCall                   shift and go to state 43
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    vectorVariable                 shift and go to state 52

state 65

    (2) Niark -> methodDefinition NEWLINE Niark .

    $end            reduce using rule 2 (Niark -> methodDefinition NEWLINE Niark .)


state 66

    (3) Niark -> instruction NEWLINE Niark .

    $end            reduce using rule 3 (Niark -> instruction NEWLINE Niark .)


state 67

    (6) methodDefinition -> domain methodType NAME . LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (7) methodDefinition -> domain methodType NAME . LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTPAR         shift and go to state 97


state 68

    (71) variable -> NAME .
    (73) vectorVariable -> NAME . LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> NAME . LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> NAME . LEFTBRACKET variable RIGHTBRACKET
    (29) functionCall -> NAME . LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> NAME . LEFTPAR empty RIGHTPAR

    NEWLINE         reduce using rule 71 (variable -> NAME .)
    $end            reduce using rule 71 (variable -> NAME .)
    SUM             reduce using rule 71 (variable -> NAME .)
    SUBSTRACTION    reduce using rule 71 (variable -> NAME .)
    MULTIPLICATION  reduce using rule 71 (variable -> NAME .)
    DIVISION        reduce using rule 71 (variable -> NAME .)
    RIGHTBRACKET    reduce using rule 71 (variable -> NAME .)
    SEMICOLON       reduce using rule 71 (variable -> NAME .)
    LEFTBRACKET     shift and go to state 90
    LEFTPAR         shift and go to state 34


state 69

    (18) asignation -> NAME ASIGNATION dataTypeAsignation .

    NEWLINE         reduce using rule 18 (asignation -> NAME ASIGNATION dataTypeAsignation .)
    $end            reduce using rule 18 (asignation -> NAME ASIGNATION dataTypeAsignation .)


state 70

    (24) dataTypeAsignation -> variable .
    (94) arithmeticDataType -> variable .

    NEWLINE         reduce using rule 24 (dataTypeAsignation -> variable .)
    $end            reduce using rule 24 (dataTypeAsignation -> variable .)
    SEMICOLON       reduce using rule 24 (dataTypeAsignation -> variable .)
    SUM             reduce using rule 94 (arithmeticDataType -> variable .)
    SUBSTRACTION    reduce using rule 94 (arithmeticDataType -> variable .)
    MULTIPLICATION  reduce using rule 94 (arithmeticDataType -> variable .)
    DIVISION        reduce using rule 94 (arithmeticDataType -> variable .)


state 71

    (25) dataTypeAsignation -> variableType .

    NEWLINE         reduce using rule 25 (dataTypeAsignation -> variableType .)
    $end            reduce using rule 25 (dataTypeAsignation -> variableType .)
    SEMICOLON       reduce using rule 25 (dataTypeAsignation -> variableType .)


state 72

    (26) dataTypeAsignation -> arithmetic .
    (92) moreArithmetic -> arithmetic .

    NEWLINE         reduce using rule 26 (dataTypeAsignation -> arithmetic .)
    $end            reduce using rule 26 (dataTypeAsignation -> arithmetic .)
    SEMICOLON       reduce using rule 26 (dataTypeAsignation -> arithmetic .)
    SUM             reduce using rule 92 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 92 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 92 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 92 (moreArithmetic -> arithmetic .)


state 73

    (95) arithmeticDataType -> functionCall .

    SUM             reduce using rule 95 (arithmeticDataType -> functionCall .)
    SUBSTRACTION    reduce using rule 95 (arithmeticDataType -> functionCall .)
    MULTIPLICATION  reduce using rule 95 (arithmeticDataType -> functionCall .)
    DIVISION        reduce using rule 95 (arithmeticDataType -> functionCall .)
    NEWLINE         reduce using rule 95 (arithmeticDataType -> functionCall .)
    $end            reduce using rule 95 (arithmeticDataType -> functionCall .)
    RIGHTBRACKET    reduce using rule 95 (arithmeticDataType -> functionCall .)
    COMMA           reduce using rule 95 (arithmeticDataType -> functionCall .)
    RIGHTPAR        reduce using rule 95 (arithmeticDataType -> functionCall .)
    SEMICOLON       reduce using rule 95 (arithmeticDataType -> functionCall .)
    EQUALS          reduce using rule 95 (arithmeticDataType -> functionCall .)
    DIFFERENT       reduce using rule 95 (arithmeticDataType -> functionCall .)
    LESSER          reduce using rule 95 (arithmeticDataType -> functionCall .)
    GREATER         reduce using rule 95 (arithmeticDataType -> functionCall .)
    LESSEREQUAL     reduce using rule 95 (arithmeticDataType -> functionCall .)
    GREATEREQUAL    reduce using rule 95 (arithmeticDataType -> functionCall .)
    AND             reduce using rule 95 (arithmeticDataType -> functionCall .)
    OR              reduce using rule 95 (arithmeticDataType -> functionCall .)


state 74

    (19) asignation -> NAME LEFTBRACKET dataLocalizatorType . RIGHTBRACKET ASIGNATION dataTypeAsignation

    RIGHTBRACKET    shift and go to state 98


state 75

    (76) dataLocalizatorType -> INT .
    (82) numberType -> INT .

    RIGHTBRACKET    reduce using rule 76 (dataLocalizatorType -> INT .)
    SUM             reduce using rule 82 (numberType -> INT .)
    SUBSTRACTION    reduce using rule 82 (numberType -> INT .)
    MULTIPLICATION  reduce using rule 82 (numberType -> INT .)
    DIVISION        reduce using rule 82 (numberType -> INT .)


state 76

    (77) dataLocalizatorType -> variable .
    (94) arithmeticDataType -> variable .

    RIGHTBRACKET    reduce using rule 77 (dataLocalizatorType -> variable .)
    SUM             reduce using rule 94 (arithmeticDataType -> variable .)
    SUBSTRACTION    reduce using rule 94 (arithmeticDataType -> variable .)
    MULTIPLICATION  reduce using rule 94 (arithmeticDataType -> variable .)
    DIVISION        reduce using rule 94 (arithmeticDataType -> variable .)


state 77

    (78) dataLocalizatorType -> arithmetic .
    (92) moreArithmetic -> arithmetic .

    RIGHTBRACKET    reduce using rule 78 (dataLocalizatorType -> arithmetic .)
    SUM             reduce using rule 92 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 92 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 92 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 92 (moreArithmetic -> arithmetic .)


state 78

    (93) arithmeticDataType -> numberType .

    SUM             reduce using rule 93 (arithmeticDataType -> numberType .)
    SUBSTRACTION    reduce using rule 93 (arithmeticDataType -> numberType .)
    MULTIPLICATION  reduce using rule 93 (arithmeticDataType -> numberType .)
    DIVISION        reduce using rule 93 (arithmeticDataType -> numberType .)
    NEWLINE         reduce using rule 93 (arithmeticDataType -> numberType .)
    $end            reduce using rule 93 (arithmeticDataType -> numberType .)
    RIGHTBRACKET    reduce using rule 93 (arithmeticDataType -> numberType .)
    COMMA           reduce using rule 93 (arithmeticDataType -> numberType .)
    RIGHTPAR        reduce using rule 93 (arithmeticDataType -> numberType .)
    SEMICOLON       reduce using rule 93 (arithmeticDataType -> numberType .)
    EQUALS          reduce using rule 93 (arithmeticDataType -> numberType .)
    DIFFERENT       reduce using rule 93 (arithmeticDataType -> numberType .)
    LESSER          reduce using rule 93 (arithmeticDataType -> numberType .)
    GREATER         reduce using rule 93 (arithmeticDataType -> numberType .)
    LESSEREQUAL     reduce using rule 93 (arithmeticDataType -> numberType .)
    GREATEREQUAL    reduce using rule 93 (arithmeticDataType -> numberType .)
    AND             reduce using rule 93 (arithmeticDataType -> numberType .)
    OR              reduce using rule 93 (arithmeticDataType -> numberType .)


state 79

    (29) functionCall -> NAME LEFTPAR sendingVariables . RIGHTPAR

    RIGHTPAR        shift and go to state 99


state 80

    (30) functionCall -> NAME LEFTPAR empty . RIGHTPAR

    RIGHTPAR        shift and go to state 100


state 81

    (65) sendingVariables -> sendingVariable . COMMA sendingVariables
    (66) sendingVariables -> sendingVariable .

    COMMA           shift and go to state 101
    RIGHTPAR        reduce using rule 66 (sendingVariables -> sendingVariable .)


state 82

    (21) declaration -> VARDECLARATION ASIGNATION dataTypeAsignation .

    NEWLINE         reduce using rule 21 (declaration -> VARDECLARATION ASIGNATION dataTypeAsignation .)
    $end            reduce using rule 21 (declaration -> VARDECLARATION ASIGNATION dataTypeAsignation .)
    SEMICOLON       reduce using rule 21 (declaration -> VARDECLARATION ASIGNATION dataTypeAsignation .)


state 83

    (22) declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType . RIGHTBRACKET
    (23) declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType . RIGHTBRACKET ASIGNATION dataTypeAsignation

    RIGHTBRACKET    shift and go to state 102


state 84

    (27) read -> READ LEFTPAR NAME . RIGHTPAR

    RIGHTPAR        shift and go to state 103


state 85

    (28) print -> PRINT LEFTPAR sendingVariables . RIGHTPAR

    RIGHTPAR        shift and go to state 104


state 86

    (87) arithmetic -> moreArithmetic arithmeticOp . arithmeticDataType
    (89) arithmetic -> moreArithmetic arithmeticOp . LEFTPAR arithmetic RIGHTPAR
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET

    LEFTPAR         shift and go to state 106
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    NAME            shift and go to state 51

    arithmeticDataType             shift and go to state 105
    numberType                     shift and go to state 78
    variable                       shift and go to state 88
    functionCall                   shift and go to state 73
    vectorVariable                 shift and go to state 52

state 87

    (90) arithmetic -> arithmeticOp arithmeticDataType .

    NEWLINE         reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    $end            reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    SUM             reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    SUBSTRACTION    reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    MULTIPLICATION  reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    DIVISION        reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    RIGHTBRACKET    reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    COMMA           reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    RIGHTPAR        reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    SEMICOLON       reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    EQUALS          reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    DIFFERENT       reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    LESSER          reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    GREATER         reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    LESSEREQUAL     reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    GREATEREQUAL    reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    AND             reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)
    OR              reduce using rule 90 (arithmetic -> arithmeticOp arithmeticDataType .)


state 88

    (94) arithmeticDataType -> variable .

    NEWLINE         reduce using rule 94 (arithmeticDataType -> variable .)
    $end            reduce using rule 94 (arithmeticDataType -> variable .)
    SUM             reduce using rule 94 (arithmeticDataType -> variable .)
    SUBSTRACTION    reduce using rule 94 (arithmeticDataType -> variable .)
    MULTIPLICATION  reduce using rule 94 (arithmeticDataType -> variable .)
    DIVISION        reduce using rule 94 (arithmeticDataType -> variable .)
    RIGHTBRACKET    reduce using rule 94 (arithmeticDataType -> variable .)
    COMMA           reduce using rule 94 (arithmeticDataType -> variable .)
    RIGHTPAR        reduce using rule 94 (arithmeticDataType -> variable .)
    SEMICOLON       reduce using rule 94 (arithmeticDataType -> variable .)
    EQUALS          reduce using rule 94 (arithmeticDataType -> variable .)
    DIFFERENT       reduce using rule 94 (arithmeticDataType -> variable .)
    LESSER          reduce using rule 94 (arithmeticDataType -> variable .)
    GREATER         reduce using rule 94 (arithmeticDataType -> variable .)
    LESSEREQUAL     reduce using rule 94 (arithmeticDataType -> variable .)
    GREATEREQUAL    reduce using rule 94 (arithmeticDataType -> variable .)
    AND             reduce using rule 94 (arithmeticDataType -> variable .)
    OR              reduce using rule 94 (arithmeticDataType -> variable .)


state 89

    (88) arithmetic -> LEFTPAR arithmetic . RIGHTPAR
    (92) moreArithmetic -> arithmetic .

    RIGHTPAR        shift and go to state 107
    SUM             reduce using rule 92 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 92 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 92 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 92 (moreArithmetic -> arithmetic .)


state 90

    (73) vectorVariable -> NAME LEFTBRACKET . arithmetic RIGHTBRACKET
    (74) vectorVariable -> NAME LEFTBRACKET . INT RIGHTBRACKET
    (75) vectorVariable -> NAME LEFTBRACKET . variable RIGHTBRACKET
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    INT             shift and go to state 109
    LEFTPAR         shift and go to state 50
    NAME            shift and go to state 68
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61
    DOUBLE          shift and go to state 54

    arithmetic                     shift and go to state 108
    variable                       shift and go to state 110
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    vectorVariable                 shift and go to state 52
    numberType                     shift and go to state 78
    functionCall                   shift and go to state 73

state 91

    (42) conditionals -> LEFTPAR . conditionals RIGHTPAR conditionalOp conditionals
    (43) conditionals -> LEFTPAR . conditionals RIGHTPAR
    (88) arithmetic -> LEFTPAR . arithmetic RIGHTPAR
    (40) conditionals -> . condition
    (41) conditionals -> . condition conditionalOp conditionals
    (42) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (43) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (44) condition -> . sendingVariable conditionOp sendingVariable
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (67) sendingVariable -> . variableType
    (68) sendingVariable -> . arithmetic
    (69) sendingVariable -> . variable
    (70) sendingVariable -> . functionCall
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET

    LEFTPAR         shift and go to state 91
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61
    NAME            shift and go to state 51
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57

    conditionals                   shift and go to state 111
    arithmetic                     shift and go to state 112
    condition                      shift and go to state 93
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    sendingVariable                shift and go to state 94
    variableType                   shift and go to state 40
    variable                       shift and go to state 42
    functionCall                   shift and go to state 43
    numberType                     shift and go to state 113
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    vectorVariable                 shift and go to state 52

state 92

    (35) ifCondition -> IF LEFTPAR conditionals . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> IF LEFTPAR conditionals . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> IF LEFTPAR conditionals . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition

    RIGHTPAR        shift and go to state 114


state 93

    (40) conditionals -> condition .
    (41) conditionals -> condition . conditionalOp conditionals
    (51) conditionalOp -> . AND
    (52) conditionalOp -> . OR

    RIGHTPAR        reduce using rule 40 (conditionals -> condition .)
    SEMICOLON       reduce using rule 40 (conditionals -> condition .)
    AND             shift and go to state 116
    OR              shift and go to state 117

    conditionalOp                  shift and go to state 115

state 94

    (44) condition -> sendingVariable . conditionOp sendingVariable
    (53) conditionOp -> . EQUALS
    (54) conditionOp -> . DIFFERENT
    (55) conditionOp -> . LESSER
    (56) conditionOp -> . GREATER
    (57) conditionOp -> . LESSEREQUAL
    (58) conditionOp -> . GREATEREQUAL

    EQUALS          shift and go to state 119
    DIFFERENT       shift and go to state 120
    LESSER          shift and go to state 121
    GREATER         shift and go to state 122
    LESSEREQUAL     shift and go to state 123
    GREATEREQUAL    shift and go to state 124

    conditionOp                    shift and go to state 118

state 95

    (38) forCondition -> FOR LEFTPAR declaration . SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    SEMICOLON       shift and go to state 125


state 96

    (39) whileCondition -> WHILE LEFTPAR conditionals . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTPAR        shift and go to state 126


state 97

    (6) methodDefinition -> domain methodType NAME LEFTPAR . parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (7) methodDefinition -> domain methodType NAME LEFTPAR . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (63) parameters -> . NAME COMMA parameters
    (64) parameters -> . NAME

    RIGHTPAR        shift and go to state 129
    NAME            shift and go to state 127

    parameters                     shift and go to state 128

state 98

    (19) asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET . ASIGNATION dataTypeAsignation

    ASIGNATION      shift and go to state 130


state 99

    (29) functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .

    NEWLINE         reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    $end            reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    SUM             reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    SUBSTRACTION    reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    MULTIPLICATION  reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    DIVISION        reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    COMMA           reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    RIGHTPAR        reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    SEMICOLON       reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    EQUALS          reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    DIFFERENT       reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    LESSER          reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    GREATER         reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    LESSEREQUAL     reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    GREATEREQUAL    reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    AND             reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    OR              reduce using rule 29 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)


state 100

    (30) functionCall -> NAME LEFTPAR empty RIGHTPAR .

    NEWLINE         reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    $end            reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    SUM             reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    SUBSTRACTION    reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    MULTIPLICATION  reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    DIVISION        reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    COMMA           reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    RIGHTPAR        reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    SEMICOLON       reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    EQUALS          reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    DIFFERENT       reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    LESSER          reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    GREATER         reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    LESSEREQUAL     reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    GREATEREQUAL    reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    AND             reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    OR              reduce using rule 30 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)


state 101

    (65) sendingVariables -> sendingVariable COMMA . sendingVariables
    (65) sendingVariables -> . sendingVariable COMMA sendingVariables
    (66) sendingVariables -> . sendingVariable
    (67) sendingVariable -> . variableType
    (68) sendingVariable -> . arithmetic
    (69) sendingVariable -> . variable
    (70) sendingVariable -> . functionCall
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 50
    NAME            shift and go to state 51
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    sendingVariable                shift and go to state 81
    sendingVariables               shift and go to state 131
    variableType                   shift and go to state 40
    arithmetic                     shift and go to state 41
    variable                       shift and go to state 42
    functionCall                   shift and go to state 43
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    vectorVariable                 shift and go to state 52

state 102

    (22) declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET .
    (23) declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET . ASIGNATION dataTypeAsignation

    NEWLINE         reduce using rule 22 (declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    $end            reduce using rule 22 (declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    SEMICOLON       reduce using rule 22 (declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    ASIGNATION      shift and go to state 132


state 103

    (27) read -> READ LEFTPAR NAME RIGHTPAR .

    NEWLINE         reduce using rule 27 (read -> READ LEFTPAR NAME RIGHTPAR .)
    $end            reduce using rule 27 (read -> READ LEFTPAR NAME RIGHTPAR .)


state 104

    (28) print -> PRINT LEFTPAR sendingVariables RIGHTPAR .

    NEWLINE         reduce using rule 28 (print -> PRINT LEFTPAR sendingVariables RIGHTPAR .)
    $end            reduce using rule 28 (print -> PRINT LEFTPAR sendingVariables RIGHTPAR .)


state 105

    (87) arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .

    NEWLINE         reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    $end            reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    SUM             reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    SUBSTRACTION    reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    MULTIPLICATION  reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    DIVISION        reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    RIGHTBRACKET    reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    COMMA           reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    RIGHTPAR        reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    SEMICOLON       reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    EQUALS          reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    DIFFERENT       reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    LESSER          reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    GREATER         reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    LESSEREQUAL     reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    GREATEREQUAL    reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    AND             reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    OR              reduce using rule 87 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)


state 106

    (89) arithmetic -> moreArithmetic arithmeticOp LEFTPAR . arithmetic RIGHTPAR
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET

    LEFTPAR         shift and go to state 50
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    NAME            shift and go to state 51

    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmetic                     shift and go to state 133
    arithmeticDataType             shift and go to state 49
    numberType                     shift and go to state 78
    variable                       shift and go to state 88
    functionCall                   shift and go to state 73
    vectorVariable                 shift and go to state 52

state 107

    (88) arithmetic -> LEFTPAR arithmetic RIGHTPAR .

    NEWLINE         reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    $end            reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    SUM             reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    SUBSTRACTION    reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    MULTIPLICATION  reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    DIVISION        reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    COMMA           reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    RIGHTPAR        reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    SEMICOLON       reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    EQUALS          reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    DIFFERENT       reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    LESSER          reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    GREATER         reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    LESSEREQUAL     reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    GREATEREQUAL    reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    AND             reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    OR              reduce using rule 88 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)


state 108

    (73) vectorVariable -> NAME LEFTBRACKET arithmetic . RIGHTBRACKET
    (92) moreArithmetic -> arithmetic .

    RIGHTBRACKET    shift and go to state 134
    SUM             reduce using rule 92 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 92 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 92 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 92 (moreArithmetic -> arithmetic .)


state 109

    (74) vectorVariable -> NAME LEFTBRACKET INT . RIGHTBRACKET
    (82) numberType -> INT .

    RIGHTBRACKET    shift and go to state 135
    SUM             reduce using rule 82 (numberType -> INT .)
    SUBSTRACTION    reduce using rule 82 (numberType -> INT .)
    MULTIPLICATION  reduce using rule 82 (numberType -> INT .)
    DIVISION        reduce using rule 82 (numberType -> INT .)


state 110

    (75) vectorVariable -> NAME LEFTBRACKET variable . RIGHTBRACKET
    (94) arithmeticDataType -> variable .

    RIGHTBRACKET    shift and go to state 136
    SUM             reduce using rule 94 (arithmeticDataType -> variable .)
    SUBSTRACTION    reduce using rule 94 (arithmeticDataType -> variable .)
    MULTIPLICATION  reduce using rule 94 (arithmeticDataType -> variable .)
    DIVISION        reduce using rule 94 (arithmeticDataType -> variable .)


state 111

    (42) conditionals -> LEFTPAR conditionals . RIGHTPAR conditionalOp conditionals
    (43) conditionals -> LEFTPAR conditionals . RIGHTPAR

    RIGHTPAR        shift and go to state 137


state 112

    (88) arithmetic -> LEFTPAR arithmetic . RIGHTPAR
    (92) moreArithmetic -> arithmetic .
    (68) sendingVariable -> arithmetic .

    RIGHTPAR        shift and go to state 107
    SUM             reduce using rule 92 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 92 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 92 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 92 (moreArithmetic -> arithmetic .)
    EQUALS          reduce using rule 68 (sendingVariable -> arithmetic .)
    DIFFERENT       reduce using rule 68 (sendingVariable -> arithmetic .)
    LESSER          reduce using rule 68 (sendingVariable -> arithmetic .)
    GREATER         reduce using rule 68 (sendingVariable -> arithmetic .)
    LESSEREQUAL     reduce using rule 68 (sendingVariable -> arithmetic .)
    GREATEREQUAL    reduce using rule 68 (sendingVariable -> arithmetic .)


state 113

    (93) arithmeticDataType -> numberType .
    (79) variableType -> numberType .

    SUM             reduce using rule 93 (arithmeticDataType -> numberType .)
    SUBSTRACTION    reduce using rule 93 (arithmeticDataType -> numberType .)
    MULTIPLICATION  reduce using rule 93 (arithmeticDataType -> numberType .)
    DIVISION        reduce using rule 93 (arithmeticDataType -> numberType .)
    EQUALS          reduce using rule 79 (variableType -> numberType .)
    DIFFERENT       reduce using rule 79 (variableType -> numberType .)
    LESSER          reduce using rule 79 (variableType -> numberType .)
    GREATER         reduce using rule 79 (variableType -> numberType .)
    LESSEREQUAL     reduce using rule 79 (variableType -> numberType .)
    GREATEREQUAL    reduce using rule 79 (variableType -> numberType .)


state 114

    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> IF LEFTPAR conditionals RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> IF LEFTPAR conditionals RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition

    LEFTKEY         shift and go to state 138


state 115

    (41) conditionals -> condition conditionalOp . conditionals
    (40) conditionals -> . condition
    (41) conditionals -> . condition conditionalOp conditionals
    (42) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (43) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (44) condition -> . sendingVariable conditionOp sendingVariable
    (67) sendingVariable -> . variableType
    (68) sendingVariable -> . arithmetic
    (69) sendingVariable -> . variable
    (70) sendingVariable -> . functionCall
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 91
    NAME            shift and go to state 51
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    condition                      shift and go to state 93
    conditionals                   shift and go to state 139
    sendingVariable                shift and go to state 94
    variableType                   shift and go to state 40
    arithmetic                     shift and go to state 41
    variable                       shift and go to state 42
    functionCall                   shift and go to state 43
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    vectorVariable                 shift and go to state 52

state 116

    (51) conditionalOp -> AND .

    LEFTPAR         reduce using rule 51 (conditionalOp -> AND .)
    NAME            reduce using rule 51 (conditionalOp -> AND .)
    INT             reduce using rule 51 (conditionalOp -> AND .)
    DOUBLE          reduce using rule 51 (conditionalOp -> AND .)
    STRING          reduce using rule 51 (conditionalOp -> AND .)
    FALSE           reduce using rule 51 (conditionalOp -> AND .)
    TRUE            reduce using rule 51 (conditionalOp -> AND .)
    SUM             reduce using rule 51 (conditionalOp -> AND .)
    SUBSTRACTION    reduce using rule 51 (conditionalOp -> AND .)
    MULTIPLICATION  reduce using rule 51 (conditionalOp -> AND .)
    DIVISION        reduce using rule 51 (conditionalOp -> AND .)


state 117

    (52) conditionalOp -> OR .

    LEFTPAR         reduce using rule 52 (conditionalOp -> OR .)
    NAME            reduce using rule 52 (conditionalOp -> OR .)
    INT             reduce using rule 52 (conditionalOp -> OR .)
    DOUBLE          reduce using rule 52 (conditionalOp -> OR .)
    STRING          reduce using rule 52 (conditionalOp -> OR .)
    FALSE           reduce using rule 52 (conditionalOp -> OR .)
    TRUE            reduce using rule 52 (conditionalOp -> OR .)
    SUM             reduce using rule 52 (conditionalOp -> OR .)
    SUBSTRACTION    reduce using rule 52 (conditionalOp -> OR .)
    MULTIPLICATION  reduce using rule 52 (conditionalOp -> OR .)
    DIVISION        reduce using rule 52 (conditionalOp -> OR .)


state 118

    (44) condition -> sendingVariable conditionOp . sendingVariable
    (67) sendingVariable -> . variableType
    (68) sendingVariable -> . arithmetic
    (69) sendingVariable -> . variable
    (70) sendingVariable -> . functionCall
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 50
    NAME            shift and go to state 51
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    sendingVariable                shift and go to state 140
    variableType                   shift and go to state 40
    arithmetic                     shift and go to state 41
    variable                       shift and go to state 42
    functionCall                   shift and go to state 43
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    vectorVariable                 shift and go to state 52

state 119

    (53) conditionOp -> EQUALS .

    LEFTPAR         reduce using rule 53 (conditionOp -> EQUALS .)
    NAME            reduce using rule 53 (conditionOp -> EQUALS .)
    INT             reduce using rule 53 (conditionOp -> EQUALS .)
    DOUBLE          reduce using rule 53 (conditionOp -> EQUALS .)
    STRING          reduce using rule 53 (conditionOp -> EQUALS .)
    FALSE           reduce using rule 53 (conditionOp -> EQUALS .)
    TRUE            reduce using rule 53 (conditionOp -> EQUALS .)
    SUM             reduce using rule 53 (conditionOp -> EQUALS .)
    SUBSTRACTION    reduce using rule 53 (conditionOp -> EQUALS .)
    MULTIPLICATION  reduce using rule 53 (conditionOp -> EQUALS .)
    DIVISION        reduce using rule 53 (conditionOp -> EQUALS .)


state 120

    (54) conditionOp -> DIFFERENT .

    LEFTPAR         reduce using rule 54 (conditionOp -> DIFFERENT .)
    NAME            reduce using rule 54 (conditionOp -> DIFFERENT .)
    INT             reduce using rule 54 (conditionOp -> DIFFERENT .)
    DOUBLE          reduce using rule 54 (conditionOp -> DIFFERENT .)
    STRING          reduce using rule 54 (conditionOp -> DIFFERENT .)
    FALSE           reduce using rule 54 (conditionOp -> DIFFERENT .)
    TRUE            reduce using rule 54 (conditionOp -> DIFFERENT .)
    SUM             reduce using rule 54 (conditionOp -> DIFFERENT .)
    SUBSTRACTION    reduce using rule 54 (conditionOp -> DIFFERENT .)
    MULTIPLICATION  reduce using rule 54 (conditionOp -> DIFFERENT .)
    DIVISION        reduce using rule 54 (conditionOp -> DIFFERENT .)


state 121

    (55) conditionOp -> LESSER .

    LEFTPAR         reduce using rule 55 (conditionOp -> LESSER .)
    NAME            reduce using rule 55 (conditionOp -> LESSER .)
    INT             reduce using rule 55 (conditionOp -> LESSER .)
    DOUBLE          reduce using rule 55 (conditionOp -> LESSER .)
    STRING          reduce using rule 55 (conditionOp -> LESSER .)
    FALSE           reduce using rule 55 (conditionOp -> LESSER .)
    TRUE            reduce using rule 55 (conditionOp -> LESSER .)
    SUM             reduce using rule 55 (conditionOp -> LESSER .)
    SUBSTRACTION    reduce using rule 55 (conditionOp -> LESSER .)
    MULTIPLICATION  reduce using rule 55 (conditionOp -> LESSER .)
    DIVISION        reduce using rule 55 (conditionOp -> LESSER .)


state 122

    (56) conditionOp -> GREATER .

    LEFTPAR         reduce using rule 56 (conditionOp -> GREATER .)
    NAME            reduce using rule 56 (conditionOp -> GREATER .)
    INT             reduce using rule 56 (conditionOp -> GREATER .)
    DOUBLE          reduce using rule 56 (conditionOp -> GREATER .)
    STRING          reduce using rule 56 (conditionOp -> GREATER .)
    FALSE           reduce using rule 56 (conditionOp -> GREATER .)
    TRUE            reduce using rule 56 (conditionOp -> GREATER .)
    SUM             reduce using rule 56 (conditionOp -> GREATER .)
    SUBSTRACTION    reduce using rule 56 (conditionOp -> GREATER .)
    MULTIPLICATION  reduce using rule 56 (conditionOp -> GREATER .)
    DIVISION        reduce using rule 56 (conditionOp -> GREATER .)


state 123

    (57) conditionOp -> LESSEREQUAL .

    LEFTPAR         reduce using rule 57 (conditionOp -> LESSEREQUAL .)
    NAME            reduce using rule 57 (conditionOp -> LESSEREQUAL .)
    INT             reduce using rule 57 (conditionOp -> LESSEREQUAL .)
    DOUBLE          reduce using rule 57 (conditionOp -> LESSEREQUAL .)
    STRING          reduce using rule 57 (conditionOp -> LESSEREQUAL .)
    FALSE           reduce using rule 57 (conditionOp -> LESSEREQUAL .)
    TRUE            reduce using rule 57 (conditionOp -> LESSEREQUAL .)
    SUM             reduce using rule 57 (conditionOp -> LESSEREQUAL .)
    SUBSTRACTION    reduce using rule 57 (conditionOp -> LESSEREQUAL .)
    MULTIPLICATION  reduce using rule 57 (conditionOp -> LESSEREQUAL .)
    DIVISION        reduce using rule 57 (conditionOp -> LESSEREQUAL .)


state 124

    (58) conditionOp -> GREATEREQUAL .

    LEFTPAR         reduce using rule 58 (conditionOp -> GREATEREQUAL .)
    NAME            reduce using rule 58 (conditionOp -> GREATEREQUAL .)
    INT             reduce using rule 58 (conditionOp -> GREATEREQUAL .)
    DOUBLE          reduce using rule 58 (conditionOp -> GREATEREQUAL .)
    STRING          reduce using rule 58 (conditionOp -> GREATEREQUAL .)
    FALSE           reduce using rule 58 (conditionOp -> GREATEREQUAL .)
    TRUE            reduce using rule 58 (conditionOp -> GREATEREQUAL .)
    SUM             reduce using rule 58 (conditionOp -> GREATEREQUAL .)
    SUBSTRACTION    reduce using rule 58 (conditionOp -> GREATEREQUAL .)
    MULTIPLICATION  reduce using rule 58 (conditionOp -> GREATEREQUAL .)
    DIVISION        reduce using rule 58 (conditionOp -> GREATEREQUAL .)


state 125

    (38) forCondition -> FOR LEFTPAR declaration SEMICOLON . conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (40) conditionals -> . condition
    (41) conditionals -> . condition conditionalOp conditionals
    (42) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (43) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (44) condition -> . sendingVariable conditionOp sendingVariable
    (67) sendingVariable -> . variableType
    (68) sendingVariable -> . arithmetic
    (69) sendingVariable -> . variable
    (70) sendingVariable -> . functionCall
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 91
    NAME            shift and go to state 51
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    conditionals                   shift and go to state 141
    condition                      shift and go to state 93
    sendingVariable                shift and go to state 94
    variableType                   shift and go to state 40
    arithmetic                     shift and go to state 41
    variable                       shift and go to state 42
    functionCall                   shift and go to state 43
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    vectorVariable                 shift and go to state 52

state 126

    (39) whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTKEY         shift and go to state 142


state 127

    (63) parameters -> NAME . COMMA parameters
    (64) parameters -> NAME .

    COMMA           shift and go to state 143
    RIGHTPAR        reduce using rule 64 (parameters -> NAME .)


state 128

    (6) methodDefinition -> domain methodType NAME LEFTPAR parameters . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTPAR        shift and go to state 144


state 129

    (7) methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTKEY         shift and go to state 145


state 130

    (19) asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION . dataTypeAsignation
    (24) dataTypeAsignation -> . variable
    (25) dataTypeAsignation -> . variableType
    (26) dataTypeAsignation -> . arithmetic
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    NAME            shift and go to state 68
    LEFTPAR         shift and go to state 50
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    dataTypeAsignation             shift and go to state 146
    variable                       shift and go to state 70
    variableType                   shift and go to state 71
    arithmetic                     shift and go to state 72
    vectorVariable                 shift and go to state 52
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    functionCall                   shift and go to state 73

state 131

    (65) sendingVariables -> sendingVariable COMMA sendingVariables .

    RIGHTPAR        reduce using rule 65 (sendingVariables -> sendingVariable COMMA sendingVariables .)


state 132

    (23) declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION . dataTypeAsignation
    (24) dataTypeAsignation -> . variable
    (25) dataTypeAsignation -> . variableType
    (26) dataTypeAsignation -> . arithmetic
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    NAME            shift and go to state 68
    LEFTPAR         shift and go to state 50
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    dataTypeAsignation             shift and go to state 147
    variable                       shift and go to state 70
    variableType                   shift and go to state 71
    arithmetic                     shift and go to state 72
    vectorVariable                 shift and go to state 52
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    functionCall                   shift and go to state 73

state 133

    (89) arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic . RIGHTPAR
    (92) moreArithmetic -> arithmetic .

    RIGHTPAR        shift and go to state 148
    SUM             reduce using rule 92 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 92 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 92 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 92 (moreArithmetic -> arithmetic .)


state 134

    (73) vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .

    NEWLINE         reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    $end            reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    SUM             reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    SUBSTRACTION    reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    MULTIPLICATION  reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    DIVISION        reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    COMMA           reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    SEMICOLON       reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    EQUALS          reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    DIFFERENT       reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    LESSER          reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    GREATER         reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    LESSEREQUAL     reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    GREATEREQUAL    reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    AND             reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    OR              reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    INCREASE        reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)
    DECREASE        reduce using rule 73 (vectorVariable -> NAME LEFTBRACKET arithmetic RIGHTBRACKET .)


state 135

    (74) vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .

    NEWLINE         reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    $end            reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    SUM             reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    SUBSTRACTION    reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    MULTIPLICATION  reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    DIVISION        reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    COMMA           reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    SEMICOLON       reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    EQUALS          reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    DIFFERENT       reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    LESSER          reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    GREATER         reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    LESSEREQUAL     reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    GREATEREQUAL    reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    AND             reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    OR              reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    INCREASE        reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)
    DECREASE        reduce using rule 74 (vectorVariable -> NAME LEFTBRACKET INT RIGHTBRACKET .)


state 136

    (75) vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .

    NEWLINE         reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    $end            reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    SUM             reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    SUBSTRACTION    reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    MULTIPLICATION  reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    DIVISION        reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    COMMA           reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    SEMICOLON       reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    EQUALS          reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    DIFFERENT       reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    LESSER          reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    GREATER         reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    LESSEREQUAL     reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    GREATEREQUAL    reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    AND             reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    OR              reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    INCREASE        reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)
    DECREASE        reduce using rule 75 (vectorVariable -> NAME LEFTBRACKET variable RIGHTBRACKET .)


state 137

    (42) conditionals -> LEFTPAR conditionals RIGHTPAR . conditionalOp conditionals
    (43) conditionals -> LEFTPAR conditionals RIGHTPAR .
    (51) conditionalOp -> . AND
    (52) conditionalOp -> . OR

    RIGHTPAR        reduce using rule 43 (conditionals -> LEFTPAR conditionals RIGHTPAR .)
    SEMICOLON       reduce using rule 43 (conditionals -> LEFTPAR conditionals RIGHTPAR .)
    AND             shift and go to state 116
    OR              shift and go to state 117

    conditionalOp                  shift and go to state 149

state 138

    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY
    (36) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY ELSE ifCondition

    NEWLINE         shift and go to state 150


state 139

    (41) conditionals -> condition conditionalOp conditionals .

    RIGHTPAR        reduce using rule 41 (conditionals -> condition conditionalOp conditionals .)
    SEMICOLON       reduce using rule 41 (conditionals -> condition conditionalOp conditionals .)


state 140

    (44) condition -> sendingVariable conditionOp sendingVariable .

    AND             reduce using rule 44 (condition -> sendingVariable conditionOp sendingVariable .)
    OR              reduce using rule 44 (condition -> sendingVariable conditionOp sendingVariable .)
    RIGHTPAR        reduce using rule 44 (condition -> sendingVariable conditionOp sendingVariable .)
    SEMICOLON       reduce using rule 44 (condition -> sendingVariable conditionOp sendingVariable .)


state 141

    (38) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals . SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    SEMICOLON       shift and go to state 151


state 142

    (39) whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY

    NEWLINE         shift and go to state 152


state 143

    (63) parameters -> NAME COMMA . parameters
    (63) parameters -> . NAME COMMA parameters
    (64) parameters -> . NAME

    NAME            shift and go to state 127

    parameters                     shift and go to state 153

state 144

    (6) methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTKEY         shift and go to state 154


state 145

    (7) methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY

    NEWLINE         shift and go to state 155


state 146

    (19) asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation .

    NEWLINE         reduce using rule 19 (asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation .)
    $end            reduce using rule 19 (asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation .)


state 147

    (23) declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation .

    NEWLINE         reduce using rule 23 (declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation .)
    $end            reduce using rule 23 (declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation .)
    SEMICOLON       reduce using rule 23 (declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation .)


state 148

    (89) arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .

    NEWLINE         reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    $end            reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    SUM             reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    SUBSTRACTION    reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    MULTIPLICATION  reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    DIVISION        reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    COMMA           reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    RIGHTPAR        reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    SEMICOLON       reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    EQUALS          reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    DIFFERENT       reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    LESSER          reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    GREATER         reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    LESSEREQUAL     reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    GREATEREQUAL    reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    AND             reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    OR              reduce using rule 89 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)


state 149

    (42) conditionals -> LEFTPAR conditionals RIGHTPAR conditionalOp . conditionals
    (40) conditionals -> . condition
    (41) conditionals -> . condition conditionalOp conditionals
    (42) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (43) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (44) condition -> . sendingVariable conditionOp sendingVariable
    (67) sendingVariable -> . variableType
    (68) sendingVariable -> . arithmetic
    (69) sendingVariable -> . variable
    (70) sendingVariable -> . functionCall
    (79) variableType -> . numberType
    (80) variableType -> . stringType
    (81) variableType -> . booleanType
    (87) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (88) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (89) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (90) arithmetic -> . arithmeticOp arithmeticDataType
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (82) numberType -> . INT
    (83) numberType -> . DOUBLE
    (84) stringType -> . STRING
    (85) booleanType -> . FALSE
    (86) booleanType -> . TRUE
    (91) moreArithmetic -> . arithmeticDataType
    (92) moreArithmetic -> . arithmetic
    (96) arithmeticOp -> . SUM
    (97) arithmeticOp -> . SUBSTRACTION
    (98) arithmeticOp -> . MULTIPLICATION
    (99) arithmeticOp -> . DIVISION
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET
    (93) arithmeticDataType -> . numberType
    (94) arithmeticDataType -> . variable
    (95) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 91
    NAME            shift and go to state 51
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    FALSE           shift and go to state 56
    TRUE            shift and go to state 57
    SUM             shift and go to state 58
    SUBSTRACTION    shift and go to state 59
    MULTIPLICATION  shift and go to state 60
    DIVISION        shift and go to state 61

    conditionals                   shift and go to state 156
    condition                      shift and go to state 93
    sendingVariable                shift and go to state 94
    variableType                   shift and go to state 40
    arithmetic                     shift and go to state 41
    variable                       shift and go to state 42
    functionCall                   shift and go to state 43
    numberType                     shift and go to state 44
    stringType                     shift and go to state 45
    booleanType                    shift and go to state 46
    moreArithmetic                 shift and go to state 47
    arithmeticOp                   shift and go to state 48
    arithmeticDataType             shift and go to state 49
    vectorVariable                 shift and go to state 52

state 150

    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY
    (36) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY ELSE ifCondition
    (8) instructions -> . instruction NEWLINE instructions
    (9) instructions -> . empty
    (10) instruction -> . simple
    (11) instruction -> . complex
    (100) empty -> .
    (12) simple -> . asignation
    (13) simple -> . declaration
    (14) simple -> . read
    (15) simple -> . print
    (16) simple -> . functionCall
    (17) simple -> . return
    (32) complex -> . ifCondition
    (33) complex -> . forCondition
    (34) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (27) read -> . READ LEFTPAR NAME RIGHTPAR
    (28) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (31) return -> . RETURN sendingVariable
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
    (38) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (39) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTKEY        reduce using rule 100 (empty -> .)
    NAME            shift and go to state 6
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

    instructions                   shift and go to state 157
    ifCondition                    shift and go to state 17
    instruction                    shift and go to state 158
    empty                          shift and go to state 159
    simple                         shift and go to state 7
    complex                        shift and go to state 8
    asignation                     shift and go to state 11
    declaration                    shift and go to state 12
    read                           shift and go to state 13
    print                          shift and go to state 14
    functionCall                   shift and go to state 15
    return                         shift and go to state 16
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19

state 151

    (38) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON . incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (45) incdec -> . preIncdec
    (46) incdec -> . postIncdec
    (47) preIncdec -> . INCREASE variable
    (48) preIncdec -> . DECREASE variable
    (49) postIncdec -> . variable INCREASE
    (50) postIncdec -> . variable DECREASE
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET

    INCREASE        shift and go to state 163
    DECREASE        shift and go to state 165
    NAME            shift and go to state 166

    incdec                         shift and go to state 160
    preIncdec                      shift and go to state 161
    postIncdec                     shift and go to state 162
    variable                       shift and go to state 164
    vectorVariable                 shift and go to state 52

state 152

    (39) whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY
    (8) instructions -> . instruction NEWLINE instructions
    (9) instructions -> . empty
    (10) instruction -> . simple
    (11) instruction -> . complex
    (100) empty -> .
    (12) simple -> . asignation
    (13) simple -> . declaration
    (14) simple -> . read
    (15) simple -> . print
    (16) simple -> . functionCall
    (17) simple -> . return
    (32) complex -> . ifCondition
    (33) complex -> . forCondition
    (34) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (27) read -> . READ LEFTPAR NAME RIGHTPAR
    (28) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (31) return -> . RETURN sendingVariable
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
    (38) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (39) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTKEY        reduce using rule 100 (empty -> .)
    NAME            shift and go to state 6
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

    instructions                   shift and go to state 167
    instruction                    shift and go to state 158
    empty                          shift and go to state 159
    simple                         shift and go to state 7
    complex                        shift and go to state 8
    asignation                     shift and go to state 11
    declaration                    shift and go to state 12
    read                           shift and go to state 13
    print                          shift and go to state 14
    functionCall                   shift and go to state 15
    return                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19

state 153

    (63) parameters -> NAME COMMA parameters .

    RIGHTPAR        reduce using rule 63 (parameters -> NAME COMMA parameters .)


state 154

    (6) methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY

    NEWLINE         shift and go to state 168


state 155

    (7) methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY
    (8) instructions -> . instruction NEWLINE instructions
    (9) instructions -> . empty
    (10) instruction -> . simple
    (11) instruction -> . complex
    (100) empty -> .
    (12) simple -> . asignation
    (13) simple -> . declaration
    (14) simple -> . read
    (15) simple -> . print
    (16) simple -> . functionCall
    (17) simple -> . return
    (32) complex -> . ifCondition
    (33) complex -> . forCondition
    (34) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (27) read -> . READ LEFTPAR NAME RIGHTPAR
    (28) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (31) return -> . RETURN sendingVariable
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
    (38) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (39) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTKEY        reduce using rule 100 (empty -> .)
    NAME            shift and go to state 6
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

    instructions                   shift and go to state 169
    instruction                    shift and go to state 158
    empty                          shift and go to state 159
    simple                         shift and go to state 7
    complex                        shift and go to state 8
    asignation                     shift and go to state 11
    declaration                    shift and go to state 12
    read                           shift and go to state 13
    print                          shift and go to state 14
    functionCall                   shift and go to state 15
    return                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19

state 156

    (42) conditionals -> LEFTPAR conditionals RIGHTPAR conditionalOp conditionals .

    RIGHTPAR        reduce using rule 42 (conditionals -> LEFTPAR conditionals RIGHTPAR conditionalOp conditionals .)
    SEMICOLON       reduce using rule 42 (conditionals -> LEFTPAR conditionals RIGHTPAR conditionalOp conditionals .)


state 157

    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY
    (36) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY ELSE ifCondition

    RIGHTKEY        shift and go to state 170


state 158

    (8) instructions -> instruction . NEWLINE instructions

    NEWLINE         shift and go to state 171


state 159

    (9) instructions -> empty .

    RIGHTKEY        reduce using rule 9 (instructions -> empty .)


state 160

    (38) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTPAR        shift and go to state 172


state 161

    (45) incdec -> preIncdec .

    RIGHTPAR        reduce using rule 45 (incdec -> preIncdec .)


state 162

    (46) incdec -> postIncdec .

    RIGHTPAR        reduce using rule 46 (incdec -> postIncdec .)


state 163

    (47) preIncdec -> INCREASE . variable
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET

    NAME            shift and go to state 166

    variable                       shift and go to state 173
    vectorVariable                 shift and go to state 52

state 164

    (49) postIncdec -> variable . INCREASE
    (50) postIncdec -> variable . DECREASE

    INCREASE        shift and go to state 174
    DECREASE        shift and go to state 175


state 165

    (48) preIncdec -> DECREASE . variable
    (71) variable -> . NAME
    (72) variable -> . vectorVariable
    (73) vectorVariable -> . NAME LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> . NAME LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> . NAME LEFTBRACKET variable RIGHTBRACKET

    NAME            shift and go to state 166

    variable                       shift and go to state 176
    vectorVariable                 shift and go to state 52

state 166

    (71) variable -> NAME .
    (73) vectorVariable -> NAME . LEFTBRACKET arithmetic RIGHTBRACKET
    (74) vectorVariable -> NAME . LEFTBRACKET INT RIGHTBRACKET
    (75) vectorVariable -> NAME . LEFTBRACKET variable RIGHTBRACKET

    INCREASE        reduce using rule 71 (variable -> NAME .)
    DECREASE        reduce using rule 71 (variable -> NAME .)
    RIGHTPAR        reduce using rule 71 (variable -> NAME .)
    LEFTBRACKET     shift and go to state 90


state 167

    (39) whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY

    RIGHTKEY        shift and go to state 177


state 168

    (6) methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY
    (8) instructions -> . instruction NEWLINE instructions
    (9) instructions -> . empty
    (10) instruction -> . simple
    (11) instruction -> . complex
    (100) empty -> .
    (12) simple -> . asignation
    (13) simple -> . declaration
    (14) simple -> . read
    (15) simple -> . print
    (16) simple -> . functionCall
    (17) simple -> . return
    (32) complex -> . ifCondition
    (33) complex -> . forCondition
    (34) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (27) read -> . READ LEFTPAR NAME RIGHTPAR
    (28) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (31) return -> . RETURN sendingVariable
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
    (38) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (39) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTKEY        reduce using rule 100 (empty -> .)
    NAME            shift and go to state 6
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

    instructions                   shift and go to state 178
    instruction                    shift and go to state 158
    empty                          shift and go to state 159
    simple                         shift and go to state 7
    complex                        shift and go to state 8
    asignation                     shift and go to state 11
    declaration                    shift and go to state 12
    read                           shift and go to state 13
    print                          shift and go to state 14
    functionCall                   shift and go to state 15
    return                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19

state 169

    (7) methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY

    RIGHTKEY        shift and go to state 179


state 170

    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .
    (36) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY . ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY . ELSE ifCondition

    NEWLINE         reduce using rule 35 (ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 35 (ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    ELSE            shift and go to state 180


state 171

    (8) instructions -> instruction NEWLINE . instructions
    (8) instructions -> . instruction NEWLINE instructions
    (9) instructions -> . empty
    (10) instruction -> . simple
    (11) instruction -> . complex
    (100) empty -> .
    (12) simple -> . asignation
    (13) simple -> . declaration
    (14) simple -> . read
    (15) simple -> . print
    (16) simple -> . functionCall
    (17) simple -> . return
    (32) complex -> . ifCondition
    (33) complex -> . forCondition
    (34) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (27) read -> . READ LEFTPAR NAME RIGHTPAR
    (28) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (31) return -> . RETURN sendingVariable
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
    (38) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (39) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTKEY        reduce using rule 100 (empty -> .)
    NAME            shift and go to state 6
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

    instruction                    shift and go to state 158
    instructions                   shift and go to state 181
    empty                          shift and go to state 159
    simple                         shift and go to state 7
    complex                        shift and go to state 8
    asignation                     shift and go to state 11
    declaration                    shift and go to state 12
    read                           shift and go to state 13
    print                          shift and go to state 14
    functionCall                   shift and go to state 15
    return                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19

state 172

    (38) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTKEY         shift and go to state 182


state 173

    (47) preIncdec -> INCREASE variable .

    RIGHTPAR        reduce using rule 47 (preIncdec -> INCREASE variable .)


state 174

    (49) postIncdec -> variable INCREASE .

    RIGHTPAR        reduce using rule 49 (postIncdec -> variable INCREASE .)


state 175

    (50) postIncdec -> variable DECREASE .

    RIGHTPAR        reduce using rule 50 (postIncdec -> variable DECREASE .)


state 176

    (48) preIncdec -> DECREASE variable .

    RIGHTPAR        reduce using rule 48 (preIncdec -> DECREASE variable .)


state 177

    (39) whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .

    NEWLINE         reduce using rule 39 (whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 39 (whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)


state 178

    (6) methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY

    RIGHTKEY        shift and go to state 183


state 179

    (7) methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .

    NEWLINE         reduce using rule 7 (methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 7 (methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)


state 180

    (36) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE . LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE . ifCondition
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition

    LEFTKEY         shift and go to state 184
    IF              shift and go to state 24

    ifCondition                    shift and go to state 185

state 181

    (8) instructions -> instruction NEWLINE instructions .

    RIGHTKEY        reduce using rule 8 (instructions -> instruction NEWLINE instructions .)


state 182

    (38) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY

    NEWLINE         shift and go to state 186


state 183

    (6) methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .

    NEWLINE         reduce using rule 6 (methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 6 (methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)


state 184

    (36) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY . NEWLINE instructions RIGHTKEY

    NEWLINE         shift and go to state 187


state 185

    (37) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition .

    NEWLINE         reduce using rule 37 (ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition .)
    $end            reduce using rule 37 (ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition .)


state 186

    (38) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY
    (8) instructions -> . instruction NEWLINE instructions
    (9) instructions -> . empty
    (10) instruction -> . simple
    (11) instruction -> . complex
    (100) empty -> .
    (12) simple -> . asignation
    (13) simple -> . declaration
    (14) simple -> . read
    (15) simple -> . print
    (16) simple -> . functionCall
    (17) simple -> . return
    (32) complex -> . ifCondition
    (33) complex -> . forCondition
    (34) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (27) read -> . READ LEFTPAR NAME RIGHTPAR
    (28) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (31) return -> . RETURN sendingVariable
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
    (38) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (39) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTKEY        reduce using rule 100 (empty -> .)
    NAME            shift and go to state 6
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

    declaration                    shift and go to state 12
    instructions                   shift and go to state 188
    instruction                    shift and go to state 158
    empty                          shift and go to state 159
    simple                         shift and go to state 7
    complex                        shift and go to state 8
    asignation                     shift and go to state 11
    read                           shift and go to state 13
    print                          shift and go to state 14
    functionCall                   shift and go to state 15
    return                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19

state 187

    (36) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE . instructions RIGHTKEY
    (8) instructions -> . instruction NEWLINE instructions
    (9) instructions -> . empty
    (10) instruction -> . simple
    (11) instruction -> . complex
    (100) empty -> .
    (12) simple -> . asignation
    (13) simple -> . declaration
    (14) simple -> . read
    (15) simple -> . print
    (16) simple -> . functionCall
    (17) simple -> . return
    (32) complex -> . ifCondition
    (33) complex -> . forCondition
    (34) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (23) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (27) read -> . READ LEFTPAR NAME RIGHTPAR
    (28) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (30) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (31) return -> . RETURN sendingVariable
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (36) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (37) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE ifCondition
    (38) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (39) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTKEY        reduce using rule 100 (empty -> .)
    NAME            shift and go to state 6
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    WHILE           shift and go to state 26

    instructions                   shift and go to state 189
    instruction                    shift and go to state 158
    empty                          shift and go to state 159
    simple                         shift and go to state 7
    complex                        shift and go to state 8
    asignation                     shift and go to state 11
    declaration                    shift and go to state 12
    read                           shift and go to state 13
    print                          shift and go to state 14
    functionCall                   shift and go to state 15
    return                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19

state 188

    (38) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY

    RIGHTKEY        shift and go to state 190


state 189

    (36) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions . RIGHTKEY

    RIGHTKEY        shift and go to state 191


state 190

    (38) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .

    NEWLINE         reduce using rule 38 (forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 38 (forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)


state 191

    (36) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY .

    NEWLINE         reduce using rule 36 (ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 36 (ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY .)

