Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    COMENTARIO
    IMPORT
    SWITCH

Grammar

Rule 0     S' -> Niark
Rule 1     Niark -> definicion_funcion instrucciones Niark NEWLINE
Rule 2     Niark -> vacio
Rule 3     indentacion -> TABULACION indentacion
Rule 4     indentacion -> vacio
Rule 5     definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ
Rule 6     dominio -> PRIVATE
Rule 7     dominio -> PUBLIC
Rule 8     tipo_return -> VOID
Rule 9     tipo_return -> FUNCTION
Rule 10    parametro -> vacio
Rule 11    parametro -> NOMBRE parametro_extra
Rule 12    parametro_extra -> COMA NOMBRE parametro_extra
Rule 13    parametro_extra -> vacio
Rule 14    llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER
Rule 15    parametro_llamado -> vacio
Rule 16    parametro_llamado -> tipo_variable parametro_llamado_extra
Rule 17    parametro_llamado_extra -> COMA NOMBRE parametro_llamado_extra
Rule 18    parametro_llamado_extra -> vacio
Rule 19    instruccion -> condicion_if NEWLINE
Rule 20    instruccion -> condicion_else NEWLINE
Rule 21    instruccion -> ciclo_for NEWLINE
Rule 22    instruccion -> ciclo_while NEWLINE
Rule 23    instruccion -> imprimir NEWLINE
Rule 24    instruccion -> leer NEWLINE
Rule 25    instruccion -> incdec NEWLINE
Rule 26    instruccion -> dec_variable NEWLINE
Rule 27    instruccion -> dec_vector NEWLINE
Rule 28    instruccion -> asigna NEWLINE
Rule 29    instruccion -> asignacion_vector NEWLINE
Rule 30    instruccion -> llamado_funcion NEWLINE
Rule 31    instruccion -> retorno NEWLINE
Rule 32    instruccion -> LLAVEDER NEWLINE
Rule 33    instrucciones -> instruccion concat_instruccion
Rule 34    instrucciones -> vacio
Rule 35    concat_instruccion -> instruccion concat_instruccion
Rule 36    concat_instruccion -> vacio
Rule 37    condicion_if -> IF PARIZQ condicion PARDER LLAVEIZQ
Rule 38    condicion_else -> ELSE LLAVEIZQ
Rule 39    condicion_else -> ELSE condicion_if
Rule 40    ciclo_for -> FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER LLAVEIZQ
Rule 41    incdec -> pre_incdec
Rule 42    incdec -> post_incdec
Rule 43    pre_incdec -> INCREMENTAR NOMBRE
Rule 44    pre_incdec -> DECREMENTAR NOMBRE
Rule 45    post_incdec -> NOMBRE INCREMENTAR
Rule 46    post_incdec -> NOMBRE DECREMENTAR
Rule 47    ciclo_while -> WHILE PARIZQ condicion PARDER LLAVEIZQ
Rule 48    imprimir -> PRINT PARIZQ tipo_variable PARDER
Rule 49    leer -> READ PARIZQ NOMBRE PARDER
Rule 50    dec_variable -> DECVARIABLE ASIGNACION op_aritmetica
Rule 51    dec_variable -> DECVARIABLE ASIGNACION tipo_variable
Rule 52    dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
Rule 53    dec_vector -> DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
Rule 54    dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable
Rule 55    dec_vector -> DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable
Rule 56    asigna -> NOMBRE ASIGNACION op_aritmetica
Rule 57    asigna -> NOMBRE ASIGNACION tipo_variable
Rule 58    asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
Rule 59    asignacion_vector -> NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
Rule 60    asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable
Rule 61    asignacion_vector -> NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable
Rule 62    retorno -> RETURN tipo_variable
Rule 63    retorno -> RETURN op_aritmetica
Rule 64    operador_condicional -> DIFERENTE
Rule 65    operador_condicional -> IGUAL
Rule 66    operador_condicional -> MAYOR
Rule 67    operador_condicional -> MAYORIGUAL
Rule 68    operador_condicional -> MENOR
Rule 69    operador_condicional -> MENORIGUAL
Rule 70    condicion -> tipo_variable operador_condicional tipo_variable condicion_extra
Rule 71    condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra
Rule 72    condicion_extra -> vacio
Rule 73    tipo_variable -> NOMBRE
Rule 74    tipo_variable -> DOUBLE
Rule 75    tipo_variable -> INT
Rule 76    tipo_variable -> STRING
Rule 77    tipo_variable -> FALSE
Rule 78    tipo_variable -> TRUE
Rule 79    tipo_variable -> llamado_funcion
Rule 80    op_aritmetica -> tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
Rule 81    op_aritmetica_extra -> operador_aritmetico tipo_variable op_aritmetica_extra
Rule 82    op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER
Rule 83    op_aritmetica_extra -> vacio
Rule 84    operador_aritmetico -> SUMA
Rule 85    operador_aritmetico -> RESTA
Rule 86    operador_aritmetico -> MULT
Rule 87    operador_aritmetico -> DIV
Rule 88    operador_logico -> AND
Rule 89    operador_logico -> OR
Rule 90    vacio -> <empty>

Terminals, with rules where they appear

AND                  : 88
ASIGNACION           : 40 50 51 52 53 54 55 56 57 58 59 60 61
BREAK                : 
CASE                 : 
COMA                 : 12 17
COMENTARIO           : 
CORCHETEDER          : 52 53 54 55 58 59 60 61
CORCHETEIZQ          : 52 53 54 55 58 59 60 61
DECREMENTAR          : 44 46
DECVARIABLE          : 40 50 51 52 53 54 55
DIFERENTE            : 64
DIV                  : 87
DOUBLE               : 74
ELSE                 : 38 39
FALSE                : 77
FOR                  : 40
FUNCTION             : 9
IF                   : 37
IGUAL                : 65
IMPORT               : 
INCREMENTAR          : 43 45
INT                  : 40 53 55 59 61 75
LLAVEDER             : 32
LLAVEIZQ             : 5 37 38 40 47
MAYOR                : 66
MAYORIGUAL           : 67
MENOR                : 68
MENORIGUAL           : 69
MULT                 : 86
NEWLINE              : 1 19 20 21 22 23 24 25 26 27 28 29 30 31 32
NOMBRE               : 5 11 12 14 17 43 44 45 46 49 52 54 56 57 58 58 59 60 60 61 73
OR                   : 89
PARDER               : 5 14 37 40 47 48 49 82
PARIZQ               : 5 14 37 40 47 48 49 82
PRINT                : 48
PRIVATE              : 6
PUBLIC               : 7
PUNTOYCOMA           : 40 40
READ                 : 49
RESTA                : 85
RETURN               : 62 63
STRING               : 76
SUMA                 : 84
SWITCH               : 
TABULACION           : 3
TRUE                 : 78
VOID                 : 8
WHILE                : 47
error                : 

Nonterminals, with rules where they appear

Niark                : 1 0
asigna               : 28
asignacion_vector    : 29
ciclo_for            : 21
ciclo_while          : 22
concat_instruccion   : 33 35
condicion            : 37 40 47
condicion_else       : 20
condicion_extra      : 70 71
condicion_if         : 19 39
dec_variable         : 26
dec_vector           : 27
definicion_funcion   : 1
dominio              : 5
imprimir             : 23
incdec               : 25 40
indentacion          : 3
instruccion          : 33 35
instrucciones        : 1
leer                 : 24
llamado_funcion      : 30 79
op_aritmetica        : 50 52 53 56 58 59 63
op_aritmetica_extra  : 80 81 82
operador_aritmetico  : 80 81 82
operador_condicional : 70 71
operador_logico      : 71
parametro            : 5
parametro_extra      : 11 12
parametro_llamado    : 14
parametro_llamado_extra : 16 17
post_incdec          : 42
pre_incdec           : 41
retorno              : 31
tipo_return          : 5
tipo_variable        : 16 48 51 54 55 57 60 61 62 70 70 71 71 80 80 81 82
vacio                : 2 4 10 13 15 18 34 36 72 83

Parsing method: LALR

state 0

    (0) S' -> . Niark
    (1) Niark -> . definicion_funcion instrucciones Niark NEWLINE
    (2) Niark -> . vacio
    (5) definicion_funcion -> . dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ
    (90) vacio -> .
    (6) dominio -> . PRIVATE
    (7) dominio -> . PUBLIC

    $end            reduce using rule 90 (vacio -> .)
    PRIVATE         shift and go to state 5
    PUBLIC          shift and go to state 6

    Niark                          shift and go to state 1
    definicion_funcion             shift and go to state 2
    vacio                          shift and go to state 3
    dominio                        shift and go to state 4

state 1

    (0) S' -> Niark .



state 2

    (1) Niark -> definicion_funcion . instrucciones Niark NEWLINE
    (33) instrucciones -> . instruccion concat_instruccion
    (34) instrucciones -> . vacio
    (19) instruccion -> . condicion_if NEWLINE
    (20) instruccion -> . condicion_else NEWLINE
    (21) instruccion -> . ciclo_for NEWLINE
    (22) instruccion -> . ciclo_while NEWLINE
    (23) instruccion -> . imprimir NEWLINE
    (24) instruccion -> . leer NEWLINE
    (25) instruccion -> . incdec NEWLINE
    (26) instruccion -> . dec_variable NEWLINE
    (27) instruccion -> . dec_vector NEWLINE
    (28) instruccion -> . asigna NEWLINE
    (29) instruccion -> . asignacion_vector NEWLINE
    (30) instruccion -> . llamado_funcion NEWLINE
    (31) instruccion -> . retorno NEWLINE
    (32) instruccion -> . LLAVEDER NEWLINE
    (90) vacio -> .
    (37) condicion_if -> . IF PARIZQ condicion PARDER LLAVEIZQ
    (38) condicion_else -> . ELSE LLAVEIZQ
    (39) condicion_else -> . ELSE condicion_if
    (40) ciclo_for -> . FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER LLAVEIZQ
    (47) ciclo_while -> . WHILE PARIZQ condicion PARDER LLAVEIZQ
    (48) imprimir -> . PRINT PARIZQ tipo_variable PARDER
    (49) leer -> . READ PARIZQ NOMBRE PARDER
    (41) incdec -> . pre_incdec
    (42) incdec -> . post_incdec
    (50) dec_variable -> . DECVARIABLE ASIGNACION op_aritmetica
    (51) dec_variable -> . DECVARIABLE ASIGNACION tipo_variable
    (52) dec_vector -> . DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (53) dec_vector -> . DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
    (54) dec_vector -> . DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable
    (55) dec_vector -> . DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable
    (56) asigna -> . NOMBRE ASIGNACION op_aritmetica
    (57) asigna -> . NOMBRE ASIGNACION tipo_variable
    (58) asignacion_vector -> . NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (59) asignacion_vector -> . NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
    (60) asignacion_vector -> . NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable
    (61) asignacion_vector -> . NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER
    (62) retorno -> . RETURN tipo_variable
    (63) retorno -> . RETURN op_aritmetica
    (43) pre_incdec -> . INCREMENTAR NOMBRE
    (44) pre_incdec -> . DECREMENTAR NOMBRE
    (45) post_incdec -> . NOMBRE INCREMENTAR
    (46) post_incdec -> . NOMBRE DECREMENTAR

    LLAVEDER        shift and go to state 23
    PRIVATE         reduce using rule 90 (vacio -> .)
    PUBLIC          reduce using rule 90 (vacio -> .)
    NEWLINE         reduce using rule 90 (vacio -> .)
    IF              shift and go to state 24
    ELSE            shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 28
    PRINT           shift and go to state 29
    READ            shift and go to state 30
    DECVARIABLE     shift and go to state 27
    NOMBRE          shift and go to state 31
    RETURN          shift and go to state 34
    INCREMENTAR     shift and go to state 35
    DECREMENTAR     shift and go to state 36

    instrucciones                  shift and go to state 7
    instruccion                    shift and go to state 8
    vacio                          shift and go to state 9
    condicion_if                   shift and go to state 10
    condicion_else                 shift and go to state 11
    ciclo_for                      shift and go to state 12
    ciclo_while                    shift and go to state 13
    imprimir                       shift and go to state 14
    leer                           shift and go to state 15
    incdec                         shift and go to state 16
    dec_variable                   shift and go to state 17
    dec_vector                     shift and go to state 18
    asigna                         shift and go to state 19
    asignacion_vector              shift and go to state 20
    llamado_funcion                shift and go to state 21
    retorno                        shift and go to state 22
    pre_incdec                     shift and go to state 32
    post_incdec                    shift and go to state 33

state 3

    (2) Niark -> vacio .

    $end            reduce using rule 2 (Niark -> vacio .)
    NEWLINE         reduce using rule 2 (Niark -> vacio .)


state 4

    (5) definicion_funcion -> dominio . tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ
    (8) tipo_return -> . VOID
    (9) tipo_return -> . FUNCTION

    VOID            shift and go to state 38
    FUNCTION        shift and go to state 39

    tipo_return                    shift and go to state 37

state 5

    (6) dominio -> PRIVATE .

    VOID            reduce using rule 6 (dominio -> PRIVATE .)
    FUNCTION        reduce using rule 6 (dominio -> PRIVATE .)


state 6

    (7) dominio -> PUBLIC .

    VOID            reduce using rule 7 (dominio -> PUBLIC .)
    FUNCTION        reduce using rule 7 (dominio -> PUBLIC .)


state 7

    (1) Niark -> definicion_funcion instrucciones . Niark NEWLINE
    (1) Niark -> . definicion_funcion instrucciones Niark NEWLINE
    (2) Niark -> . vacio
    (5) definicion_funcion -> . dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ
    (90) vacio -> .
    (6) dominio -> . PRIVATE
    (7) dominio -> . PUBLIC

    NEWLINE         reduce using rule 90 (vacio -> .)
    PRIVATE         shift and go to state 5
    PUBLIC          shift and go to state 6

    definicion_funcion             shift and go to state 2
    Niark                          shift and go to state 40
    vacio                          shift and go to state 3
    dominio                        shift and go to state 4

state 8

    (33) instrucciones -> instruccion . concat_instruccion
    (35) concat_instruccion -> . instruccion concat_instruccion
    (36) concat_instruccion -> . vacio
    (19) instruccion -> . condicion_if NEWLINE
    (20) instruccion -> . condicion_else NEWLINE
    (21) instruccion -> . ciclo_for NEWLINE
    (22) instruccion -> . ciclo_while NEWLINE
    (23) instruccion -> . imprimir NEWLINE
    (24) instruccion -> . leer NEWLINE
    (25) instruccion -> . incdec NEWLINE
    (26) instruccion -> . dec_variable NEWLINE
    (27) instruccion -> . dec_vector NEWLINE
    (28) instruccion -> . asigna NEWLINE
    (29) instruccion -> . asignacion_vector NEWLINE
    (30) instruccion -> . llamado_funcion NEWLINE
    (31) instruccion -> . retorno NEWLINE
    (32) instruccion -> . LLAVEDER NEWLINE
    (90) vacio -> .
    (37) condicion_if -> . IF PARIZQ condicion PARDER LLAVEIZQ
    (38) condicion_else -> . ELSE LLAVEIZQ
    (39) condicion_else -> . ELSE condicion_if
    (40) ciclo_for -> . FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER LLAVEIZQ
    (47) ciclo_while -> . WHILE PARIZQ condicion PARDER LLAVEIZQ
    (48) imprimir -> . PRINT PARIZQ tipo_variable PARDER
    (49) leer -> . READ PARIZQ NOMBRE PARDER
    (41) incdec -> . pre_incdec
    (42) incdec -> . post_incdec
    (50) dec_variable -> . DECVARIABLE ASIGNACION op_aritmetica
    (51) dec_variable -> . DECVARIABLE ASIGNACION tipo_variable
    (52) dec_vector -> . DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (53) dec_vector -> . DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
    (54) dec_vector -> . DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable
    (55) dec_vector -> . DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable
    (56) asigna -> . NOMBRE ASIGNACION op_aritmetica
    (57) asigna -> . NOMBRE ASIGNACION tipo_variable
    (58) asignacion_vector -> . NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (59) asignacion_vector -> . NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
    (60) asignacion_vector -> . NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable
    (61) asignacion_vector -> . NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER
    (62) retorno -> . RETURN tipo_variable
    (63) retorno -> . RETURN op_aritmetica
    (43) pre_incdec -> . INCREMENTAR NOMBRE
    (44) pre_incdec -> . DECREMENTAR NOMBRE
    (45) post_incdec -> . NOMBRE INCREMENTAR
    (46) post_incdec -> . NOMBRE DECREMENTAR

    LLAVEDER        shift and go to state 23
    PRIVATE         reduce using rule 90 (vacio -> .)
    PUBLIC          reduce using rule 90 (vacio -> .)
    NEWLINE         reduce using rule 90 (vacio -> .)
    IF              shift and go to state 24
    ELSE            shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 28
    PRINT           shift and go to state 29
    READ            shift and go to state 30
    DECVARIABLE     shift and go to state 27
    NOMBRE          shift and go to state 31
    RETURN          shift and go to state 34
    INCREMENTAR     shift and go to state 35
    DECREMENTAR     shift and go to state 36

    instruccion                    shift and go to state 41
    concat_instruccion             shift and go to state 42
    vacio                          shift and go to state 43
    condicion_if                   shift and go to state 10
    condicion_else                 shift and go to state 11
    ciclo_for                      shift and go to state 12
    ciclo_while                    shift and go to state 13
    imprimir                       shift and go to state 14
    leer                           shift and go to state 15
    incdec                         shift and go to state 16
    dec_variable                   shift and go to state 17
    dec_vector                     shift and go to state 18
    asigna                         shift and go to state 19
    asignacion_vector              shift and go to state 20
    llamado_funcion                shift and go to state 21
    retorno                        shift and go to state 22
    pre_incdec                     shift and go to state 32
    post_incdec                    shift and go to state 33

state 9

    (34) instrucciones -> vacio .

    PRIVATE         reduce using rule 34 (instrucciones -> vacio .)
    PUBLIC          reduce using rule 34 (instrucciones -> vacio .)
    NEWLINE         reduce using rule 34 (instrucciones -> vacio .)


state 10

    (19) instruccion -> condicion_if . NEWLINE

    NEWLINE         shift and go to state 44


state 11

    (20) instruccion -> condicion_else . NEWLINE

    NEWLINE         shift and go to state 45


state 12

    (21) instruccion -> ciclo_for . NEWLINE

    NEWLINE         shift and go to state 46


state 13

    (22) instruccion -> ciclo_while . NEWLINE

    NEWLINE         shift and go to state 47


state 14

    (23) instruccion -> imprimir . NEWLINE

    NEWLINE         shift and go to state 48


state 15

    (24) instruccion -> leer . NEWLINE

    NEWLINE         shift and go to state 49


state 16

    (25) instruccion -> incdec . NEWLINE

    NEWLINE         shift and go to state 50


state 17

    (26) instruccion -> dec_variable . NEWLINE

    NEWLINE         shift and go to state 51


state 18

    (27) instruccion -> dec_vector . NEWLINE

    NEWLINE         shift and go to state 52


state 19

    (28) instruccion -> asigna . NEWLINE

    NEWLINE         shift and go to state 53


state 20

    (29) instruccion -> asignacion_vector . NEWLINE

    NEWLINE         shift and go to state 54


state 21

    (30) instruccion -> llamado_funcion . NEWLINE

    NEWLINE         shift and go to state 55


state 22

    (31) instruccion -> retorno . NEWLINE

    NEWLINE         shift and go to state 56


state 23

    (32) instruccion -> LLAVEDER . NEWLINE

    NEWLINE         shift and go to state 57


state 24

    (37) condicion_if -> IF . PARIZQ condicion PARDER LLAVEIZQ

    PARIZQ          shift and go to state 58


state 25

    (38) condicion_else -> ELSE . LLAVEIZQ
    (39) condicion_else -> ELSE . condicion_if
    (37) condicion_if -> . IF PARIZQ condicion PARDER LLAVEIZQ

    LLAVEIZQ        shift and go to state 59
    IF              shift and go to state 24

    condicion_if                   shift and go to state 60

state 26

    (40) ciclo_for -> FOR . PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER LLAVEIZQ

    PARIZQ          shift and go to state 61


state 27

    (50) dec_variable -> DECVARIABLE . ASIGNACION op_aritmetica
    (51) dec_variable -> DECVARIABLE . ASIGNACION tipo_variable
    (52) dec_vector -> DECVARIABLE . CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (53) dec_vector -> DECVARIABLE . CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
    (54) dec_vector -> DECVARIABLE . CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable
    (55) dec_vector -> DECVARIABLE . CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable

    ASIGNACION      shift and go to state 62
    CORCHETEIZQ     shift and go to state 63


state 28

    (47) ciclo_while -> WHILE . PARIZQ condicion PARDER LLAVEIZQ

    PARIZQ          shift and go to state 64


state 29

    (48) imprimir -> PRINT . PARIZQ tipo_variable PARDER

    PARIZQ          shift and go to state 65


state 30

    (49) leer -> READ . PARIZQ NOMBRE PARDER

    PARIZQ          shift and go to state 66


state 31

    (56) asigna -> NOMBRE . ASIGNACION op_aritmetica
    (57) asigna -> NOMBRE . ASIGNACION tipo_variable
    (58) asignacion_vector -> NOMBRE . CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (59) asignacion_vector -> NOMBRE . CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
    (60) asignacion_vector -> NOMBRE . CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable
    (61) asignacion_vector -> NOMBRE . CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable
    (14) llamado_funcion -> NOMBRE . PARIZQ parametro_llamado PARDER
    (45) post_incdec -> NOMBRE . INCREMENTAR
    (46) post_incdec -> NOMBRE . DECREMENTAR

    ASIGNACION      shift and go to state 67
    CORCHETEIZQ     shift and go to state 68
    PARIZQ          shift and go to state 69
    INCREMENTAR     shift and go to state 70
    DECREMENTAR     shift and go to state 71


state 32

    (41) incdec -> pre_incdec .

    NEWLINE         reduce using rule 41 (incdec -> pre_incdec .)
    PARDER          reduce using rule 41 (incdec -> pre_incdec .)


state 33

    (42) incdec -> post_incdec .

    NEWLINE         reduce using rule 42 (incdec -> post_incdec .)
    PARDER          reduce using rule 42 (incdec -> post_incdec .)


state 34

    (62) retorno -> RETURN . tipo_variable
    (63) retorno -> RETURN . op_aritmetica
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (80) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    tipo_variable                  shift and go to state 72
    op_aritmetica                  shift and go to state 73
    llamado_funcion                shift and go to state 80

state 35

    (43) pre_incdec -> INCREMENTAR . NOMBRE

    NOMBRE          shift and go to state 81


state 36

    (44) pre_incdec -> DECREMENTAR . NOMBRE

    NOMBRE          shift and go to state 82


state 37

    (5) definicion_funcion -> dominio tipo_return . NOMBRE PARIZQ parametro PARDER LLAVEIZQ

    NOMBRE          shift and go to state 83


state 38

    (8) tipo_return -> VOID .

    NOMBRE          reduce using rule 8 (tipo_return -> VOID .)


state 39

    (9) tipo_return -> FUNCTION .

    NOMBRE          reduce using rule 9 (tipo_return -> FUNCTION .)


state 40

    (1) Niark -> definicion_funcion instrucciones Niark . NEWLINE

    NEWLINE         shift and go to state 84


state 41

    (35) concat_instruccion -> instruccion . concat_instruccion
    (35) concat_instruccion -> . instruccion concat_instruccion
    (36) concat_instruccion -> . vacio
    (19) instruccion -> . condicion_if NEWLINE
    (20) instruccion -> . condicion_else NEWLINE
    (21) instruccion -> . ciclo_for NEWLINE
    (22) instruccion -> . ciclo_while NEWLINE
    (23) instruccion -> . imprimir NEWLINE
    (24) instruccion -> . leer NEWLINE
    (25) instruccion -> . incdec NEWLINE
    (26) instruccion -> . dec_variable NEWLINE
    (27) instruccion -> . dec_vector NEWLINE
    (28) instruccion -> . asigna NEWLINE
    (29) instruccion -> . asignacion_vector NEWLINE
    (30) instruccion -> . llamado_funcion NEWLINE
    (31) instruccion -> . retorno NEWLINE
    (32) instruccion -> . LLAVEDER NEWLINE
    (90) vacio -> .
    (37) condicion_if -> . IF PARIZQ condicion PARDER LLAVEIZQ
    (38) condicion_else -> . ELSE LLAVEIZQ
    (39) condicion_else -> . ELSE condicion_if
    (40) ciclo_for -> . FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER LLAVEIZQ
    (47) ciclo_while -> . WHILE PARIZQ condicion PARDER LLAVEIZQ
    (48) imprimir -> . PRINT PARIZQ tipo_variable PARDER
    (49) leer -> . READ PARIZQ NOMBRE PARDER
    (41) incdec -> . pre_incdec
    (42) incdec -> . post_incdec
    (50) dec_variable -> . DECVARIABLE ASIGNACION op_aritmetica
    (51) dec_variable -> . DECVARIABLE ASIGNACION tipo_variable
    (52) dec_vector -> . DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (53) dec_vector -> . DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
    (54) dec_vector -> . DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable
    (55) dec_vector -> . DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable
    (56) asigna -> . NOMBRE ASIGNACION op_aritmetica
    (57) asigna -> . NOMBRE ASIGNACION tipo_variable
    (58) asignacion_vector -> . NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (59) asignacion_vector -> . NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
    (60) asignacion_vector -> . NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable
    (61) asignacion_vector -> . NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER
    (62) retorno -> . RETURN tipo_variable
    (63) retorno -> . RETURN op_aritmetica
    (43) pre_incdec -> . INCREMENTAR NOMBRE
    (44) pre_incdec -> . DECREMENTAR NOMBRE
    (45) post_incdec -> . NOMBRE INCREMENTAR
    (46) post_incdec -> . NOMBRE DECREMENTAR

    LLAVEDER        shift and go to state 23
    PRIVATE         reduce using rule 90 (vacio -> .)
    PUBLIC          reduce using rule 90 (vacio -> .)
    NEWLINE         reduce using rule 90 (vacio -> .)
    IF              shift and go to state 24
    ELSE            shift and go to state 25
    FOR             shift and go to state 26
    WHILE           shift and go to state 28
    PRINT           shift and go to state 29
    READ            shift and go to state 30
    DECVARIABLE     shift and go to state 27
    NOMBRE          shift and go to state 31
    RETURN          shift and go to state 34
    INCREMENTAR     shift and go to state 35
    DECREMENTAR     shift and go to state 36

    instruccion                    shift and go to state 41
    concat_instruccion             shift and go to state 85
    vacio                          shift and go to state 43
    condicion_if                   shift and go to state 10
    condicion_else                 shift and go to state 11
    ciclo_for                      shift and go to state 12
    ciclo_while                    shift and go to state 13
    imprimir                       shift and go to state 14
    leer                           shift and go to state 15
    incdec                         shift and go to state 16
    dec_variable                   shift and go to state 17
    dec_vector                     shift and go to state 18
    asigna                         shift and go to state 19
    asignacion_vector              shift and go to state 20
    llamado_funcion                shift and go to state 21
    retorno                        shift and go to state 22
    pre_incdec                     shift and go to state 32
    post_incdec                    shift and go to state 33

state 42

    (33) instrucciones -> instruccion concat_instruccion .

    PRIVATE         reduce using rule 33 (instrucciones -> instruccion concat_instruccion .)
    PUBLIC          reduce using rule 33 (instrucciones -> instruccion concat_instruccion .)
    NEWLINE         reduce using rule 33 (instrucciones -> instruccion concat_instruccion .)


state 43

    (36) concat_instruccion -> vacio .

    PRIVATE         reduce using rule 36 (concat_instruccion -> vacio .)
    PUBLIC          reduce using rule 36 (concat_instruccion -> vacio .)
    NEWLINE         reduce using rule 36 (concat_instruccion -> vacio .)


state 44

    (19) instruccion -> condicion_if NEWLINE .

    LLAVEDER        reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    IF              reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    ELSE            reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    FOR             reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    WHILE           reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    PRINT           reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    READ            reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    DECVARIABLE     reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    NOMBRE          reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    RETURN          reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    INCREMENTAR     reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    DECREMENTAR     reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    PRIVATE         reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    PUBLIC          reduce using rule 19 (instruccion -> condicion_if NEWLINE .)
    NEWLINE         reduce using rule 19 (instruccion -> condicion_if NEWLINE .)


state 45

    (20) instruccion -> condicion_else NEWLINE .

    LLAVEDER        reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    IF              reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    ELSE            reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    FOR             reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    WHILE           reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    PRINT           reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    READ            reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    DECVARIABLE     reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    NOMBRE          reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    RETURN          reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    INCREMENTAR     reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    DECREMENTAR     reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    PRIVATE         reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    PUBLIC          reduce using rule 20 (instruccion -> condicion_else NEWLINE .)
    NEWLINE         reduce using rule 20 (instruccion -> condicion_else NEWLINE .)


state 46

    (21) instruccion -> ciclo_for NEWLINE .

    LLAVEDER        reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    IF              reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    ELSE            reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    FOR             reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    WHILE           reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    PRINT           reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    READ            reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    DECVARIABLE     reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    NOMBRE          reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    RETURN          reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    INCREMENTAR     reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    DECREMENTAR     reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    PRIVATE         reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    PUBLIC          reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)
    NEWLINE         reduce using rule 21 (instruccion -> ciclo_for NEWLINE .)


state 47

    (22) instruccion -> ciclo_while NEWLINE .

    LLAVEDER        reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    IF              reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    ELSE            reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    FOR             reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    WHILE           reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    PRINT           reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    READ            reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    DECVARIABLE     reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    NOMBRE          reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    RETURN          reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    INCREMENTAR     reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    DECREMENTAR     reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    PRIVATE         reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    PUBLIC          reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)
    NEWLINE         reduce using rule 22 (instruccion -> ciclo_while NEWLINE .)


state 48

    (23) instruccion -> imprimir NEWLINE .

    LLAVEDER        reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    IF              reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    ELSE            reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    FOR             reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    WHILE           reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    PRINT           reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    READ            reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    DECVARIABLE     reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    NOMBRE          reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    RETURN          reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    INCREMENTAR     reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    DECREMENTAR     reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    PRIVATE         reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    PUBLIC          reduce using rule 23 (instruccion -> imprimir NEWLINE .)
    NEWLINE         reduce using rule 23 (instruccion -> imprimir NEWLINE .)


state 49

    (24) instruccion -> leer NEWLINE .

    LLAVEDER        reduce using rule 24 (instruccion -> leer NEWLINE .)
    IF              reduce using rule 24 (instruccion -> leer NEWLINE .)
    ELSE            reduce using rule 24 (instruccion -> leer NEWLINE .)
    FOR             reduce using rule 24 (instruccion -> leer NEWLINE .)
    WHILE           reduce using rule 24 (instruccion -> leer NEWLINE .)
    PRINT           reduce using rule 24 (instruccion -> leer NEWLINE .)
    READ            reduce using rule 24 (instruccion -> leer NEWLINE .)
    DECVARIABLE     reduce using rule 24 (instruccion -> leer NEWLINE .)
    NOMBRE          reduce using rule 24 (instruccion -> leer NEWLINE .)
    RETURN          reduce using rule 24 (instruccion -> leer NEWLINE .)
    INCREMENTAR     reduce using rule 24 (instruccion -> leer NEWLINE .)
    DECREMENTAR     reduce using rule 24 (instruccion -> leer NEWLINE .)
    PRIVATE         reduce using rule 24 (instruccion -> leer NEWLINE .)
    PUBLIC          reduce using rule 24 (instruccion -> leer NEWLINE .)
    NEWLINE         reduce using rule 24 (instruccion -> leer NEWLINE .)


state 50

    (25) instruccion -> incdec NEWLINE .

    LLAVEDER        reduce using rule 25 (instruccion -> incdec NEWLINE .)
    IF              reduce using rule 25 (instruccion -> incdec NEWLINE .)
    ELSE            reduce using rule 25 (instruccion -> incdec NEWLINE .)
    FOR             reduce using rule 25 (instruccion -> incdec NEWLINE .)
    WHILE           reduce using rule 25 (instruccion -> incdec NEWLINE .)
    PRINT           reduce using rule 25 (instruccion -> incdec NEWLINE .)
    READ            reduce using rule 25 (instruccion -> incdec NEWLINE .)
    DECVARIABLE     reduce using rule 25 (instruccion -> incdec NEWLINE .)
    NOMBRE          reduce using rule 25 (instruccion -> incdec NEWLINE .)
    RETURN          reduce using rule 25 (instruccion -> incdec NEWLINE .)
    INCREMENTAR     reduce using rule 25 (instruccion -> incdec NEWLINE .)
    DECREMENTAR     reduce using rule 25 (instruccion -> incdec NEWLINE .)
    PRIVATE         reduce using rule 25 (instruccion -> incdec NEWLINE .)
    PUBLIC          reduce using rule 25 (instruccion -> incdec NEWLINE .)
    NEWLINE         reduce using rule 25 (instruccion -> incdec NEWLINE .)


state 51

    (26) instruccion -> dec_variable NEWLINE .

    LLAVEDER        reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    IF              reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    ELSE            reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    FOR             reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    WHILE           reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    PRINT           reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    READ            reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    DECVARIABLE     reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    NOMBRE          reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    RETURN          reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    INCREMENTAR     reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    DECREMENTAR     reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    PRIVATE         reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    PUBLIC          reduce using rule 26 (instruccion -> dec_variable NEWLINE .)
    NEWLINE         reduce using rule 26 (instruccion -> dec_variable NEWLINE .)


state 52

    (27) instruccion -> dec_vector NEWLINE .

    LLAVEDER        reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    IF              reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    ELSE            reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    FOR             reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    WHILE           reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    PRINT           reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    READ            reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    DECVARIABLE     reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    NOMBRE          reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    RETURN          reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    INCREMENTAR     reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    DECREMENTAR     reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    PRIVATE         reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    PUBLIC          reduce using rule 27 (instruccion -> dec_vector NEWLINE .)
    NEWLINE         reduce using rule 27 (instruccion -> dec_vector NEWLINE .)


state 53

    (28) instruccion -> asigna NEWLINE .

    LLAVEDER        reduce using rule 28 (instruccion -> asigna NEWLINE .)
    IF              reduce using rule 28 (instruccion -> asigna NEWLINE .)
    ELSE            reduce using rule 28 (instruccion -> asigna NEWLINE .)
    FOR             reduce using rule 28 (instruccion -> asigna NEWLINE .)
    WHILE           reduce using rule 28 (instruccion -> asigna NEWLINE .)
    PRINT           reduce using rule 28 (instruccion -> asigna NEWLINE .)
    READ            reduce using rule 28 (instruccion -> asigna NEWLINE .)
    DECVARIABLE     reduce using rule 28 (instruccion -> asigna NEWLINE .)
    NOMBRE          reduce using rule 28 (instruccion -> asigna NEWLINE .)
    RETURN          reduce using rule 28 (instruccion -> asigna NEWLINE .)
    INCREMENTAR     reduce using rule 28 (instruccion -> asigna NEWLINE .)
    DECREMENTAR     reduce using rule 28 (instruccion -> asigna NEWLINE .)
    PRIVATE         reduce using rule 28 (instruccion -> asigna NEWLINE .)
    PUBLIC          reduce using rule 28 (instruccion -> asigna NEWLINE .)
    NEWLINE         reduce using rule 28 (instruccion -> asigna NEWLINE .)


state 54

    (29) instruccion -> asignacion_vector NEWLINE .

    LLAVEDER        reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    IF              reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    ELSE            reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    FOR             reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    WHILE           reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    PRINT           reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    READ            reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    DECVARIABLE     reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    NOMBRE          reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    RETURN          reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    INCREMENTAR     reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    DECREMENTAR     reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    PRIVATE         reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    PUBLIC          reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)
    NEWLINE         reduce using rule 29 (instruccion -> asignacion_vector NEWLINE .)


state 55

    (30) instruccion -> llamado_funcion NEWLINE .

    LLAVEDER        reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    IF              reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    ELSE            reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    FOR             reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    WHILE           reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    PRINT           reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    READ            reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    DECVARIABLE     reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    NOMBRE          reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    RETURN          reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    INCREMENTAR     reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    DECREMENTAR     reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    PRIVATE         reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    PUBLIC          reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)
    NEWLINE         reduce using rule 30 (instruccion -> llamado_funcion NEWLINE .)


state 56

    (31) instruccion -> retorno NEWLINE .

    LLAVEDER        reduce using rule 31 (instruccion -> retorno NEWLINE .)
    IF              reduce using rule 31 (instruccion -> retorno NEWLINE .)
    ELSE            reduce using rule 31 (instruccion -> retorno NEWLINE .)
    FOR             reduce using rule 31 (instruccion -> retorno NEWLINE .)
    WHILE           reduce using rule 31 (instruccion -> retorno NEWLINE .)
    PRINT           reduce using rule 31 (instruccion -> retorno NEWLINE .)
    READ            reduce using rule 31 (instruccion -> retorno NEWLINE .)
    DECVARIABLE     reduce using rule 31 (instruccion -> retorno NEWLINE .)
    NOMBRE          reduce using rule 31 (instruccion -> retorno NEWLINE .)
    RETURN          reduce using rule 31 (instruccion -> retorno NEWLINE .)
    INCREMENTAR     reduce using rule 31 (instruccion -> retorno NEWLINE .)
    DECREMENTAR     reduce using rule 31 (instruccion -> retorno NEWLINE .)
    PRIVATE         reduce using rule 31 (instruccion -> retorno NEWLINE .)
    PUBLIC          reduce using rule 31 (instruccion -> retorno NEWLINE .)
    NEWLINE         reduce using rule 31 (instruccion -> retorno NEWLINE .)


state 57

    (32) instruccion -> LLAVEDER NEWLINE .

    LLAVEDER        reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    IF              reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    ELSE            reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    FOR             reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    WHILE           reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    PRINT           reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    READ            reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    DECVARIABLE     reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    NOMBRE          reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    RETURN          reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    INCREMENTAR     reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    DECREMENTAR     reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    PRIVATE         reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    PUBLIC          reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)
    NEWLINE         reduce using rule 32 (instruccion -> LLAVEDER NEWLINE .)


state 58

    (37) condicion_if -> IF PARIZQ . condicion PARDER LLAVEIZQ
    (70) condicion -> . tipo_variable operador_condicional tipo_variable condicion_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    condicion                      shift and go to state 86
    tipo_variable                  shift and go to state 87
    llamado_funcion                shift and go to state 80

state 59

    (38) condicion_else -> ELSE LLAVEIZQ .

    NEWLINE         reduce using rule 38 (condicion_else -> ELSE LLAVEIZQ .)


state 60

    (39) condicion_else -> ELSE condicion_if .

    NEWLINE         reduce using rule 39 (condicion_else -> ELSE condicion_if .)


state 61

    (40) ciclo_for -> FOR PARIZQ . DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER LLAVEIZQ

    DECVARIABLE     shift and go to state 88


state 62

    (50) dec_variable -> DECVARIABLE ASIGNACION . op_aritmetica
    (51) dec_variable -> DECVARIABLE ASIGNACION . tipo_variable
    (80) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    op_aritmetica                  shift and go to state 89
    tipo_variable                  shift and go to state 90
    llamado_funcion                shift and go to state 80

state 63

    (52) dec_vector -> DECVARIABLE CORCHETEIZQ . NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (53) dec_vector -> DECVARIABLE CORCHETEIZQ . INT CORCHETEDER ASIGNACION op_aritmetica
    (54) dec_vector -> DECVARIABLE CORCHETEIZQ . NOMBRE CORCHETEDER ASIGNACION tipo_variable
    (55) dec_vector -> DECVARIABLE CORCHETEIZQ . INT CORCHETEDER ASIGNACION tipo_variable

    NOMBRE          shift and go to state 91
    INT             shift and go to state 92


state 64

    (47) ciclo_while -> WHILE PARIZQ . condicion PARDER LLAVEIZQ
    (70) condicion -> . tipo_variable operador_condicional tipo_variable condicion_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    condicion                      shift and go to state 93
    tipo_variable                  shift and go to state 87
    llamado_funcion                shift and go to state 80

state 65

    (48) imprimir -> PRINT PARIZQ . tipo_variable PARDER
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    tipo_variable                  shift and go to state 94
    llamado_funcion                shift and go to state 80

state 66

    (49) leer -> READ PARIZQ . NOMBRE PARDER

    NOMBRE          shift and go to state 95


state 67

    (56) asigna -> NOMBRE ASIGNACION . op_aritmetica
    (57) asigna -> NOMBRE ASIGNACION . tipo_variable
    (80) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    op_aritmetica                  shift and go to state 96
    tipo_variable                  shift and go to state 97
    llamado_funcion                shift and go to state 80

state 68

    (58) asignacion_vector -> NOMBRE CORCHETEIZQ . NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (59) asignacion_vector -> NOMBRE CORCHETEIZQ . INT CORCHETEDER ASIGNACION op_aritmetica
    (60) asignacion_vector -> NOMBRE CORCHETEIZQ . NOMBRE CORCHETEDER ASIGNACION tipo_variable
    (61) asignacion_vector -> NOMBRE CORCHETEIZQ . INT CORCHETEDER ASIGNACION tipo_variable

    NOMBRE          shift and go to state 98
    INT             shift and go to state 99


state 69

    (14) llamado_funcion -> NOMBRE PARIZQ . parametro_llamado PARDER
    (15) parametro_llamado -> . vacio
    (16) parametro_llamado -> . tipo_variable parametro_llamado_extra
    (90) vacio -> .
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    PARDER          reduce using rule 90 (vacio -> .)
    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    parametro_llamado              shift and go to state 100
    vacio                          shift and go to state 101
    tipo_variable                  shift and go to state 102
    llamado_funcion                shift and go to state 80

state 70

    (45) post_incdec -> NOMBRE INCREMENTAR .

    NEWLINE         reduce using rule 45 (post_incdec -> NOMBRE INCREMENTAR .)
    PARDER          reduce using rule 45 (post_incdec -> NOMBRE INCREMENTAR .)


state 71

    (46) post_incdec -> NOMBRE DECREMENTAR .

    NEWLINE         reduce using rule 46 (post_incdec -> NOMBRE DECREMENTAR .)
    PARDER          reduce using rule 46 (post_incdec -> NOMBRE DECREMENTAR .)


state 72

    (62) retorno -> RETURN tipo_variable .
    (80) op_aritmetica -> tipo_variable . operador_aritmetico tipo_variable op_aritmetica_extra
    (84) operador_aritmetico -> . SUMA
    (85) operador_aritmetico -> . RESTA
    (86) operador_aritmetico -> . MULT
    (87) operador_aritmetico -> . DIV

    NEWLINE         reduce using rule 62 (retorno -> RETURN tipo_variable .)
    SUMA            shift and go to state 104
    RESTA           shift and go to state 105
    MULT            shift and go to state 106
    DIV             shift and go to state 107

    operador_aritmetico            shift and go to state 103

state 73

    (63) retorno -> RETURN op_aritmetica .

    NEWLINE         reduce using rule 63 (retorno -> RETURN op_aritmetica .)


state 74

    (73) tipo_variable -> NOMBRE .
    (14) llamado_funcion -> NOMBRE . PARIZQ parametro_llamado PARDER

    SUMA            reduce using rule 73 (tipo_variable -> NOMBRE .)
    RESTA           reduce using rule 73 (tipo_variable -> NOMBRE .)
    MULT            reduce using rule 73 (tipo_variable -> NOMBRE .)
    DIV             reduce using rule 73 (tipo_variable -> NOMBRE .)
    NEWLINE         reduce using rule 73 (tipo_variable -> NOMBRE .)
    DIFERENTE       reduce using rule 73 (tipo_variable -> NOMBRE .)
    IGUAL           reduce using rule 73 (tipo_variable -> NOMBRE .)
    MAYOR           reduce using rule 73 (tipo_variable -> NOMBRE .)
    MAYORIGUAL      reduce using rule 73 (tipo_variable -> NOMBRE .)
    MENOR           reduce using rule 73 (tipo_variable -> NOMBRE .)
    MENORIGUAL      reduce using rule 73 (tipo_variable -> NOMBRE .)
    PARDER          reduce using rule 73 (tipo_variable -> NOMBRE .)
    COMA            reduce using rule 73 (tipo_variable -> NOMBRE .)
    AND             reduce using rule 73 (tipo_variable -> NOMBRE .)
    OR              reduce using rule 73 (tipo_variable -> NOMBRE .)
    PUNTOYCOMA      reduce using rule 73 (tipo_variable -> NOMBRE .)
    PARIZQ          shift and go to state 69


state 75

    (74) tipo_variable -> DOUBLE .

    SUMA            reduce using rule 74 (tipo_variable -> DOUBLE .)
    RESTA           reduce using rule 74 (tipo_variable -> DOUBLE .)
    MULT            reduce using rule 74 (tipo_variable -> DOUBLE .)
    DIV             reduce using rule 74 (tipo_variable -> DOUBLE .)
    NEWLINE         reduce using rule 74 (tipo_variable -> DOUBLE .)
    DIFERENTE       reduce using rule 74 (tipo_variable -> DOUBLE .)
    IGUAL           reduce using rule 74 (tipo_variable -> DOUBLE .)
    MAYOR           reduce using rule 74 (tipo_variable -> DOUBLE .)
    MAYORIGUAL      reduce using rule 74 (tipo_variable -> DOUBLE .)
    MENOR           reduce using rule 74 (tipo_variable -> DOUBLE .)
    MENORIGUAL      reduce using rule 74 (tipo_variable -> DOUBLE .)
    PARDER          reduce using rule 74 (tipo_variable -> DOUBLE .)
    COMA            reduce using rule 74 (tipo_variable -> DOUBLE .)
    AND             reduce using rule 74 (tipo_variable -> DOUBLE .)
    OR              reduce using rule 74 (tipo_variable -> DOUBLE .)
    PUNTOYCOMA      reduce using rule 74 (tipo_variable -> DOUBLE .)


state 76

    (75) tipo_variable -> INT .

    SUMA            reduce using rule 75 (tipo_variable -> INT .)
    RESTA           reduce using rule 75 (tipo_variable -> INT .)
    MULT            reduce using rule 75 (tipo_variable -> INT .)
    DIV             reduce using rule 75 (tipo_variable -> INT .)
    NEWLINE         reduce using rule 75 (tipo_variable -> INT .)
    DIFERENTE       reduce using rule 75 (tipo_variable -> INT .)
    IGUAL           reduce using rule 75 (tipo_variable -> INT .)
    MAYOR           reduce using rule 75 (tipo_variable -> INT .)
    MAYORIGUAL      reduce using rule 75 (tipo_variable -> INT .)
    MENOR           reduce using rule 75 (tipo_variable -> INT .)
    MENORIGUAL      reduce using rule 75 (tipo_variable -> INT .)
    PARDER          reduce using rule 75 (tipo_variable -> INT .)
    COMA            reduce using rule 75 (tipo_variable -> INT .)
    AND             reduce using rule 75 (tipo_variable -> INT .)
    OR              reduce using rule 75 (tipo_variable -> INT .)
    PUNTOYCOMA      reduce using rule 75 (tipo_variable -> INT .)


state 77

    (76) tipo_variable -> STRING .

    SUMA            reduce using rule 76 (tipo_variable -> STRING .)
    RESTA           reduce using rule 76 (tipo_variable -> STRING .)
    MULT            reduce using rule 76 (tipo_variable -> STRING .)
    DIV             reduce using rule 76 (tipo_variable -> STRING .)
    NEWLINE         reduce using rule 76 (tipo_variable -> STRING .)
    DIFERENTE       reduce using rule 76 (tipo_variable -> STRING .)
    IGUAL           reduce using rule 76 (tipo_variable -> STRING .)
    MAYOR           reduce using rule 76 (tipo_variable -> STRING .)
    MAYORIGUAL      reduce using rule 76 (tipo_variable -> STRING .)
    MENOR           reduce using rule 76 (tipo_variable -> STRING .)
    MENORIGUAL      reduce using rule 76 (tipo_variable -> STRING .)
    PARDER          reduce using rule 76 (tipo_variable -> STRING .)
    COMA            reduce using rule 76 (tipo_variable -> STRING .)
    AND             reduce using rule 76 (tipo_variable -> STRING .)
    OR              reduce using rule 76 (tipo_variable -> STRING .)
    PUNTOYCOMA      reduce using rule 76 (tipo_variable -> STRING .)


state 78

    (77) tipo_variable -> FALSE .

    SUMA            reduce using rule 77 (tipo_variable -> FALSE .)
    RESTA           reduce using rule 77 (tipo_variable -> FALSE .)
    MULT            reduce using rule 77 (tipo_variable -> FALSE .)
    DIV             reduce using rule 77 (tipo_variable -> FALSE .)
    NEWLINE         reduce using rule 77 (tipo_variable -> FALSE .)
    DIFERENTE       reduce using rule 77 (tipo_variable -> FALSE .)
    IGUAL           reduce using rule 77 (tipo_variable -> FALSE .)
    MAYOR           reduce using rule 77 (tipo_variable -> FALSE .)
    MAYORIGUAL      reduce using rule 77 (tipo_variable -> FALSE .)
    MENOR           reduce using rule 77 (tipo_variable -> FALSE .)
    MENORIGUAL      reduce using rule 77 (tipo_variable -> FALSE .)
    PARDER          reduce using rule 77 (tipo_variable -> FALSE .)
    COMA            reduce using rule 77 (tipo_variable -> FALSE .)
    AND             reduce using rule 77 (tipo_variable -> FALSE .)
    OR              reduce using rule 77 (tipo_variable -> FALSE .)
    PUNTOYCOMA      reduce using rule 77 (tipo_variable -> FALSE .)


state 79

    (78) tipo_variable -> TRUE .

    SUMA            reduce using rule 78 (tipo_variable -> TRUE .)
    RESTA           reduce using rule 78 (tipo_variable -> TRUE .)
    MULT            reduce using rule 78 (tipo_variable -> TRUE .)
    DIV             reduce using rule 78 (tipo_variable -> TRUE .)
    NEWLINE         reduce using rule 78 (tipo_variable -> TRUE .)
    DIFERENTE       reduce using rule 78 (tipo_variable -> TRUE .)
    IGUAL           reduce using rule 78 (tipo_variable -> TRUE .)
    MAYOR           reduce using rule 78 (tipo_variable -> TRUE .)
    MAYORIGUAL      reduce using rule 78 (tipo_variable -> TRUE .)
    MENOR           reduce using rule 78 (tipo_variable -> TRUE .)
    MENORIGUAL      reduce using rule 78 (tipo_variable -> TRUE .)
    PARDER          reduce using rule 78 (tipo_variable -> TRUE .)
    COMA            reduce using rule 78 (tipo_variable -> TRUE .)
    AND             reduce using rule 78 (tipo_variable -> TRUE .)
    OR              reduce using rule 78 (tipo_variable -> TRUE .)
    PUNTOYCOMA      reduce using rule 78 (tipo_variable -> TRUE .)


state 80

    (79) tipo_variable -> llamado_funcion .

    SUMA            reduce using rule 79 (tipo_variable -> llamado_funcion .)
    RESTA           reduce using rule 79 (tipo_variable -> llamado_funcion .)
    MULT            reduce using rule 79 (tipo_variable -> llamado_funcion .)
    DIV             reduce using rule 79 (tipo_variable -> llamado_funcion .)
    NEWLINE         reduce using rule 79 (tipo_variable -> llamado_funcion .)
    DIFERENTE       reduce using rule 79 (tipo_variable -> llamado_funcion .)
    IGUAL           reduce using rule 79 (tipo_variable -> llamado_funcion .)
    MAYOR           reduce using rule 79 (tipo_variable -> llamado_funcion .)
    MAYORIGUAL      reduce using rule 79 (tipo_variable -> llamado_funcion .)
    MENOR           reduce using rule 79 (tipo_variable -> llamado_funcion .)
    MENORIGUAL      reduce using rule 79 (tipo_variable -> llamado_funcion .)
    PARDER          reduce using rule 79 (tipo_variable -> llamado_funcion .)
    COMA            reduce using rule 79 (tipo_variable -> llamado_funcion .)
    AND             reduce using rule 79 (tipo_variable -> llamado_funcion .)
    OR              reduce using rule 79 (tipo_variable -> llamado_funcion .)
    PUNTOYCOMA      reduce using rule 79 (tipo_variable -> llamado_funcion .)


state 81

    (43) pre_incdec -> INCREMENTAR NOMBRE .

    NEWLINE         reduce using rule 43 (pre_incdec -> INCREMENTAR NOMBRE .)
    PARDER          reduce using rule 43 (pre_incdec -> INCREMENTAR NOMBRE .)


state 82

    (44) pre_incdec -> DECREMENTAR NOMBRE .

    NEWLINE         reduce using rule 44 (pre_incdec -> DECREMENTAR NOMBRE .)
    PARDER          reduce using rule 44 (pre_incdec -> DECREMENTAR NOMBRE .)


state 83

    (5) definicion_funcion -> dominio tipo_return NOMBRE . PARIZQ parametro PARDER LLAVEIZQ

    PARIZQ          shift and go to state 108


state 84

    (1) Niark -> definicion_funcion instrucciones Niark NEWLINE .

    $end            reduce using rule 1 (Niark -> definicion_funcion instrucciones Niark NEWLINE .)
    NEWLINE         reduce using rule 1 (Niark -> definicion_funcion instrucciones Niark NEWLINE .)


state 85

    (35) concat_instruccion -> instruccion concat_instruccion .

    PRIVATE         reduce using rule 35 (concat_instruccion -> instruccion concat_instruccion .)
    PUBLIC          reduce using rule 35 (concat_instruccion -> instruccion concat_instruccion .)
    NEWLINE         reduce using rule 35 (concat_instruccion -> instruccion concat_instruccion .)


state 86

    (37) condicion_if -> IF PARIZQ condicion . PARDER LLAVEIZQ

    PARDER          shift and go to state 109


state 87

    (70) condicion -> tipo_variable . operador_condicional tipo_variable condicion_extra
    (64) operador_condicional -> . DIFERENTE
    (65) operador_condicional -> . IGUAL
    (66) operador_condicional -> . MAYOR
    (67) operador_condicional -> . MAYORIGUAL
    (68) operador_condicional -> . MENOR
    (69) operador_condicional -> . MENORIGUAL

    DIFERENTE       shift and go to state 111
    IGUAL           shift and go to state 112
    MAYOR           shift and go to state 113
    MAYORIGUAL      shift and go to state 114
    MENOR           shift and go to state 115
    MENORIGUAL      shift and go to state 116

    operador_condicional           shift and go to state 110

state 88

    (40) ciclo_for -> FOR PARIZQ DECVARIABLE . ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER LLAVEIZQ

    ASIGNACION      shift and go to state 117


state 89

    (50) dec_variable -> DECVARIABLE ASIGNACION op_aritmetica .

    NEWLINE         reduce using rule 50 (dec_variable -> DECVARIABLE ASIGNACION op_aritmetica .)


state 90

    (51) dec_variable -> DECVARIABLE ASIGNACION tipo_variable .
    (80) op_aritmetica -> tipo_variable . operador_aritmetico tipo_variable op_aritmetica_extra
    (84) operador_aritmetico -> . SUMA
    (85) operador_aritmetico -> . RESTA
    (86) operador_aritmetico -> . MULT
    (87) operador_aritmetico -> . DIV

    NEWLINE         reduce using rule 51 (dec_variable -> DECVARIABLE ASIGNACION tipo_variable .)
    SUMA            shift and go to state 104
    RESTA           shift and go to state 105
    MULT            shift and go to state 106
    DIV             shift and go to state 107

    operador_aritmetico            shift and go to state 103

state 91

    (52) dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE . CORCHETEDER ASIGNACION op_aritmetica
    (54) dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE . CORCHETEDER ASIGNACION tipo_variable

    CORCHETEDER     shift and go to state 118


state 92

    (53) dec_vector -> DECVARIABLE CORCHETEIZQ INT . CORCHETEDER ASIGNACION op_aritmetica
    (55) dec_vector -> DECVARIABLE CORCHETEIZQ INT . CORCHETEDER ASIGNACION tipo_variable

    CORCHETEDER     shift and go to state 119


state 93

    (47) ciclo_while -> WHILE PARIZQ condicion . PARDER LLAVEIZQ

    PARDER          shift and go to state 120


state 94

    (48) imprimir -> PRINT PARIZQ tipo_variable . PARDER

    PARDER          shift and go to state 121


state 95

    (49) leer -> READ PARIZQ NOMBRE . PARDER

    PARDER          shift and go to state 122


state 96

    (56) asigna -> NOMBRE ASIGNACION op_aritmetica .

    NEWLINE         reduce using rule 56 (asigna -> NOMBRE ASIGNACION op_aritmetica .)


state 97

    (57) asigna -> NOMBRE ASIGNACION tipo_variable .
    (80) op_aritmetica -> tipo_variable . operador_aritmetico tipo_variable op_aritmetica_extra
    (84) operador_aritmetico -> . SUMA
    (85) operador_aritmetico -> . RESTA
    (86) operador_aritmetico -> . MULT
    (87) operador_aritmetico -> . DIV

    NEWLINE         reduce using rule 57 (asigna -> NOMBRE ASIGNACION tipo_variable .)
    SUMA            shift and go to state 104
    RESTA           shift and go to state 105
    MULT            shift and go to state 106
    DIV             shift and go to state 107

    operador_aritmetico            shift and go to state 103

state 98

    (58) asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE . CORCHETEDER ASIGNACION op_aritmetica
    (60) asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE . CORCHETEDER ASIGNACION tipo_variable

    CORCHETEDER     shift and go to state 123


state 99

    (59) asignacion_vector -> NOMBRE CORCHETEIZQ INT . CORCHETEDER ASIGNACION op_aritmetica
    (61) asignacion_vector -> NOMBRE CORCHETEIZQ INT . CORCHETEDER ASIGNACION tipo_variable

    CORCHETEDER     shift and go to state 124


state 100

    (14) llamado_funcion -> NOMBRE PARIZQ parametro_llamado . PARDER

    PARDER          shift and go to state 125


state 101

    (15) parametro_llamado -> vacio .

    PARDER          reduce using rule 15 (parametro_llamado -> vacio .)


state 102

    (16) parametro_llamado -> tipo_variable . parametro_llamado_extra
    (17) parametro_llamado_extra -> . COMA NOMBRE parametro_llamado_extra
    (18) parametro_llamado_extra -> . vacio
    (90) vacio -> .

    COMA            shift and go to state 127
    PARDER          reduce using rule 90 (vacio -> .)

    parametro_llamado_extra        shift and go to state 126
    vacio                          shift and go to state 128

state 103

    (80) op_aritmetica -> tipo_variable operador_aritmetico . tipo_variable op_aritmetica_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    tipo_variable                  shift and go to state 129
    llamado_funcion                shift and go to state 80

state 104

    (84) operador_aritmetico -> SUMA .

    NOMBRE          reduce using rule 84 (operador_aritmetico -> SUMA .)
    DOUBLE          reduce using rule 84 (operador_aritmetico -> SUMA .)
    INT             reduce using rule 84 (operador_aritmetico -> SUMA .)
    STRING          reduce using rule 84 (operador_aritmetico -> SUMA .)
    FALSE           reduce using rule 84 (operador_aritmetico -> SUMA .)
    TRUE            reduce using rule 84 (operador_aritmetico -> SUMA .)
    PARIZQ          reduce using rule 84 (operador_aritmetico -> SUMA .)


state 105

    (85) operador_aritmetico -> RESTA .

    NOMBRE          reduce using rule 85 (operador_aritmetico -> RESTA .)
    DOUBLE          reduce using rule 85 (operador_aritmetico -> RESTA .)
    INT             reduce using rule 85 (operador_aritmetico -> RESTA .)
    STRING          reduce using rule 85 (operador_aritmetico -> RESTA .)
    FALSE           reduce using rule 85 (operador_aritmetico -> RESTA .)
    TRUE            reduce using rule 85 (operador_aritmetico -> RESTA .)
    PARIZQ          reduce using rule 85 (operador_aritmetico -> RESTA .)


state 106

    (86) operador_aritmetico -> MULT .

    NOMBRE          reduce using rule 86 (operador_aritmetico -> MULT .)
    DOUBLE          reduce using rule 86 (operador_aritmetico -> MULT .)
    INT             reduce using rule 86 (operador_aritmetico -> MULT .)
    STRING          reduce using rule 86 (operador_aritmetico -> MULT .)
    FALSE           reduce using rule 86 (operador_aritmetico -> MULT .)
    TRUE            reduce using rule 86 (operador_aritmetico -> MULT .)
    PARIZQ          reduce using rule 86 (operador_aritmetico -> MULT .)


state 107

    (87) operador_aritmetico -> DIV .

    NOMBRE          reduce using rule 87 (operador_aritmetico -> DIV .)
    DOUBLE          reduce using rule 87 (operador_aritmetico -> DIV .)
    INT             reduce using rule 87 (operador_aritmetico -> DIV .)
    STRING          reduce using rule 87 (operador_aritmetico -> DIV .)
    FALSE           reduce using rule 87 (operador_aritmetico -> DIV .)
    TRUE            reduce using rule 87 (operador_aritmetico -> DIV .)
    PARIZQ          reduce using rule 87 (operador_aritmetico -> DIV .)


state 108

    (5) definicion_funcion -> dominio tipo_return NOMBRE PARIZQ . parametro PARDER LLAVEIZQ
    (10) parametro -> . vacio
    (11) parametro -> . NOMBRE parametro_extra
    (90) vacio -> .

    NOMBRE          shift and go to state 130
    PARDER          reduce using rule 90 (vacio -> .)

    parametro                      shift and go to state 131
    vacio                          shift and go to state 132

state 109

    (37) condicion_if -> IF PARIZQ condicion PARDER . LLAVEIZQ

    LLAVEIZQ        shift and go to state 133


state 110

    (70) condicion -> tipo_variable operador_condicional . tipo_variable condicion_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    tipo_variable                  shift and go to state 134
    llamado_funcion                shift and go to state 80

state 111

    (64) operador_condicional -> DIFERENTE .

    NOMBRE          reduce using rule 64 (operador_condicional -> DIFERENTE .)
    DOUBLE          reduce using rule 64 (operador_condicional -> DIFERENTE .)
    INT             reduce using rule 64 (operador_condicional -> DIFERENTE .)
    STRING          reduce using rule 64 (operador_condicional -> DIFERENTE .)
    FALSE           reduce using rule 64 (operador_condicional -> DIFERENTE .)
    TRUE            reduce using rule 64 (operador_condicional -> DIFERENTE .)


state 112

    (65) operador_condicional -> IGUAL .

    NOMBRE          reduce using rule 65 (operador_condicional -> IGUAL .)
    DOUBLE          reduce using rule 65 (operador_condicional -> IGUAL .)
    INT             reduce using rule 65 (operador_condicional -> IGUAL .)
    STRING          reduce using rule 65 (operador_condicional -> IGUAL .)
    FALSE           reduce using rule 65 (operador_condicional -> IGUAL .)
    TRUE            reduce using rule 65 (operador_condicional -> IGUAL .)


state 113

    (66) operador_condicional -> MAYOR .

    NOMBRE          reduce using rule 66 (operador_condicional -> MAYOR .)
    DOUBLE          reduce using rule 66 (operador_condicional -> MAYOR .)
    INT             reduce using rule 66 (operador_condicional -> MAYOR .)
    STRING          reduce using rule 66 (operador_condicional -> MAYOR .)
    FALSE           reduce using rule 66 (operador_condicional -> MAYOR .)
    TRUE            reduce using rule 66 (operador_condicional -> MAYOR .)


state 114

    (67) operador_condicional -> MAYORIGUAL .

    NOMBRE          reduce using rule 67 (operador_condicional -> MAYORIGUAL .)
    DOUBLE          reduce using rule 67 (operador_condicional -> MAYORIGUAL .)
    INT             reduce using rule 67 (operador_condicional -> MAYORIGUAL .)
    STRING          reduce using rule 67 (operador_condicional -> MAYORIGUAL .)
    FALSE           reduce using rule 67 (operador_condicional -> MAYORIGUAL .)
    TRUE            reduce using rule 67 (operador_condicional -> MAYORIGUAL .)


state 115

    (68) operador_condicional -> MENOR .

    NOMBRE          reduce using rule 68 (operador_condicional -> MENOR .)
    DOUBLE          reduce using rule 68 (operador_condicional -> MENOR .)
    INT             reduce using rule 68 (operador_condicional -> MENOR .)
    STRING          reduce using rule 68 (operador_condicional -> MENOR .)
    FALSE           reduce using rule 68 (operador_condicional -> MENOR .)
    TRUE            reduce using rule 68 (operador_condicional -> MENOR .)


state 116

    (69) operador_condicional -> MENORIGUAL .

    NOMBRE          reduce using rule 69 (operador_condicional -> MENORIGUAL .)
    DOUBLE          reduce using rule 69 (operador_condicional -> MENORIGUAL .)
    INT             reduce using rule 69 (operador_condicional -> MENORIGUAL .)
    STRING          reduce using rule 69 (operador_condicional -> MENORIGUAL .)
    FALSE           reduce using rule 69 (operador_condicional -> MENORIGUAL .)
    TRUE            reduce using rule 69 (operador_condicional -> MENORIGUAL .)


state 117

    (40) ciclo_for -> FOR PARIZQ DECVARIABLE ASIGNACION . INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER LLAVEIZQ

    INT             shift and go to state 135


state 118

    (52) dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER . ASIGNACION op_aritmetica
    (54) dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER . ASIGNACION tipo_variable

    ASIGNACION      shift and go to state 136


state 119

    (53) dec_vector -> DECVARIABLE CORCHETEIZQ INT CORCHETEDER . ASIGNACION op_aritmetica
    (55) dec_vector -> DECVARIABLE CORCHETEIZQ INT CORCHETEDER . ASIGNACION tipo_variable

    ASIGNACION      shift and go to state 137


state 120

    (47) ciclo_while -> WHILE PARIZQ condicion PARDER . LLAVEIZQ

    LLAVEIZQ        shift and go to state 138


state 121

    (48) imprimir -> PRINT PARIZQ tipo_variable PARDER .

    NEWLINE         reduce using rule 48 (imprimir -> PRINT PARIZQ tipo_variable PARDER .)


state 122

    (49) leer -> READ PARIZQ NOMBRE PARDER .

    NEWLINE         reduce using rule 49 (leer -> READ PARIZQ NOMBRE PARDER .)


state 123

    (58) asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER . ASIGNACION op_aritmetica
    (60) asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER . ASIGNACION tipo_variable

    ASIGNACION      shift and go to state 139


state 124

    (59) asignacion_vector -> NOMBRE CORCHETEIZQ INT CORCHETEDER . ASIGNACION op_aritmetica
    (61) asignacion_vector -> NOMBRE CORCHETEIZQ INT CORCHETEDER . ASIGNACION tipo_variable

    ASIGNACION      shift and go to state 140


state 125

    (14) llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .

    NEWLINE         reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    SUMA            reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    RESTA           reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    MULT            reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    DIV             reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    DIFERENTE       reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    IGUAL           reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    MAYOR           reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    MAYORIGUAL      reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    MENOR           reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    MENORIGUAL      reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    PARDER          reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    COMA            reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    AND             reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    OR              reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)
    PUNTOYCOMA      reduce using rule 14 (llamado_funcion -> NOMBRE PARIZQ parametro_llamado PARDER .)


state 126

    (16) parametro_llamado -> tipo_variable parametro_llamado_extra .

    PARDER          reduce using rule 16 (parametro_llamado -> tipo_variable parametro_llamado_extra .)


state 127

    (17) parametro_llamado_extra -> COMA . NOMBRE parametro_llamado_extra

    NOMBRE          shift and go to state 141


state 128

    (18) parametro_llamado_extra -> vacio .

    PARDER          reduce using rule 18 (parametro_llamado_extra -> vacio .)


state 129

    (80) op_aritmetica -> tipo_variable operador_aritmetico tipo_variable . op_aritmetica_extra
    (81) op_aritmetica_extra -> . operador_aritmetico tipo_variable op_aritmetica_extra
    (82) op_aritmetica_extra -> . operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER
    (83) op_aritmetica_extra -> . vacio
    (84) operador_aritmetico -> . SUMA
    (85) operador_aritmetico -> . RESTA
    (86) operador_aritmetico -> . MULT
    (87) operador_aritmetico -> . DIV
    (90) vacio -> .

    SUMA            shift and go to state 104
    RESTA           shift and go to state 105
    MULT            shift and go to state 106
    DIV             shift and go to state 107
    NEWLINE         reduce using rule 90 (vacio -> .)

    operador_aritmetico            shift and go to state 142
    op_aritmetica_extra            shift and go to state 143
    vacio                          shift and go to state 144

state 130

    (11) parametro -> NOMBRE . parametro_extra
    (12) parametro_extra -> . COMA NOMBRE parametro_extra
    (13) parametro_extra -> . vacio
    (90) vacio -> .

    COMA            shift and go to state 146
    PARDER          reduce using rule 90 (vacio -> .)

    parametro_extra                shift and go to state 145
    vacio                          shift and go to state 147

state 131

    (5) definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro . PARDER LLAVEIZQ

    PARDER          shift and go to state 148


state 132

    (10) parametro -> vacio .

    PARDER          reduce using rule 10 (parametro -> vacio .)


state 133

    (37) condicion_if -> IF PARIZQ condicion PARDER LLAVEIZQ .

    NEWLINE         reduce using rule 37 (condicion_if -> IF PARIZQ condicion PARDER LLAVEIZQ .)


state 134

    (70) condicion -> tipo_variable operador_condicional tipo_variable . condicion_extra
    (71) condicion_extra -> . operador_logico tipo_variable operador_condicional tipo_variable condicion_extra
    (72) condicion_extra -> . vacio
    (88) operador_logico -> . AND
    (89) operador_logico -> . OR
    (90) vacio -> .

    AND             shift and go to state 152
    OR              shift and go to state 153
    PARDER          reduce using rule 90 (vacio -> .)
    PUNTOYCOMA      reduce using rule 90 (vacio -> .)

    condicion_extra                shift and go to state 149
    operador_logico                shift and go to state 150
    vacio                          shift and go to state 151

state 135

    (40) ciclo_for -> FOR PARIZQ DECVARIABLE ASIGNACION INT . PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER LLAVEIZQ

    PUNTOYCOMA      shift and go to state 154


state 136

    (52) dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION . op_aritmetica
    (54) dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION . tipo_variable
    (80) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    op_aritmetica                  shift and go to state 155
    tipo_variable                  shift and go to state 156
    llamado_funcion                shift and go to state 80

state 137

    (53) dec_vector -> DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION . op_aritmetica
    (55) dec_vector -> DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION . tipo_variable
    (80) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    op_aritmetica                  shift and go to state 157
    tipo_variable                  shift and go to state 158
    llamado_funcion                shift and go to state 80

state 138

    (47) ciclo_while -> WHILE PARIZQ condicion PARDER LLAVEIZQ .

    NEWLINE         reduce using rule 47 (ciclo_while -> WHILE PARIZQ condicion PARDER LLAVEIZQ .)


state 139

    (58) asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION . op_aritmetica
    (60) asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION . tipo_variable
    (80) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    op_aritmetica                  shift and go to state 159
    tipo_variable                  shift and go to state 160
    llamado_funcion                shift and go to state 80

state 140

    (59) asignacion_vector -> NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION . op_aritmetica
    (61) asignacion_vector -> NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION . tipo_variable
    (80) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    op_aritmetica                  shift and go to state 161
    tipo_variable                  shift and go to state 162
    llamado_funcion                shift and go to state 80

state 141

    (17) parametro_llamado_extra -> COMA NOMBRE . parametro_llamado_extra
    (17) parametro_llamado_extra -> . COMA NOMBRE parametro_llamado_extra
    (18) parametro_llamado_extra -> . vacio
    (90) vacio -> .

    COMA            shift and go to state 127
    PARDER          reduce using rule 90 (vacio -> .)

    parametro_llamado_extra        shift and go to state 163
    vacio                          shift and go to state 128

state 142

    (81) op_aritmetica_extra -> operador_aritmetico . tipo_variable op_aritmetica_extra
    (82) op_aritmetica_extra -> operador_aritmetico . PARIZQ tipo_variable op_aritmetica_extra PARDER
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    PARIZQ          shift and go to state 165
    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    tipo_variable                  shift and go to state 164
    llamado_funcion                shift and go to state 80

state 143

    (80) op_aritmetica -> tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra .

    NEWLINE         reduce using rule 80 (op_aritmetica -> tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra .)


state 144

    (83) op_aritmetica_extra -> vacio .

    NEWLINE         reduce using rule 83 (op_aritmetica_extra -> vacio .)
    PARDER          reduce using rule 83 (op_aritmetica_extra -> vacio .)


state 145

    (11) parametro -> NOMBRE parametro_extra .

    PARDER          reduce using rule 11 (parametro -> NOMBRE parametro_extra .)


state 146

    (12) parametro_extra -> COMA . NOMBRE parametro_extra

    NOMBRE          shift and go to state 166


state 147

    (13) parametro_extra -> vacio .

    PARDER          reduce using rule 13 (parametro_extra -> vacio .)


state 148

    (5) definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER . LLAVEIZQ

    LLAVEIZQ        shift and go to state 167


state 149

    (70) condicion -> tipo_variable operador_condicional tipo_variable condicion_extra .

    PARDER          reduce using rule 70 (condicion -> tipo_variable operador_condicional tipo_variable condicion_extra .)
    PUNTOYCOMA      reduce using rule 70 (condicion -> tipo_variable operador_condicional tipo_variable condicion_extra .)


state 150

    (71) condicion_extra -> operador_logico . tipo_variable operador_condicional tipo_variable condicion_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    tipo_variable                  shift and go to state 168
    llamado_funcion                shift and go to state 80

state 151

    (72) condicion_extra -> vacio .

    PARDER          reduce using rule 72 (condicion_extra -> vacio .)
    PUNTOYCOMA      reduce using rule 72 (condicion_extra -> vacio .)


state 152

    (88) operador_logico -> AND .

    NOMBRE          reduce using rule 88 (operador_logico -> AND .)
    DOUBLE          reduce using rule 88 (operador_logico -> AND .)
    INT             reduce using rule 88 (operador_logico -> AND .)
    STRING          reduce using rule 88 (operador_logico -> AND .)
    FALSE           reduce using rule 88 (operador_logico -> AND .)
    TRUE            reduce using rule 88 (operador_logico -> AND .)


state 153

    (89) operador_logico -> OR .

    NOMBRE          reduce using rule 89 (operador_logico -> OR .)
    DOUBLE          reduce using rule 89 (operador_logico -> OR .)
    INT             reduce using rule 89 (operador_logico -> OR .)
    STRING          reduce using rule 89 (operador_logico -> OR .)
    FALSE           reduce using rule 89 (operador_logico -> OR .)
    TRUE            reduce using rule 89 (operador_logico -> OR .)


state 154

    (40) ciclo_for -> FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA . condicion PUNTOYCOMA incdec PARDER LLAVEIZQ
    (70) condicion -> . tipo_variable operador_condicional tipo_variable condicion_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    condicion                      shift and go to state 169
    tipo_variable                  shift and go to state 87
    llamado_funcion                shift and go to state 80

state 155

    (52) dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica .

    NEWLINE         reduce using rule 52 (dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica .)


state 156

    (54) dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable .
    (80) op_aritmetica -> tipo_variable . operador_aritmetico tipo_variable op_aritmetica_extra
    (84) operador_aritmetico -> . SUMA
    (85) operador_aritmetico -> . RESTA
    (86) operador_aritmetico -> . MULT
    (87) operador_aritmetico -> . DIV

    NEWLINE         reduce using rule 54 (dec_vector -> DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable .)
    SUMA            shift and go to state 104
    RESTA           shift and go to state 105
    MULT            shift and go to state 106
    DIV             shift and go to state 107

    operador_aritmetico            shift and go to state 103

state 157

    (53) dec_vector -> DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica .

    NEWLINE         reduce using rule 53 (dec_vector -> DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica .)


state 158

    (55) dec_vector -> DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable .
    (80) op_aritmetica -> tipo_variable . operador_aritmetico tipo_variable op_aritmetica_extra
    (84) operador_aritmetico -> . SUMA
    (85) operador_aritmetico -> . RESTA
    (86) operador_aritmetico -> . MULT
    (87) operador_aritmetico -> . DIV

    NEWLINE         reduce using rule 55 (dec_vector -> DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable .)
    SUMA            shift and go to state 104
    RESTA           shift and go to state 105
    MULT            shift and go to state 106
    DIV             shift and go to state 107

    operador_aritmetico            shift and go to state 103

state 159

    (58) asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica .

    NEWLINE         reduce using rule 58 (asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica .)


state 160

    (60) asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable .
    (80) op_aritmetica -> tipo_variable . operador_aritmetico tipo_variable op_aritmetica_extra
    (84) operador_aritmetico -> . SUMA
    (85) operador_aritmetico -> . RESTA
    (86) operador_aritmetico -> . MULT
    (87) operador_aritmetico -> . DIV

    NEWLINE         reduce using rule 60 (asignacion_vector -> NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION tipo_variable .)
    SUMA            shift and go to state 104
    RESTA           shift and go to state 105
    MULT            shift and go to state 106
    DIV             shift and go to state 107

    operador_aritmetico            shift and go to state 103

state 161

    (59) asignacion_vector -> NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica .

    NEWLINE         reduce using rule 59 (asignacion_vector -> NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica .)


state 162

    (61) asignacion_vector -> NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable .
    (80) op_aritmetica -> tipo_variable . operador_aritmetico tipo_variable op_aritmetica_extra
    (84) operador_aritmetico -> . SUMA
    (85) operador_aritmetico -> . RESTA
    (86) operador_aritmetico -> . MULT
    (87) operador_aritmetico -> . DIV

    NEWLINE         reduce using rule 61 (asignacion_vector -> NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION tipo_variable .)
    SUMA            shift and go to state 104
    RESTA           shift and go to state 105
    MULT            shift and go to state 106
    DIV             shift and go to state 107

    operador_aritmetico            shift and go to state 103

state 163

    (17) parametro_llamado_extra -> COMA NOMBRE parametro_llamado_extra .

    PARDER          reduce using rule 17 (parametro_llamado_extra -> COMA NOMBRE parametro_llamado_extra .)


state 164

    (81) op_aritmetica_extra -> operador_aritmetico tipo_variable . op_aritmetica_extra
    (81) op_aritmetica_extra -> . operador_aritmetico tipo_variable op_aritmetica_extra
    (82) op_aritmetica_extra -> . operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER
    (83) op_aritmetica_extra -> . vacio
    (84) operador_aritmetico -> . SUMA
    (85) operador_aritmetico -> . RESTA
    (86) operador_aritmetico -> . MULT
    (87) operador_aritmetico -> . DIV
    (90) vacio -> .

    SUMA            shift and go to state 104
    RESTA           shift and go to state 105
    MULT            shift and go to state 106
    DIV             shift and go to state 107
    NEWLINE         reduce using rule 90 (vacio -> .)
    PARDER          reduce using rule 90 (vacio -> .)

    operador_aritmetico            shift and go to state 142
    op_aritmetica_extra            shift and go to state 170
    vacio                          shift and go to state 144

state 165

    (82) op_aritmetica_extra -> operador_aritmetico PARIZQ . tipo_variable op_aritmetica_extra PARDER
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    tipo_variable                  shift and go to state 171
    llamado_funcion                shift and go to state 80

state 166

    (12) parametro_extra -> COMA NOMBRE . parametro_extra
    (12) parametro_extra -> . COMA NOMBRE parametro_extra
    (13) parametro_extra -> . vacio
    (90) vacio -> .

    COMA            shift and go to state 146
    PARDER          reduce using rule 90 (vacio -> .)

    parametro_extra                shift and go to state 172
    vacio                          shift and go to state 147

state 167

    (5) definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .

    LLAVEDER        reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    IF              reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    ELSE            reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    FOR             reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    WHILE           reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    PRINT           reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    READ            reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    DECVARIABLE     reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    NOMBRE          reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    RETURN          reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    INCREMENTAR     reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    DECREMENTAR     reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    PRIVATE         reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    PUBLIC          reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)
    NEWLINE         reduce using rule 5 (definicion_funcion -> dominio tipo_return NOMBRE PARIZQ parametro PARDER LLAVEIZQ .)


state 168

    (71) condicion_extra -> operador_logico tipo_variable . operador_condicional tipo_variable condicion_extra
    (64) operador_condicional -> . DIFERENTE
    (65) operador_condicional -> . IGUAL
    (66) operador_condicional -> . MAYOR
    (67) operador_condicional -> . MAYORIGUAL
    (68) operador_condicional -> . MENOR
    (69) operador_condicional -> . MENORIGUAL

    DIFERENTE       shift and go to state 111
    IGUAL           shift and go to state 112
    MAYOR           shift and go to state 113
    MAYORIGUAL      shift and go to state 114
    MENOR           shift and go to state 115
    MENORIGUAL      shift and go to state 116

    operador_condicional           shift and go to state 173

state 169

    (40) ciclo_for -> FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion . PUNTOYCOMA incdec PARDER LLAVEIZQ

    PUNTOYCOMA      shift and go to state 174


state 170

    (81) op_aritmetica_extra -> operador_aritmetico tipo_variable op_aritmetica_extra .

    NEWLINE         reduce using rule 81 (op_aritmetica_extra -> operador_aritmetico tipo_variable op_aritmetica_extra .)
    PARDER          reduce using rule 81 (op_aritmetica_extra -> operador_aritmetico tipo_variable op_aritmetica_extra .)


state 171

    (82) op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable . op_aritmetica_extra PARDER
    (81) op_aritmetica_extra -> . operador_aritmetico tipo_variable op_aritmetica_extra
    (82) op_aritmetica_extra -> . operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER
    (83) op_aritmetica_extra -> . vacio
    (84) operador_aritmetico -> . SUMA
    (85) operador_aritmetico -> . RESTA
    (86) operador_aritmetico -> . MULT
    (87) operador_aritmetico -> . DIV
    (90) vacio -> .

    SUMA            shift and go to state 104
    RESTA           shift and go to state 105
    MULT            shift and go to state 106
    DIV             shift and go to state 107
    PARDER          reduce using rule 90 (vacio -> .)

    operador_aritmetico            shift and go to state 142
    op_aritmetica_extra            shift and go to state 175
    vacio                          shift and go to state 144

state 172

    (12) parametro_extra -> COMA NOMBRE parametro_extra .

    PARDER          reduce using rule 12 (parametro_extra -> COMA NOMBRE parametro_extra .)


state 173

    (71) condicion_extra -> operador_logico tipo_variable operador_condicional . tipo_variable condicion_extra
    (73) tipo_variable -> . NOMBRE
    (74) tipo_variable -> . DOUBLE
    (75) tipo_variable -> . INT
    (76) tipo_variable -> . STRING
    (77) tipo_variable -> . FALSE
    (78) tipo_variable -> . TRUE
    (79) tipo_variable -> . llamado_funcion
    (14) llamado_funcion -> . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 74
    DOUBLE          shift and go to state 75
    INT             shift and go to state 76
    STRING          shift and go to state 77
    FALSE           shift and go to state 78
    TRUE            shift and go to state 79

    tipo_variable                  shift and go to state 176
    llamado_funcion                shift and go to state 80

state 174

    (40) ciclo_for -> FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA . incdec PARDER LLAVEIZQ
    (41) incdec -> . pre_incdec
    (42) incdec -> . post_incdec
    (43) pre_incdec -> . INCREMENTAR NOMBRE
    (44) pre_incdec -> . DECREMENTAR NOMBRE
    (45) post_incdec -> . NOMBRE INCREMENTAR
    (46) post_incdec -> . NOMBRE DECREMENTAR

    INCREMENTAR     shift and go to state 35
    DECREMENTAR     shift and go to state 36
    NOMBRE          shift and go to state 178

    incdec                         shift and go to state 177
    pre_incdec                     shift and go to state 32
    post_incdec                    shift and go to state 33

state 175

    (82) op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra . PARDER

    PARDER          shift and go to state 179


state 176

    (71) condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable . condicion_extra
    (71) condicion_extra -> . operador_logico tipo_variable operador_condicional tipo_variable condicion_extra
    (72) condicion_extra -> . vacio
    (88) operador_logico -> . AND
    (89) operador_logico -> . OR
    (90) vacio -> .

    AND             shift and go to state 152
    OR              shift and go to state 153
    PARDER          reduce using rule 90 (vacio -> .)
    PUNTOYCOMA      reduce using rule 90 (vacio -> .)

    operador_logico                shift and go to state 150
    condicion_extra                shift and go to state 180
    vacio                          shift and go to state 151

state 177

    (40) ciclo_for -> FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec . PARDER LLAVEIZQ

    PARDER          shift and go to state 181


state 178

    (45) post_incdec -> NOMBRE . INCREMENTAR
    (46) post_incdec -> NOMBRE . DECREMENTAR

    INCREMENTAR     shift and go to state 70
    DECREMENTAR     shift and go to state 71


state 179

    (82) op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER .

    NEWLINE         reduce using rule 82 (op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER .)
    PARDER          reduce using rule 82 (op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER .)


state 180

    (71) condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra .

    PARDER          reduce using rule 71 (condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra .)
    PUNTOYCOMA      reduce using rule 71 (condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra .)


state 181

    (40) ciclo_for -> FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER . LLAVEIZQ

    LLAVEIZQ        shift and go to state 182


state 182

    (40) ciclo_for -> FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER LLAVEIZQ .

    NEWLINE         reduce using rule 40 (ciclo_for -> FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER LLAVEIZQ .)

