Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Niark
Rule 1     Niark -> methodDefinition NEWLINE Niark
Rule 2     Niark -> instruction NEWLINE Niark
Rule 3     Niark -> methodDefinition
Rule 4     Niark -> instruction
Rule 5     methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
Rule 6     methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
Rule 7     instructions -> instruction NEWLINE instructions
Rule 8     instructions -> empty
Rule 9     instruction -> simple
Rule 10    instruction -> complex
Rule 11    simple -> asignation
Rule 12    simple -> declaration
Rule 13    simple -> read
Rule 14    simple -> print
Rule 15    simple -> functionCall
Rule 16    simple -> return
Rule 17    simple -> incdec
Rule 18    asignation -> NAME ASIGNATION dataTypeAsignation
Rule 19    asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
Rule 20    declaration -> VARDECLARATION
Rule 21    declaration -> VARDECLARATION ASIGNATION dataTypeAsignation
Rule 22    declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
Rule 23    dataTypeAsignation -> variable
Rule 24    dataTypeAsignation -> variableType
Rule 25    dataTypeAsignation -> arithmetic
Rule 26    read -> READ LEFTPAR NAME RIGHTPAR
Rule 27    print -> PRINT LEFTPAR sendingVariables RIGHTPAR
Rule 28    functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR
Rule 29    functionCall -> NAME LEFTPAR empty RIGHTPAR
Rule 30    return -> RETURN sendingVariable
Rule 31    complex -> ifCondition
Rule 32    complex -> forCondition
Rule 33    complex -> whileCondition
Rule 34    ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
Rule 35    ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
Rule 36    forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
Rule 37    whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
Rule 38    conditionals -> condition
Rule 39    conditionals -> condition conditionalOp conditionals
Rule 40    conditionals -> LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
Rule 41    conditionals -> LEFTPAR conditionals RIGHTPAR
Rule 42    condition -> sendingVariable conditionOp sendingVariable
Rule 43    incdec -> preIncdec
Rule 44    incdec -> postIncdec
Rule 45    preIncdec -> INCREASE variable
Rule 46    preIncdec -> DECREASE variable
Rule 47    postIncdec -> variable INCREASE
Rule 48    postIncdec -> variable DECREASE
Rule 49    conditionalOp -> AND
Rule 50    conditionalOp -> OR
Rule 51    conditionOp -> EQUALS
Rule 52    conditionOp -> DIFFERENT
Rule 53    conditionOp -> LESSER
Rule 54    conditionOp -> GREATER
Rule 55    conditionOp -> LESSEREQUAL
Rule 56    conditionOp -> GREATEREQUAL
Rule 57    domain -> PUBLIC
Rule 58    domain -> PRIVATE
Rule 59    methodType -> VOID
Rule 60    methodType -> FUNCTION
Rule 61    parameters -> NAME COMMA parameters
Rule 62    parameters -> NAME
Rule 63    sendingVariables -> sendingVariable COMMA sendingVariables
Rule 64    sendingVariables -> sendingVariable
Rule 65    sendingVariable -> variableType
Rule 66    sendingVariable -> arithmetic
Rule 67    sendingVariable -> variable
Rule 68    sendingVariable -> functionCall
Rule 69    variable -> NAME
Rule 70    variable -> vectorVariable
Rule 71    vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
Rule 72    dataLocalizatorType -> INT
Rule 73    dataLocalizatorType -> variable
Rule 74    dataLocalizatorType -> arithmetic
Rule 75    variableType -> numberType
Rule 76    variableType -> stringType
Rule 77    variableType -> booleanType
Rule 78    numberType -> INT
Rule 79    numberType -> DOUBLE
Rule 80    stringType -> STRING
Rule 81    booleanType -> FALSE
Rule 82    booleanType -> TRUE
Rule 83    arithmetic -> moreArithmetic arithmeticOp arithmeticDataType
Rule 84    arithmetic -> LEFTPAR arithmetic RIGHTPAR
Rule 85    arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
Rule 86    arithmetic -> arithmeticOp arithmeticDataType
Rule 87    moreArithmetic -> arithmeticDataType
Rule 88    moreArithmetic -> arithmetic
Rule 89    arithmeticDataType -> numberType
Rule 90    arithmeticDataType -> variable
Rule 91    arithmeticDataType -> functionCall
Rule 92    arithmeticOp -> SUM
Rule 93    arithmeticOp -> SUBSTRACTION
Rule 94    arithmeticOp -> MULTIPLICATION
Rule 95    arithmeticOp -> DIVISION
Rule 96    empty -> <empty>

Terminals, with rules where they appear

AND                  : 49
ASIGNATION           : 18 19 21
COMMA                : 61 63
DECREASE             : 46 48
DIFFERENT            : 52
DIVISION             : 95
DOUBLE               : 79
ELSE                 : 35
EQUALS               : 51
FALSE                : 81
FOR                  : 36
FUNCTION             : 60
GREATER              : 54
GREATEREQUAL         : 56
IF                   : 34 35
INCREASE             : 45 47
INT                  : 72 78
LEFTBRACKET          : 19 22 71
LEFTKEY              : 5 6 34 35 35 36 37
LEFTPAR              : 5 6 26 27 28 29 34 35 36 37 40 41 84 85
LESSER               : 53
LESSEREQUAL          : 55
MULTIPLICATION       : 94
NAME                 : 5 6 18 19 26 28 29 61 62 69 71
NEWLINE              : 1 2 5 6 7 34 35 35 36 37
OR                   : 50
PRINT                : 27
PRIVATE              : 58
PUBLIC               : 57
READ                 : 26
RETURN               : 30
RIGHTBRACKET         : 19 22 71
RIGHTKEY             : 5 6 34 35 35 36 37
RIGHTPAR             : 5 6 26 27 28 29 34 35 36 37 40 41 84 85
SEMICOLON            : 36 36
STRING               : 80
SUBSTRACTION         : 93
SUM                  : 92
TRUE                 : 82
VARDECLARATION       : 20 21 22
VOID                 : 59
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

Niark                : 1 2 0
arithmetic           : 25 66 74 84 85 88
arithmeticDataType   : 83 86 87
arithmeticOp         : 83 85 86
asignation           : 11
booleanType          : 77
complex              : 10
condition            : 38 39
conditionOp          : 42
conditionalOp        : 39 40
conditionals         : 34 35 36 37 39 40 40 41
dataLocalizatorType  : 19 22 71
dataTypeAsignation   : 18 19 21
declaration          : 12 36
domain               : 5 6
empty                : 8 29
forCondition         : 32
functionCall         : 15 68 91
ifCondition          : 31
incdec               : 17 36
instruction          : 2 4 7
instructions         : 5 6 7 34 35 35 36 37
methodDefinition     : 1 3
methodType           : 5 6
moreArithmetic       : 83 85
numberType           : 75 89
parameters           : 5 61
postIncdec           : 44
preIncdec            : 43
print                : 14
read                 : 13
return               : 16
sendingVariable      : 30 42 42 63 64
sendingVariables     : 27 28 63
simple               : 9
stringType           : 76
variable             : 23 45 46 47 48 67 73 90
variableType         : 24 65
vectorVariable       : 70
whileCondition       : 33

Parsing method: LALR

state 0

    (0) S' -> . Niark
    (1) Niark -> . methodDefinition NEWLINE Niark
    (2) Niark -> . instruction NEWLINE Niark
    (3) Niark -> . methodDefinition
    (4) Niark -> . instruction
    (5) methodDefinition -> . domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (6) methodDefinition -> . domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (9) instruction -> . simple
    (10) instruction -> . complex
    (57) domain -> . PUBLIC
    (58) domain -> . PRIVATE
    (11) simple -> . asignation
    (12) simple -> . declaration
    (13) simple -> . read
    (14) simple -> . print
    (15) simple -> . functionCall
    (16) simple -> . return
    (17) simple -> . incdec
    (31) complex -> . ifCondition
    (32) complex -> . forCondition
    (33) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (26) read -> . READ LEFTPAR NAME RIGHTPAR
    (27) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (30) return -> . RETURN sendingVariable
    (43) incdec -> . preIncdec
    (44) incdec -> . postIncdec
    (34) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (36) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (37) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (45) preIncdec -> . INCREASE variable
    (46) preIncdec -> . DECREASE variable
    (47) postIncdec -> . variable INCREASE
    (48) postIncdec -> . variable DECREASE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    PUBLIC          shift and go to state 8
    PRIVATE         shift and go to state 9
    NAME            shift and go to state 5
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    INCREASE        shift and go to state 29
    DECREASE        shift and go to state 31

    Niark                          shift and go to state 1
    methodDefinition               shift and go to state 2
    instruction                    shift and go to state 3
    domain                         shift and go to state 4
    simple                         shift and go to state 6
    complex                        shift and go to state 7
    asignation                     shift and go to state 10
    declaration                    shift and go to state 11
    read                           shift and go to state 12
    print                          shift and go to state 13
    functionCall                   shift and go to state 14
    return                         shift and go to state 15
    incdec                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19
    preIncdec                      shift and go to state 24
    postIncdec                     shift and go to state 25
    variable                       shift and go to state 30
    vectorVariable                 shift and go to state 32

state 1

    (0) S' -> Niark .



state 2

    (1) Niark -> methodDefinition . NEWLINE Niark
    (3) Niark -> methodDefinition .

    NEWLINE         shift and go to state 33
    $end            reduce using rule 3 (Niark -> methodDefinition .)


state 3

    (2) Niark -> instruction . NEWLINE Niark
    (4) Niark -> instruction .

    NEWLINE         shift and go to state 34
    $end            reduce using rule 4 (Niark -> instruction .)


state 4

    (5) methodDefinition -> domain . methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (6) methodDefinition -> domain . methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (59) methodType -> . VOID
    (60) methodType -> . FUNCTION

    VOID            shift and go to state 36
    FUNCTION        shift and go to state 37

    methodType                     shift and go to state 35

state 5

    (18) asignation -> NAME . ASIGNATION dataTypeAsignation
    (19) asignation -> NAME . LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (28) functionCall -> NAME . LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> NAME . LEFTPAR empty RIGHTPAR
    (69) variable -> NAME .
    (71) vectorVariable -> NAME . LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    ASIGNATION      shift and go to state 38
    LEFTBRACKET     shift and go to state 39
    LEFTPAR         shift and go to state 40
    INCREASE        reduce using rule 69 (variable -> NAME .)
    DECREASE        reduce using rule 69 (variable -> NAME .)


state 6

    (9) instruction -> simple .

    NEWLINE         reduce using rule 9 (instruction -> simple .)
    $end            reduce using rule 9 (instruction -> simple .)


state 7

    (10) instruction -> complex .

    NEWLINE         reduce using rule 10 (instruction -> complex .)
    $end            reduce using rule 10 (instruction -> complex .)


state 8

    (57) domain -> PUBLIC .

    VOID            reduce using rule 57 (domain -> PUBLIC .)
    FUNCTION        reduce using rule 57 (domain -> PUBLIC .)


state 9

    (58) domain -> PRIVATE .

    VOID            reduce using rule 58 (domain -> PRIVATE .)
    FUNCTION        reduce using rule 58 (domain -> PRIVATE .)


state 10

    (11) simple -> asignation .

    NEWLINE         reduce using rule 11 (simple -> asignation .)
    $end            reduce using rule 11 (simple -> asignation .)


state 11

    (12) simple -> declaration .

    NEWLINE         reduce using rule 12 (simple -> declaration .)
    $end            reduce using rule 12 (simple -> declaration .)


state 12

    (13) simple -> read .

    NEWLINE         reduce using rule 13 (simple -> read .)
    $end            reduce using rule 13 (simple -> read .)


state 13

    (14) simple -> print .

    NEWLINE         reduce using rule 14 (simple -> print .)
    $end            reduce using rule 14 (simple -> print .)


state 14

    (15) simple -> functionCall .

    NEWLINE         reduce using rule 15 (simple -> functionCall .)
    $end            reduce using rule 15 (simple -> functionCall .)


state 15

    (16) simple -> return .

    NEWLINE         reduce using rule 16 (simple -> return .)
    $end            reduce using rule 16 (simple -> return .)


state 16

    (17) simple -> incdec .

    NEWLINE         reduce using rule 17 (simple -> incdec .)
    $end            reduce using rule 17 (simple -> incdec .)


state 17

    (31) complex -> ifCondition .

    NEWLINE         reduce using rule 31 (complex -> ifCondition .)
    $end            reduce using rule 31 (complex -> ifCondition .)


state 18

    (32) complex -> forCondition .

    NEWLINE         reduce using rule 32 (complex -> forCondition .)
    $end            reduce using rule 32 (complex -> forCondition .)


state 19

    (33) complex -> whileCondition .

    NEWLINE         reduce using rule 33 (complex -> whileCondition .)
    $end            reduce using rule 33 (complex -> whileCondition .)


state 20

    (20) declaration -> VARDECLARATION .
    (21) declaration -> VARDECLARATION . ASIGNATION dataTypeAsignation
    (22) declaration -> VARDECLARATION . LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    NEWLINE         reduce using rule 20 (declaration -> VARDECLARATION .)
    $end            reduce using rule 20 (declaration -> VARDECLARATION .)
    SEMICOLON       reduce using rule 20 (declaration -> VARDECLARATION .)
    ASIGNATION      shift and go to state 41
    LEFTBRACKET     shift and go to state 42


state 21

    (26) read -> READ . LEFTPAR NAME RIGHTPAR

    LEFTPAR         shift and go to state 43


state 22

    (27) print -> PRINT . LEFTPAR sendingVariables RIGHTPAR

    LEFTPAR         shift and go to state 44


state 23

    (30) return -> RETURN . sendingVariable
    (65) sendingVariable -> . variableType
    (66) sendingVariable -> . arithmetic
    (67) sendingVariable -> . variable
    (68) sendingVariable -> . functionCall
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 56
    NAME            shift and go to state 57
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    sendingVariable                shift and go to state 45
    variableType                   shift and go to state 46
    arithmetic                     shift and go to state 47
    variable                       shift and go to state 48
    functionCall                   shift and go to state 49
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    vectorVariable                 shift and go to state 32

state 24

    (43) incdec -> preIncdec .

    NEWLINE         reduce using rule 43 (incdec -> preIncdec .)
    $end            reduce using rule 43 (incdec -> preIncdec .)
    RIGHTPAR        reduce using rule 43 (incdec -> preIncdec .)


state 25

    (44) incdec -> postIncdec .

    NEWLINE         reduce using rule 44 (incdec -> postIncdec .)
    $end            reduce using rule 44 (incdec -> postIncdec .)
    RIGHTPAR        reduce using rule 44 (incdec -> postIncdec .)


state 26

    (34) ifCondition -> IF . LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> IF . LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTPAR         shift and go to state 67


state 27

    (36) forCondition -> FOR . LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTPAR         shift and go to state 68


state 28

    (37) whileCondition -> WHILE . LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTPAR         shift and go to state 69


state 29

    (45) preIncdec -> INCREASE . variable
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    NAME            shift and go to state 71

    variable                       shift and go to state 70
    vectorVariable                 shift and go to state 32

state 30

    (47) postIncdec -> variable . INCREASE
    (48) postIncdec -> variable . DECREASE

    INCREASE        shift and go to state 72
    DECREASE        shift and go to state 73


state 31

    (46) preIncdec -> DECREASE . variable
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    NAME            shift and go to state 71

    variable                       shift and go to state 74
    vectorVariable                 shift and go to state 32

state 32

    (70) variable -> vectorVariable .

    INCREASE        reduce using rule 70 (variable -> vectorVariable .)
    DECREASE        reduce using rule 70 (variable -> vectorVariable .)
    NEWLINE         reduce using rule 70 (variable -> vectorVariable .)
    $end            reduce using rule 70 (variable -> vectorVariable .)
    SUM             reduce using rule 70 (variable -> vectorVariable .)
    SUBSTRACTION    reduce using rule 70 (variable -> vectorVariable .)
    MULTIPLICATION  reduce using rule 70 (variable -> vectorVariable .)
    DIVISION        reduce using rule 70 (variable -> vectorVariable .)
    RIGHTPAR        reduce using rule 70 (variable -> vectorVariable .)
    RIGHTBRACKET    reduce using rule 70 (variable -> vectorVariable .)
    COMMA           reduce using rule 70 (variable -> vectorVariable .)
    SEMICOLON       reduce using rule 70 (variable -> vectorVariable .)
    EQUALS          reduce using rule 70 (variable -> vectorVariable .)
    DIFFERENT       reduce using rule 70 (variable -> vectorVariable .)
    LESSER          reduce using rule 70 (variable -> vectorVariable .)
    GREATER         reduce using rule 70 (variable -> vectorVariable .)
    LESSEREQUAL     reduce using rule 70 (variable -> vectorVariable .)
    GREATEREQUAL    reduce using rule 70 (variable -> vectorVariable .)
    AND             reduce using rule 70 (variable -> vectorVariable .)
    OR              reduce using rule 70 (variable -> vectorVariable .)


state 33

    (1) Niark -> methodDefinition NEWLINE . Niark
    (1) Niark -> . methodDefinition NEWLINE Niark
    (2) Niark -> . instruction NEWLINE Niark
    (3) Niark -> . methodDefinition
    (4) Niark -> . instruction
    (5) methodDefinition -> . domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (6) methodDefinition -> . domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (9) instruction -> . simple
    (10) instruction -> . complex
    (57) domain -> . PUBLIC
    (58) domain -> . PRIVATE
    (11) simple -> . asignation
    (12) simple -> . declaration
    (13) simple -> . read
    (14) simple -> . print
    (15) simple -> . functionCall
    (16) simple -> . return
    (17) simple -> . incdec
    (31) complex -> . ifCondition
    (32) complex -> . forCondition
    (33) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (26) read -> . READ LEFTPAR NAME RIGHTPAR
    (27) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (30) return -> . RETURN sendingVariable
    (43) incdec -> . preIncdec
    (44) incdec -> . postIncdec
    (34) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (36) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (37) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (45) preIncdec -> . INCREASE variable
    (46) preIncdec -> . DECREASE variable
    (47) postIncdec -> . variable INCREASE
    (48) postIncdec -> . variable DECREASE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    PUBLIC          shift and go to state 8
    PRIVATE         shift and go to state 9
    NAME            shift and go to state 5
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    INCREASE        shift and go to state 29
    DECREASE        shift and go to state 31

    methodDefinition               shift and go to state 2
    Niark                          shift and go to state 75
    instruction                    shift and go to state 3
    domain                         shift and go to state 4
    simple                         shift and go to state 6
    complex                        shift and go to state 7
    asignation                     shift and go to state 10
    declaration                    shift and go to state 11
    read                           shift and go to state 12
    print                          shift and go to state 13
    functionCall                   shift and go to state 14
    return                         shift and go to state 15
    incdec                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19
    preIncdec                      shift and go to state 24
    postIncdec                     shift and go to state 25
    variable                       shift and go to state 30
    vectorVariable                 shift and go to state 32

state 34

    (2) Niark -> instruction NEWLINE . Niark
    (1) Niark -> . methodDefinition NEWLINE Niark
    (2) Niark -> . instruction NEWLINE Niark
    (3) Niark -> . methodDefinition
    (4) Niark -> . instruction
    (5) methodDefinition -> . domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (6) methodDefinition -> . domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (9) instruction -> . simple
    (10) instruction -> . complex
    (57) domain -> . PUBLIC
    (58) domain -> . PRIVATE
    (11) simple -> . asignation
    (12) simple -> . declaration
    (13) simple -> . read
    (14) simple -> . print
    (15) simple -> . functionCall
    (16) simple -> . return
    (17) simple -> . incdec
    (31) complex -> . ifCondition
    (32) complex -> . forCondition
    (33) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (26) read -> . READ LEFTPAR NAME RIGHTPAR
    (27) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (30) return -> . RETURN sendingVariable
    (43) incdec -> . preIncdec
    (44) incdec -> . postIncdec
    (34) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (36) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (37) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (45) preIncdec -> . INCREASE variable
    (46) preIncdec -> . DECREASE variable
    (47) postIncdec -> . variable INCREASE
    (48) postIncdec -> . variable DECREASE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    PUBLIC          shift and go to state 8
    PRIVATE         shift and go to state 9
    NAME            shift and go to state 5
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    INCREASE        shift and go to state 29
    DECREASE        shift and go to state 31

    instruction                    shift and go to state 3
    Niark                          shift and go to state 76
    methodDefinition               shift and go to state 2
    domain                         shift and go to state 4
    simple                         shift and go to state 6
    complex                        shift and go to state 7
    asignation                     shift and go to state 10
    declaration                    shift and go to state 11
    read                           shift and go to state 12
    print                          shift and go to state 13
    functionCall                   shift and go to state 14
    return                         shift and go to state 15
    incdec                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19
    preIncdec                      shift and go to state 24
    postIncdec                     shift and go to state 25
    variable                       shift and go to state 30
    vectorVariable                 shift and go to state 32

state 35

    (5) methodDefinition -> domain methodType . NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (6) methodDefinition -> domain methodType . NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    NAME            shift and go to state 77


state 36

    (59) methodType -> VOID .

    NAME            reduce using rule 59 (methodType -> VOID .)


state 37

    (60) methodType -> FUNCTION .

    NAME            reduce using rule 60 (methodType -> FUNCTION .)


state 38

    (18) asignation -> NAME ASIGNATION . dataTypeAsignation
    (23) dataTypeAsignation -> . variable
    (24) dataTypeAsignation -> . variableType
    (25) dataTypeAsignation -> . arithmetic
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    NAME            shift and go to state 78
    LEFTPAR         shift and go to state 56
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    dataTypeAsignation             shift and go to state 79
    variable                       shift and go to state 80
    variableType                   shift and go to state 81
    arithmetic                     shift and go to state 82
    vectorVariable                 shift and go to state 32
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    functionCall                   shift and go to state 83

state 39

    (19) asignation -> NAME LEFTBRACKET . dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (71) vectorVariable -> NAME LEFTBRACKET . dataLocalizatorType RIGHTBRACKET
    (72) dataLocalizatorType -> . INT
    (73) dataLocalizatorType -> . variable
    (74) dataLocalizatorType -> . arithmetic
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    INT             shift and go to state 85
    NAME            shift and go to state 78
    LEFTPAR         shift and go to state 56
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66
    DOUBLE          shift and go to state 59

    dataLocalizatorType            shift and go to state 84
    variable                       shift and go to state 86
    arithmetic                     shift and go to state 87
    vectorVariable                 shift and go to state 32
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    numberType                     shift and go to state 88
    functionCall                   shift and go to state 83

state 40

    (28) functionCall -> NAME LEFTPAR . sendingVariables RIGHTPAR
    (29) functionCall -> NAME LEFTPAR . empty RIGHTPAR
    (63) sendingVariables -> . sendingVariable COMMA sendingVariables
    (64) sendingVariables -> . sendingVariable
    (96) empty -> .
    (65) sendingVariable -> . variableType
    (66) sendingVariable -> . arithmetic
    (67) sendingVariable -> . variable
    (68) sendingVariable -> . functionCall
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall

    RIGHTPAR        reduce using rule 96 (empty -> .)
    LEFTPAR         shift and go to state 56
    NAME            shift and go to state 57
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    sendingVariables               shift and go to state 89
    empty                          shift and go to state 90
    sendingVariable                shift and go to state 91
    variableType                   shift and go to state 46
    arithmetic                     shift and go to state 47
    variable                       shift and go to state 48
    functionCall                   shift and go to state 49
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    vectorVariable                 shift and go to state 32

state 41

    (21) declaration -> VARDECLARATION ASIGNATION . dataTypeAsignation
    (23) dataTypeAsignation -> . variable
    (24) dataTypeAsignation -> . variableType
    (25) dataTypeAsignation -> . arithmetic
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    NAME            shift and go to state 78
    LEFTPAR         shift and go to state 56
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    dataTypeAsignation             shift and go to state 92
    variable                       shift and go to state 80
    variableType                   shift and go to state 81
    arithmetic                     shift and go to state 82
    vectorVariable                 shift and go to state 32
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    functionCall                   shift and go to state 83

state 42

    (22) declaration -> VARDECLARATION LEFTBRACKET . dataLocalizatorType RIGHTBRACKET
    (72) dataLocalizatorType -> . INT
    (73) dataLocalizatorType -> . variable
    (74) dataLocalizatorType -> . arithmetic
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    INT             shift and go to state 85
    NAME            shift and go to state 78
    LEFTPAR         shift and go to state 56
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66
    DOUBLE          shift and go to state 59

    dataLocalizatorType            shift and go to state 93
    variable                       shift and go to state 86
    arithmetic                     shift and go to state 87
    vectorVariable                 shift and go to state 32
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    numberType                     shift and go to state 88
    functionCall                   shift and go to state 83

state 43

    (26) read -> READ LEFTPAR . NAME RIGHTPAR

    NAME            shift and go to state 94


state 44

    (27) print -> PRINT LEFTPAR . sendingVariables RIGHTPAR
    (63) sendingVariables -> . sendingVariable COMMA sendingVariables
    (64) sendingVariables -> . sendingVariable
    (65) sendingVariable -> . variableType
    (66) sendingVariable -> . arithmetic
    (67) sendingVariable -> . variable
    (68) sendingVariable -> . functionCall
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 56
    NAME            shift and go to state 57
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    sendingVariables               shift and go to state 95
    sendingVariable                shift and go to state 91
    variableType                   shift and go to state 46
    arithmetic                     shift and go to state 47
    variable                       shift and go to state 48
    functionCall                   shift and go to state 49
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    vectorVariable                 shift and go to state 32

state 45

    (30) return -> RETURN sendingVariable .

    NEWLINE         reduce using rule 30 (return -> RETURN sendingVariable .)
    $end            reduce using rule 30 (return -> RETURN sendingVariable .)


state 46

    (65) sendingVariable -> variableType .

    NEWLINE         reduce using rule 65 (sendingVariable -> variableType .)
    $end            reduce using rule 65 (sendingVariable -> variableType .)
    COMMA           reduce using rule 65 (sendingVariable -> variableType .)
    RIGHTPAR        reduce using rule 65 (sendingVariable -> variableType .)
    EQUALS          reduce using rule 65 (sendingVariable -> variableType .)
    DIFFERENT       reduce using rule 65 (sendingVariable -> variableType .)
    LESSER          reduce using rule 65 (sendingVariable -> variableType .)
    GREATER         reduce using rule 65 (sendingVariable -> variableType .)
    LESSEREQUAL     reduce using rule 65 (sendingVariable -> variableType .)
    GREATEREQUAL    reduce using rule 65 (sendingVariable -> variableType .)
    AND             reduce using rule 65 (sendingVariable -> variableType .)
    OR              reduce using rule 65 (sendingVariable -> variableType .)
    SEMICOLON       reduce using rule 65 (sendingVariable -> variableType .)


state 47

    (66) sendingVariable -> arithmetic .
    (88) moreArithmetic -> arithmetic .

    NEWLINE         reduce using rule 66 (sendingVariable -> arithmetic .)
    $end            reduce using rule 66 (sendingVariable -> arithmetic .)
    COMMA           reduce using rule 66 (sendingVariable -> arithmetic .)
    RIGHTPAR        reduce using rule 66 (sendingVariable -> arithmetic .)
    EQUALS          reduce using rule 66 (sendingVariable -> arithmetic .)
    DIFFERENT       reduce using rule 66 (sendingVariable -> arithmetic .)
    LESSER          reduce using rule 66 (sendingVariable -> arithmetic .)
    GREATER         reduce using rule 66 (sendingVariable -> arithmetic .)
    LESSEREQUAL     reduce using rule 66 (sendingVariable -> arithmetic .)
    GREATEREQUAL    reduce using rule 66 (sendingVariable -> arithmetic .)
    AND             reduce using rule 66 (sendingVariable -> arithmetic .)
    OR              reduce using rule 66 (sendingVariable -> arithmetic .)
    SEMICOLON       reduce using rule 66 (sendingVariable -> arithmetic .)
    SUM             reduce using rule 88 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 88 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 88 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 88 (moreArithmetic -> arithmetic .)


state 48

    (67) sendingVariable -> variable .
    (90) arithmeticDataType -> variable .

    NEWLINE         reduce using rule 67 (sendingVariable -> variable .)
    $end            reduce using rule 67 (sendingVariable -> variable .)
    COMMA           reduce using rule 67 (sendingVariable -> variable .)
    RIGHTPAR        reduce using rule 67 (sendingVariable -> variable .)
    EQUALS          reduce using rule 67 (sendingVariable -> variable .)
    DIFFERENT       reduce using rule 67 (sendingVariable -> variable .)
    LESSER          reduce using rule 67 (sendingVariable -> variable .)
    GREATER         reduce using rule 67 (sendingVariable -> variable .)
    LESSEREQUAL     reduce using rule 67 (sendingVariable -> variable .)
    GREATEREQUAL    reduce using rule 67 (sendingVariable -> variable .)
    AND             reduce using rule 67 (sendingVariable -> variable .)
    OR              reduce using rule 67 (sendingVariable -> variable .)
    SEMICOLON       reduce using rule 67 (sendingVariable -> variable .)
    SUM             reduce using rule 90 (arithmeticDataType -> variable .)
    SUBSTRACTION    reduce using rule 90 (arithmeticDataType -> variable .)
    MULTIPLICATION  reduce using rule 90 (arithmeticDataType -> variable .)
    DIVISION        reduce using rule 90 (arithmeticDataType -> variable .)


state 49

    (68) sendingVariable -> functionCall .
    (91) arithmeticDataType -> functionCall .

    NEWLINE         reduce using rule 68 (sendingVariable -> functionCall .)
    $end            reduce using rule 68 (sendingVariable -> functionCall .)
    COMMA           reduce using rule 68 (sendingVariable -> functionCall .)
    RIGHTPAR        reduce using rule 68 (sendingVariable -> functionCall .)
    EQUALS          reduce using rule 68 (sendingVariable -> functionCall .)
    DIFFERENT       reduce using rule 68 (sendingVariable -> functionCall .)
    LESSER          reduce using rule 68 (sendingVariable -> functionCall .)
    GREATER         reduce using rule 68 (sendingVariable -> functionCall .)
    LESSEREQUAL     reduce using rule 68 (sendingVariable -> functionCall .)
    GREATEREQUAL    reduce using rule 68 (sendingVariable -> functionCall .)
    AND             reduce using rule 68 (sendingVariable -> functionCall .)
    OR              reduce using rule 68 (sendingVariable -> functionCall .)
    SEMICOLON       reduce using rule 68 (sendingVariable -> functionCall .)
    SUM             reduce using rule 91 (arithmeticDataType -> functionCall .)
    SUBSTRACTION    reduce using rule 91 (arithmeticDataType -> functionCall .)
    MULTIPLICATION  reduce using rule 91 (arithmeticDataType -> functionCall .)
    DIVISION        reduce using rule 91 (arithmeticDataType -> functionCall .)


state 50

    (75) variableType -> numberType .
    (89) arithmeticDataType -> numberType .

    NEWLINE         reduce using rule 75 (variableType -> numberType .)
    $end            reduce using rule 75 (variableType -> numberType .)
    COMMA           reduce using rule 75 (variableType -> numberType .)
    RIGHTPAR        reduce using rule 75 (variableType -> numberType .)
    SEMICOLON       reduce using rule 75 (variableType -> numberType .)
    EQUALS          reduce using rule 75 (variableType -> numberType .)
    DIFFERENT       reduce using rule 75 (variableType -> numberType .)
    LESSER          reduce using rule 75 (variableType -> numberType .)
    GREATER         reduce using rule 75 (variableType -> numberType .)
    LESSEREQUAL     reduce using rule 75 (variableType -> numberType .)
    GREATEREQUAL    reduce using rule 75 (variableType -> numberType .)
    AND             reduce using rule 75 (variableType -> numberType .)
    OR              reduce using rule 75 (variableType -> numberType .)
    SUM             reduce using rule 89 (arithmeticDataType -> numberType .)
    SUBSTRACTION    reduce using rule 89 (arithmeticDataType -> numberType .)
    MULTIPLICATION  reduce using rule 89 (arithmeticDataType -> numberType .)
    DIVISION        reduce using rule 89 (arithmeticDataType -> numberType .)


state 51

    (76) variableType -> stringType .

    NEWLINE         reduce using rule 76 (variableType -> stringType .)
    $end            reduce using rule 76 (variableType -> stringType .)
    COMMA           reduce using rule 76 (variableType -> stringType .)
    RIGHTPAR        reduce using rule 76 (variableType -> stringType .)
    SEMICOLON       reduce using rule 76 (variableType -> stringType .)
    EQUALS          reduce using rule 76 (variableType -> stringType .)
    DIFFERENT       reduce using rule 76 (variableType -> stringType .)
    LESSER          reduce using rule 76 (variableType -> stringType .)
    GREATER         reduce using rule 76 (variableType -> stringType .)
    LESSEREQUAL     reduce using rule 76 (variableType -> stringType .)
    GREATEREQUAL    reduce using rule 76 (variableType -> stringType .)
    AND             reduce using rule 76 (variableType -> stringType .)
    OR              reduce using rule 76 (variableType -> stringType .)


state 52

    (77) variableType -> booleanType .

    NEWLINE         reduce using rule 77 (variableType -> booleanType .)
    $end            reduce using rule 77 (variableType -> booleanType .)
    COMMA           reduce using rule 77 (variableType -> booleanType .)
    RIGHTPAR        reduce using rule 77 (variableType -> booleanType .)
    SEMICOLON       reduce using rule 77 (variableType -> booleanType .)
    EQUALS          reduce using rule 77 (variableType -> booleanType .)
    DIFFERENT       reduce using rule 77 (variableType -> booleanType .)
    LESSER          reduce using rule 77 (variableType -> booleanType .)
    GREATER         reduce using rule 77 (variableType -> booleanType .)
    LESSEREQUAL     reduce using rule 77 (variableType -> booleanType .)
    GREATEREQUAL    reduce using rule 77 (variableType -> booleanType .)
    AND             reduce using rule 77 (variableType -> booleanType .)
    OR              reduce using rule 77 (variableType -> booleanType .)


state 53

    (83) arithmetic -> moreArithmetic . arithmeticOp arithmeticDataType
    (85) arithmetic -> moreArithmetic . arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION

    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    arithmeticOp                   shift and go to state 96

state 54

    (86) arithmetic -> arithmeticOp . arithmeticDataType
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    NAME            shift and go to state 57

    arithmeticDataType             shift and go to state 97
    numberType                     shift and go to state 88
    variable                       shift and go to state 98
    functionCall                   shift and go to state 83
    vectorVariable                 shift and go to state 32

state 55

    (87) moreArithmetic -> arithmeticDataType .

    SUM             reduce using rule 87 (moreArithmetic -> arithmeticDataType .)
    SUBSTRACTION    reduce using rule 87 (moreArithmetic -> arithmeticDataType .)
    MULTIPLICATION  reduce using rule 87 (moreArithmetic -> arithmeticDataType .)
    DIVISION        reduce using rule 87 (moreArithmetic -> arithmeticDataType .)


state 56

    (84) arithmetic -> LEFTPAR . arithmetic RIGHTPAR
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    LEFTPAR         shift and go to state 56
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    NAME            shift and go to state 57

    arithmetic                     shift and go to state 99
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    numberType                     shift and go to state 88
    variable                       shift and go to state 98
    functionCall                   shift and go to state 83
    vectorVariable                 shift and go to state 32

state 57

    (69) variable -> NAME .
    (28) functionCall -> NAME . LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> NAME . LEFTPAR empty RIGHTPAR
    (71) vectorVariable -> NAME . LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    NEWLINE         reduce using rule 69 (variable -> NAME .)
    $end            reduce using rule 69 (variable -> NAME .)
    SUM             reduce using rule 69 (variable -> NAME .)
    SUBSTRACTION    reduce using rule 69 (variable -> NAME .)
    MULTIPLICATION  reduce using rule 69 (variable -> NAME .)
    DIVISION        reduce using rule 69 (variable -> NAME .)
    COMMA           reduce using rule 69 (variable -> NAME .)
    RIGHTPAR        reduce using rule 69 (variable -> NAME .)
    RIGHTBRACKET    reduce using rule 69 (variable -> NAME .)
    SEMICOLON       reduce using rule 69 (variable -> NAME .)
    EQUALS          reduce using rule 69 (variable -> NAME .)
    DIFFERENT       reduce using rule 69 (variable -> NAME .)
    LESSER          reduce using rule 69 (variable -> NAME .)
    GREATER         reduce using rule 69 (variable -> NAME .)
    LESSEREQUAL     reduce using rule 69 (variable -> NAME .)
    GREATEREQUAL    reduce using rule 69 (variable -> NAME .)
    AND             reduce using rule 69 (variable -> NAME .)
    OR              reduce using rule 69 (variable -> NAME .)
    LEFTPAR         shift and go to state 40
    LEFTBRACKET     shift and go to state 100


state 58

    (78) numberType -> INT .

    NEWLINE         reduce using rule 78 (numberType -> INT .)
    $end            reduce using rule 78 (numberType -> INT .)
    SUM             reduce using rule 78 (numberType -> INT .)
    SUBSTRACTION    reduce using rule 78 (numberType -> INT .)
    MULTIPLICATION  reduce using rule 78 (numberType -> INT .)
    DIVISION        reduce using rule 78 (numberType -> INT .)
    COMMA           reduce using rule 78 (numberType -> INT .)
    RIGHTPAR        reduce using rule 78 (numberType -> INT .)
    SEMICOLON       reduce using rule 78 (numberType -> INT .)
    RIGHTBRACKET    reduce using rule 78 (numberType -> INT .)
    EQUALS          reduce using rule 78 (numberType -> INT .)
    DIFFERENT       reduce using rule 78 (numberType -> INT .)
    LESSER          reduce using rule 78 (numberType -> INT .)
    GREATER         reduce using rule 78 (numberType -> INT .)
    LESSEREQUAL     reduce using rule 78 (numberType -> INT .)
    GREATEREQUAL    reduce using rule 78 (numberType -> INT .)
    AND             reduce using rule 78 (numberType -> INT .)
    OR              reduce using rule 78 (numberType -> INT .)


state 59

    (79) numberType -> DOUBLE .

    NEWLINE         reduce using rule 79 (numberType -> DOUBLE .)
    $end            reduce using rule 79 (numberType -> DOUBLE .)
    SUM             reduce using rule 79 (numberType -> DOUBLE .)
    SUBSTRACTION    reduce using rule 79 (numberType -> DOUBLE .)
    MULTIPLICATION  reduce using rule 79 (numberType -> DOUBLE .)
    DIVISION        reduce using rule 79 (numberType -> DOUBLE .)
    COMMA           reduce using rule 79 (numberType -> DOUBLE .)
    RIGHTPAR        reduce using rule 79 (numberType -> DOUBLE .)
    SEMICOLON       reduce using rule 79 (numberType -> DOUBLE .)
    RIGHTBRACKET    reduce using rule 79 (numberType -> DOUBLE .)
    EQUALS          reduce using rule 79 (numberType -> DOUBLE .)
    DIFFERENT       reduce using rule 79 (numberType -> DOUBLE .)
    LESSER          reduce using rule 79 (numberType -> DOUBLE .)
    GREATER         reduce using rule 79 (numberType -> DOUBLE .)
    LESSEREQUAL     reduce using rule 79 (numberType -> DOUBLE .)
    GREATEREQUAL    reduce using rule 79 (numberType -> DOUBLE .)
    AND             reduce using rule 79 (numberType -> DOUBLE .)
    OR              reduce using rule 79 (numberType -> DOUBLE .)


state 60

    (80) stringType -> STRING .

    NEWLINE         reduce using rule 80 (stringType -> STRING .)
    $end            reduce using rule 80 (stringType -> STRING .)
    COMMA           reduce using rule 80 (stringType -> STRING .)
    RIGHTPAR        reduce using rule 80 (stringType -> STRING .)
    SEMICOLON       reduce using rule 80 (stringType -> STRING .)
    EQUALS          reduce using rule 80 (stringType -> STRING .)
    DIFFERENT       reduce using rule 80 (stringType -> STRING .)
    LESSER          reduce using rule 80 (stringType -> STRING .)
    GREATER         reduce using rule 80 (stringType -> STRING .)
    LESSEREQUAL     reduce using rule 80 (stringType -> STRING .)
    GREATEREQUAL    reduce using rule 80 (stringType -> STRING .)
    AND             reduce using rule 80 (stringType -> STRING .)
    OR              reduce using rule 80 (stringType -> STRING .)


state 61

    (81) booleanType -> FALSE .

    NEWLINE         reduce using rule 81 (booleanType -> FALSE .)
    $end            reduce using rule 81 (booleanType -> FALSE .)
    COMMA           reduce using rule 81 (booleanType -> FALSE .)
    RIGHTPAR        reduce using rule 81 (booleanType -> FALSE .)
    SEMICOLON       reduce using rule 81 (booleanType -> FALSE .)
    EQUALS          reduce using rule 81 (booleanType -> FALSE .)
    DIFFERENT       reduce using rule 81 (booleanType -> FALSE .)
    LESSER          reduce using rule 81 (booleanType -> FALSE .)
    GREATER         reduce using rule 81 (booleanType -> FALSE .)
    LESSEREQUAL     reduce using rule 81 (booleanType -> FALSE .)
    GREATEREQUAL    reduce using rule 81 (booleanType -> FALSE .)
    AND             reduce using rule 81 (booleanType -> FALSE .)
    OR              reduce using rule 81 (booleanType -> FALSE .)


state 62

    (82) booleanType -> TRUE .

    NEWLINE         reduce using rule 82 (booleanType -> TRUE .)
    $end            reduce using rule 82 (booleanType -> TRUE .)
    COMMA           reduce using rule 82 (booleanType -> TRUE .)
    RIGHTPAR        reduce using rule 82 (booleanType -> TRUE .)
    SEMICOLON       reduce using rule 82 (booleanType -> TRUE .)
    EQUALS          reduce using rule 82 (booleanType -> TRUE .)
    DIFFERENT       reduce using rule 82 (booleanType -> TRUE .)
    LESSER          reduce using rule 82 (booleanType -> TRUE .)
    GREATER         reduce using rule 82 (booleanType -> TRUE .)
    LESSEREQUAL     reduce using rule 82 (booleanType -> TRUE .)
    GREATEREQUAL    reduce using rule 82 (booleanType -> TRUE .)
    AND             reduce using rule 82 (booleanType -> TRUE .)
    OR              reduce using rule 82 (booleanType -> TRUE .)


state 63

    (92) arithmeticOp -> SUM .

    INT             reduce using rule 92 (arithmeticOp -> SUM .)
    DOUBLE          reduce using rule 92 (arithmeticOp -> SUM .)
    NAME            reduce using rule 92 (arithmeticOp -> SUM .)
    LEFTPAR         reduce using rule 92 (arithmeticOp -> SUM .)


state 64

    (93) arithmeticOp -> SUBSTRACTION .

    INT             reduce using rule 93 (arithmeticOp -> SUBSTRACTION .)
    DOUBLE          reduce using rule 93 (arithmeticOp -> SUBSTRACTION .)
    NAME            reduce using rule 93 (arithmeticOp -> SUBSTRACTION .)
    LEFTPAR         reduce using rule 93 (arithmeticOp -> SUBSTRACTION .)


state 65

    (94) arithmeticOp -> MULTIPLICATION .

    INT             reduce using rule 94 (arithmeticOp -> MULTIPLICATION .)
    DOUBLE          reduce using rule 94 (arithmeticOp -> MULTIPLICATION .)
    NAME            reduce using rule 94 (arithmeticOp -> MULTIPLICATION .)
    LEFTPAR         reduce using rule 94 (arithmeticOp -> MULTIPLICATION .)


state 66

    (95) arithmeticOp -> DIVISION .

    INT             reduce using rule 95 (arithmeticOp -> DIVISION .)
    DOUBLE          reduce using rule 95 (arithmeticOp -> DIVISION .)
    NAME            reduce using rule 95 (arithmeticOp -> DIVISION .)
    LEFTPAR         reduce using rule 95 (arithmeticOp -> DIVISION .)


state 67

    (34) ifCondition -> IF LEFTPAR . conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> IF LEFTPAR . conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (38) conditionals -> . condition
    (39) conditionals -> . condition conditionalOp conditionals
    (40) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (41) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (42) condition -> . sendingVariable conditionOp sendingVariable
    (65) sendingVariable -> . variableType
    (66) sendingVariable -> . arithmetic
    (67) sendingVariable -> . variable
    (68) sendingVariable -> . functionCall
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 101
    NAME            shift and go to state 57
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    conditionals                   shift and go to state 102
    condition                      shift and go to state 103
    sendingVariable                shift and go to state 104
    variableType                   shift and go to state 46
    arithmetic                     shift and go to state 47
    variable                       shift and go to state 48
    functionCall                   shift and go to state 49
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    vectorVariable                 shift and go to state 32

state 68

    (36) forCondition -> FOR LEFTPAR . declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    VARDECLARATION  shift and go to state 20

    declaration                    shift and go to state 105

state 69

    (37) whileCondition -> WHILE LEFTPAR . conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (38) conditionals -> . condition
    (39) conditionals -> . condition conditionalOp conditionals
    (40) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (41) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (42) condition -> . sendingVariable conditionOp sendingVariable
    (65) sendingVariable -> . variableType
    (66) sendingVariable -> . arithmetic
    (67) sendingVariable -> . variable
    (68) sendingVariable -> . functionCall
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 101
    NAME            shift and go to state 57
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    conditionals                   shift and go to state 106
    condition                      shift and go to state 103
    sendingVariable                shift and go to state 104
    variableType                   shift and go to state 46
    arithmetic                     shift and go to state 47
    variable                       shift and go to state 48
    functionCall                   shift and go to state 49
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    vectorVariable                 shift and go to state 32

state 70

    (45) preIncdec -> INCREASE variable .

    NEWLINE         reduce using rule 45 (preIncdec -> INCREASE variable .)
    $end            reduce using rule 45 (preIncdec -> INCREASE variable .)
    RIGHTPAR        reduce using rule 45 (preIncdec -> INCREASE variable .)


state 71

    (69) variable -> NAME .
    (71) vectorVariable -> NAME . LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    NEWLINE         reduce using rule 69 (variable -> NAME .)
    $end            reduce using rule 69 (variable -> NAME .)
    RIGHTPAR        reduce using rule 69 (variable -> NAME .)
    INCREASE        reduce using rule 69 (variable -> NAME .)
    DECREASE        reduce using rule 69 (variable -> NAME .)
    LEFTBRACKET     shift and go to state 100


state 72

    (47) postIncdec -> variable INCREASE .

    NEWLINE         reduce using rule 47 (postIncdec -> variable INCREASE .)
    $end            reduce using rule 47 (postIncdec -> variable INCREASE .)
    RIGHTPAR        reduce using rule 47 (postIncdec -> variable INCREASE .)


state 73

    (48) postIncdec -> variable DECREASE .

    NEWLINE         reduce using rule 48 (postIncdec -> variable DECREASE .)
    $end            reduce using rule 48 (postIncdec -> variable DECREASE .)
    RIGHTPAR        reduce using rule 48 (postIncdec -> variable DECREASE .)


state 74

    (46) preIncdec -> DECREASE variable .

    NEWLINE         reduce using rule 46 (preIncdec -> DECREASE variable .)
    $end            reduce using rule 46 (preIncdec -> DECREASE variable .)
    RIGHTPAR        reduce using rule 46 (preIncdec -> DECREASE variable .)


state 75

    (1) Niark -> methodDefinition NEWLINE Niark .

    $end            reduce using rule 1 (Niark -> methodDefinition NEWLINE Niark .)


state 76

    (2) Niark -> instruction NEWLINE Niark .

    $end            reduce using rule 2 (Niark -> instruction NEWLINE Niark .)


state 77

    (5) methodDefinition -> domain methodType NAME . LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (6) methodDefinition -> domain methodType NAME . LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTPAR         shift and go to state 107


state 78

    (69) variable -> NAME .
    (71) vectorVariable -> NAME . LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (28) functionCall -> NAME . LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> NAME . LEFTPAR empty RIGHTPAR

    NEWLINE         reduce using rule 69 (variable -> NAME .)
    $end            reduce using rule 69 (variable -> NAME .)
    SUM             reduce using rule 69 (variable -> NAME .)
    SUBSTRACTION    reduce using rule 69 (variable -> NAME .)
    MULTIPLICATION  reduce using rule 69 (variable -> NAME .)
    DIVISION        reduce using rule 69 (variable -> NAME .)
    RIGHTBRACKET    reduce using rule 69 (variable -> NAME .)
    SEMICOLON       reduce using rule 69 (variable -> NAME .)
    LEFTBRACKET     shift and go to state 100
    LEFTPAR         shift and go to state 40


state 79

    (18) asignation -> NAME ASIGNATION dataTypeAsignation .

    NEWLINE         reduce using rule 18 (asignation -> NAME ASIGNATION dataTypeAsignation .)
    $end            reduce using rule 18 (asignation -> NAME ASIGNATION dataTypeAsignation .)


state 80

    (23) dataTypeAsignation -> variable .
    (90) arithmeticDataType -> variable .

    NEWLINE         reduce using rule 23 (dataTypeAsignation -> variable .)
    $end            reduce using rule 23 (dataTypeAsignation -> variable .)
    SEMICOLON       reduce using rule 23 (dataTypeAsignation -> variable .)
    SUM             reduce using rule 90 (arithmeticDataType -> variable .)
    SUBSTRACTION    reduce using rule 90 (arithmeticDataType -> variable .)
    MULTIPLICATION  reduce using rule 90 (arithmeticDataType -> variable .)
    DIVISION        reduce using rule 90 (arithmeticDataType -> variable .)


state 81

    (24) dataTypeAsignation -> variableType .

    NEWLINE         reduce using rule 24 (dataTypeAsignation -> variableType .)
    $end            reduce using rule 24 (dataTypeAsignation -> variableType .)
    SEMICOLON       reduce using rule 24 (dataTypeAsignation -> variableType .)


state 82

    (25) dataTypeAsignation -> arithmetic .
    (88) moreArithmetic -> arithmetic .

    NEWLINE         reduce using rule 25 (dataTypeAsignation -> arithmetic .)
    $end            reduce using rule 25 (dataTypeAsignation -> arithmetic .)
    SEMICOLON       reduce using rule 25 (dataTypeAsignation -> arithmetic .)
    SUM             reduce using rule 88 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 88 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 88 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 88 (moreArithmetic -> arithmetic .)


state 83

    (91) arithmeticDataType -> functionCall .

    SUM             reduce using rule 91 (arithmeticDataType -> functionCall .)
    SUBSTRACTION    reduce using rule 91 (arithmeticDataType -> functionCall .)
    MULTIPLICATION  reduce using rule 91 (arithmeticDataType -> functionCall .)
    DIVISION        reduce using rule 91 (arithmeticDataType -> functionCall .)
    NEWLINE         reduce using rule 91 (arithmeticDataType -> functionCall .)
    $end            reduce using rule 91 (arithmeticDataType -> functionCall .)
    RIGHTBRACKET    reduce using rule 91 (arithmeticDataType -> functionCall .)
    COMMA           reduce using rule 91 (arithmeticDataType -> functionCall .)
    RIGHTPAR        reduce using rule 91 (arithmeticDataType -> functionCall .)
    SEMICOLON       reduce using rule 91 (arithmeticDataType -> functionCall .)
    EQUALS          reduce using rule 91 (arithmeticDataType -> functionCall .)
    DIFFERENT       reduce using rule 91 (arithmeticDataType -> functionCall .)
    LESSER          reduce using rule 91 (arithmeticDataType -> functionCall .)
    GREATER         reduce using rule 91 (arithmeticDataType -> functionCall .)
    LESSEREQUAL     reduce using rule 91 (arithmeticDataType -> functionCall .)
    GREATEREQUAL    reduce using rule 91 (arithmeticDataType -> functionCall .)
    AND             reduce using rule 91 (arithmeticDataType -> functionCall .)
    OR              reduce using rule 91 (arithmeticDataType -> functionCall .)


state 84

    (19) asignation -> NAME LEFTBRACKET dataLocalizatorType . RIGHTBRACKET ASIGNATION dataTypeAsignation
    (71) vectorVariable -> NAME LEFTBRACKET dataLocalizatorType . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 108


state 85

    (72) dataLocalizatorType -> INT .
    (78) numberType -> INT .

    RIGHTBRACKET    reduce using rule 72 (dataLocalizatorType -> INT .)
    SUM             reduce using rule 78 (numberType -> INT .)
    SUBSTRACTION    reduce using rule 78 (numberType -> INT .)
    MULTIPLICATION  reduce using rule 78 (numberType -> INT .)
    DIVISION        reduce using rule 78 (numberType -> INT .)


state 86

    (73) dataLocalizatorType -> variable .
    (90) arithmeticDataType -> variable .

    RIGHTBRACKET    reduce using rule 73 (dataLocalizatorType -> variable .)
    SUM             reduce using rule 90 (arithmeticDataType -> variable .)
    SUBSTRACTION    reduce using rule 90 (arithmeticDataType -> variable .)
    MULTIPLICATION  reduce using rule 90 (arithmeticDataType -> variable .)
    DIVISION        reduce using rule 90 (arithmeticDataType -> variable .)


state 87

    (74) dataLocalizatorType -> arithmetic .
    (88) moreArithmetic -> arithmetic .

    RIGHTBRACKET    reduce using rule 74 (dataLocalizatorType -> arithmetic .)
    SUM             reduce using rule 88 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 88 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 88 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 88 (moreArithmetic -> arithmetic .)


state 88

    (89) arithmeticDataType -> numberType .

    SUM             reduce using rule 89 (arithmeticDataType -> numberType .)
    SUBSTRACTION    reduce using rule 89 (arithmeticDataType -> numberType .)
    MULTIPLICATION  reduce using rule 89 (arithmeticDataType -> numberType .)
    DIVISION        reduce using rule 89 (arithmeticDataType -> numberType .)
    NEWLINE         reduce using rule 89 (arithmeticDataType -> numberType .)
    $end            reduce using rule 89 (arithmeticDataType -> numberType .)
    RIGHTBRACKET    reduce using rule 89 (arithmeticDataType -> numberType .)
    COMMA           reduce using rule 89 (arithmeticDataType -> numberType .)
    RIGHTPAR        reduce using rule 89 (arithmeticDataType -> numberType .)
    SEMICOLON       reduce using rule 89 (arithmeticDataType -> numberType .)
    EQUALS          reduce using rule 89 (arithmeticDataType -> numberType .)
    DIFFERENT       reduce using rule 89 (arithmeticDataType -> numberType .)
    LESSER          reduce using rule 89 (arithmeticDataType -> numberType .)
    GREATER         reduce using rule 89 (arithmeticDataType -> numberType .)
    LESSEREQUAL     reduce using rule 89 (arithmeticDataType -> numberType .)
    GREATEREQUAL    reduce using rule 89 (arithmeticDataType -> numberType .)
    AND             reduce using rule 89 (arithmeticDataType -> numberType .)
    OR              reduce using rule 89 (arithmeticDataType -> numberType .)


state 89

    (28) functionCall -> NAME LEFTPAR sendingVariables . RIGHTPAR

    RIGHTPAR        shift and go to state 109


state 90

    (29) functionCall -> NAME LEFTPAR empty . RIGHTPAR

    RIGHTPAR        shift and go to state 110


state 91

    (63) sendingVariables -> sendingVariable . COMMA sendingVariables
    (64) sendingVariables -> sendingVariable .

    COMMA           shift and go to state 111
    RIGHTPAR        reduce using rule 64 (sendingVariables -> sendingVariable .)


state 92

    (21) declaration -> VARDECLARATION ASIGNATION dataTypeAsignation .

    NEWLINE         reduce using rule 21 (declaration -> VARDECLARATION ASIGNATION dataTypeAsignation .)
    $end            reduce using rule 21 (declaration -> VARDECLARATION ASIGNATION dataTypeAsignation .)
    SEMICOLON       reduce using rule 21 (declaration -> VARDECLARATION ASIGNATION dataTypeAsignation .)


state 93

    (22) declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 112


state 94

    (26) read -> READ LEFTPAR NAME . RIGHTPAR

    RIGHTPAR        shift and go to state 113


state 95

    (27) print -> PRINT LEFTPAR sendingVariables . RIGHTPAR

    RIGHTPAR        shift and go to state 114


state 96

    (83) arithmetic -> moreArithmetic arithmeticOp . arithmeticDataType
    (85) arithmetic -> moreArithmetic arithmeticOp . LEFTPAR arithmetic RIGHTPAR
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    LEFTPAR         shift and go to state 116
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    NAME            shift and go to state 57

    arithmeticDataType             shift and go to state 115
    numberType                     shift and go to state 88
    variable                       shift and go to state 98
    functionCall                   shift and go to state 83
    vectorVariable                 shift and go to state 32

state 97

    (86) arithmetic -> arithmeticOp arithmeticDataType .

    NEWLINE         reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    $end            reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    SUM             reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    SUBSTRACTION    reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    MULTIPLICATION  reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    DIVISION        reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    RIGHTBRACKET    reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    COMMA           reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    RIGHTPAR        reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    SEMICOLON       reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    EQUALS          reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    DIFFERENT       reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    LESSER          reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    GREATER         reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    LESSEREQUAL     reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    GREATEREQUAL    reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    AND             reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)
    OR              reduce using rule 86 (arithmetic -> arithmeticOp arithmeticDataType .)


state 98

    (90) arithmeticDataType -> variable .

    NEWLINE         reduce using rule 90 (arithmeticDataType -> variable .)
    $end            reduce using rule 90 (arithmeticDataType -> variable .)
    SUM             reduce using rule 90 (arithmeticDataType -> variable .)
    SUBSTRACTION    reduce using rule 90 (arithmeticDataType -> variable .)
    MULTIPLICATION  reduce using rule 90 (arithmeticDataType -> variable .)
    DIVISION        reduce using rule 90 (arithmeticDataType -> variable .)
    RIGHTBRACKET    reduce using rule 90 (arithmeticDataType -> variable .)
    COMMA           reduce using rule 90 (arithmeticDataType -> variable .)
    RIGHTPAR        reduce using rule 90 (arithmeticDataType -> variable .)
    SEMICOLON       reduce using rule 90 (arithmeticDataType -> variable .)
    EQUALS          reduce using rule 90 (arithmeticDataType -> variable .)
    DIFFERENT       reduce using rule 90 (arithmeticDataType -> variable .)
    LESSER          reduce using rule 90 (arithmeticDataType -> variable .)
    GREATER         reduce using rule 90 (arithmeticDataType -> variable .)
    LESSEREQUAL     reduce using rule 90 (arithmeticDataType -> variable .)
    GREATEREQUAL    reduce using rule 90 (arithmeticDataType -> variable .)
    AND             reduce using rule 90 (arithmeticDataType -> variable .)
    OR              reduce using rule 90 (arithmeticDataType -> variable .)


state 99

    (84) arithmetic -> LEFTPAR arithmetic . RIGHTPAR
    (88) moreArithmetic -> arithmetic .

    RIGHTPAR        shift and go to state 117
    SUM             reduce using rule 88 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 88 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 88 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 88 (moreArithmetic -> arithmetic .)


state 100

    (71) vectorVariable -> NAME LEFTBRACKET . dataLocalizatorType RIGHTBRACKET
    (72) dataLocalizatorType -> . INT
    (73) dataLocalizatorType -> . variable
    (74) dataLocalizatorType -> . arithmetic
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    INT             shift and go to state 85
    NAME            shift and go to state 78
    LEFTPAR         shift and go to state 56
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66
    DOUBLE          shift and go to state 59

    dataLocalizatorType            shift and go to state 118
    variable                       shift and go to state 86
    arithmetic                     shift and go to state 87
    vectorVariable                 shift and go to state 32
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    numberType                     shift and go to state 88
    functionCall                   shift and go to state 83

state 101

    (40) conditionals -> LEFTPAR . conditionals RIGHTPAR conditionalOp conditionals
    (41) conditionals -> LEFTPAR . conditionals RIGHTPAR
    (84) arithmetic -> LEFTPAR . arithmetic RIGHTPAR
    (38) conditionals -> . condition
    (39) conditionals -> . condition conditionalOp conditionals
    (40) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (41) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (42) condition -> . sendingVariable conditionOp sendingVariable
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (65) sendingVariable -> . variableType
    (66) sendingVariable -> . arithmetic
    (67) sendingVariable -> . variable
    (68) sendingVariable -> . functionCall
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    LEFTPAR         shift and go to state 101
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66
    NAME            shift and go to state 57
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62

    conditionals                   shift and go to state 119
    arithmetic                     shift and go to state 120
    condition                      shift and go to state 103
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    sendingVariable                shift and go to state 104
    variableType                   shift and go to state 46
    variable                       shift and go to state 48
    functionCall                   shift and go to state 49
    numberType                     shift and go to state 121
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    vectorVariable                 shift and go to state 32

state 102

    (34) ifCondition -> IF LEFTPAR conditionals . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> IF LEFTPAR conditionals . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTPAR        shift and go to state 122


state 103

    (38) conditionals -> condition .
    (39) conditionals -> condition . conditionalOp conditionals
    (49) conditionalOp -> . AND
    (50) conditionalOp -> . OR

    RIGHTPAR        reduce using rule 38 (conditionals -> condition .)
    SEMICOLON       reduce using rule 38 (conditionals -> condition .)
    AND             shift and go to state 124
    OR              shift and go to state 125

    conditionalOp                  shift and go to state 123

state 104

    (42) condition -> sendingVariable . conditionOp sendingVariable
    (51) conditionOp -> . EQUALS
    (52) conditionOp -> . DIFFERENT
    (53) conditionOp -> . LESSER
    (54) conditionOp -> . GREATER
    (55) conditionOp -> . LESSEREQUAL
    (56) conditionOp -> . GREATEREQUAL

    EQUALS          shift and go to state 127
    DIFFERENT       shift and go to state 128
    LESSER          shift and go to state 129
    GREATER         shift and go to state 130
    LESSEREQUAL     shift and go to state 131
    GREATEREQUAL    shift and go to state 132

    conditionOp                    shift and go to state 126

state 105

    (36) forCondition -> FOR LEFTPAR declaration . SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    SEMICOLON       shift and go to state 133


state 106

    (37) whileCondition -> WHILE LEFTPAR conditionals . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTPAR        shift and go to state 134


state 107

    (5) methodDefinition -> domain methodType NAME LEFTPAR . parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (6) methodDefinition -> domain methodType NAME LEFTPAR . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (61) parameters -> . NAME COMMA parameters
    (62) parameters -> . NAME

    RIGHTPAR        shift and go to state 137
    NAME            shift and go to state 135

    parameters                     shift and go to state 136

state 108

    (19) asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET . ASIGNATION dataTypeAsignation
    (71) vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .

    ASIGNATION      shift and go to state 138
    INCREASE        reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    DECREASE        reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)


state 109

    (28) functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .

    NEWLINE         reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    $end            reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    SUM             reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    SUBSTRACTION    reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    MULTIPLICATION  reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    DIVISION        reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    COMMA           reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    RIGHTPAR        reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    SEMICOLON       reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    EQUALS          reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    DIFFERENT       reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    LESSER          reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    GREATER         reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    LESSEREQUAL     reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    GREATEREQUAL    reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    AND             reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)
    OR              reduce using rule 28 (functionCall -> NAME LEFTPAR sendingVariables RIGHTPAR .)


state 110

    (29) functionCall -> NAME LEFTPAR empty RIGHTPAR .

    NEWLINE         reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    $end            reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    SUM             reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    SUBSTRACTION    reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    MULTIPLICATION  reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    DIVISION        reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    COMMA           reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    RIGHTPAR        reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    SEMICOLON       reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    EQUALS          reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    DIFFERENT       reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    LESSER          reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    GREATER         reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    LESSEREQUAL     reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    GREATEREQUAL    reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    AND             reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)
    OR              reduce using rule 29 (functionCall -> NAME LEFTPAR empty RIGHTPAR .)


state 111

    (63) sendingVariables -> sendingVariable COMMA . sendingVariables
    (63) sendingVariables -> . sendingVariable COMMA sendingVariables
    (64) sendingVariables -> . sendingVariable
    (65) sendingVariable -> . variableType
    (66) sendingVariable -> . arithmetic
    (67) sendingVariable -> . variable
    (68) sendingVariable -> . functionCall
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 56
    NAME            shift and go to state 57
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    sendingVariable                shift and go to state 91
    sendingVariables               shift and go to state 139
    variableType                   shift and go to state 46
    arithmetic                     shift and go to state 47
    variable                       shift and go to state 48
    functionCall                   shift and go to state 49
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    vectorVariable                 shift and go to state 32

state 112

    (22) declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET .

    NEWLINE         reduce using rule 22 (declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    $end            reduce using rule 22 (declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    SEMICOLON       reduce using rule 22 (declaration -> VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)


state 113

    (26) read -> READ LEFTPAR NAME RIGHTPAR .

    NEWLINE         reduce using rule 26 (read -> READ LEFTPAR NAME RIGHTPAR .)
    $end            reduce using rule 26 (read -> READ LEFTPAR NAME RIGHTPAR .)


state 114

    (27) print -> PRINT LEFTPAR sendingVariables RIGHTPAR .

    NEWLINE         reduce using rule 27 (print -> PRINT LEFTPAR sendingVariables RIGHTPAR .)
    $end            reduce using rule 27 (print -> PRINT LEFTPAR sendingVariables RIGHTPAR .)


state 115

    (83) arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .

    NEWLINE         reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    $end            reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    SUM             reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    SUBSTRACTION    reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    MULTIPLICATION  reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    DIVISION        reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    RIGHTBRACKET    reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    COMMA           reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    RIGHTPAR        reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    SEMICOLON       reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    EQUALS          reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    DIFFERENT       reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    LESSER          reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    GREATER         reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    LESSEREQUAL     reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    GREATEREQUAL    reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    AND             reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)
    OR              reduce using rule 83 (arithmetic -> moreArithmetic arithmeticOp arithmeticDataType .)


state 116

    (85) arithmetic -> moreArithmetic arithmeticOp LEFTPAR . arithmetic RIGHTPAR
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    LEFTPAR         shift and go to state 56
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    NAME            shift and go to state 57

    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmetic                     shift and go to state 140
    arithmeticDataType             shift and go to state 55
    numberType                     shift and go to state 88
    variable                       shift and go to state 98
    functionCall                   shift and go to state 83
    vectorVariable                 shift and go to state 32

state 117

    (84) arithmetic -> LEFTPAR arithmetic RIGHTPAR .

    NEWLINE         reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    $end            reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    SUM             reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    SUBSTRACTION    reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    MULTIPLICATION  reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    DIVISION        reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    COMMA           reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    RIGHTPAR        reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    SEMICOLON       reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    EQUALS          reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    DIFFERENT       reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    LESSER          reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    GREATER         reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    LESSEREQUAL     reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    GREATEREQUAL    reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    AND             reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)
    OR              reduce using rule 84 (arithmetic -> LEFTPAR arithmetic RIGHTPAR .)


state 118

    (71) vectorVariable -> NAME LEFTBRACKET dataLocalizatorType . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 141


state 119

    (40) conditionals -> LEFTPAR conditionals . RIGHTPAR conditionalOp conditionals
    (41) conditionals -> LEFTPAR conditionals . RIGHTPAR

    RIGHTPAR        shift and go to state 142


state 120

    (84) arithmetic -> LEFTPAR arithmetic . RIGHTPAR
    (88) moreArithmetic -> arithmetic .
    (66) sendingVariable -> arithmetic .

    RIGHTPAR        shift and go to state 117
    SUM             reduce using rule 88 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 88 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 88 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 88 (moreArithmetic -> arithmetic .)
    EQUALS          reduce using rule 66 (sendingVariable -> arithmetic .)
    DIFFERENT       reduce using rule 66 (sendingVariable -> arithmetic .)
    LESSER          reduce using rule 66 (sendingVariable -> arithmetic .)
    GREATER         reduce using rule 66 (sendingVariable -> arithmetic .)
    LESSEREQUAL     reduce using rule 66 (sendingVariable -> arithmetic .)
    GREATEREQUAL    reduce using rule 66 (sendingVariable -> arithmetic .)


state 121

    (89) arithmeticDataType -> numberType .
    (75) variableType -> numberType .

    SUM             reduce using rule 89 (arithmeticDataType -> numberType .)
    SUBSTRACTION    reduce using rule 89 (arithmeticDataType -> numberType .)
    MULTIPLICATION  reduce using rule 89 (arithmeticDataType -> numberType .)
    DIVISION        reduce using rule 89 (arithmeticDataType -> numberType .)
    EQUALS          reduce using rule 75 (variableType -> numberType .)
    DIFFERENT       reduce using rule 75 (variableType -> numberType .)
    LESSER          reduce using rule 75 (variableType -> numberType .)
    GREATER         reduce using rule 75 (variableType -> numberType .)
    LESSEREQUAL     reduce using rule 75 (variableType -> numberType .)
    GREATEREQUAL    reduce using rule 75 (variableType -> numberType .)


state 122

    (34) ifCondition -> IF LEFTPAR conditionals RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTKEY         shift and go to state 143


state 123

    (39) conditionals -> condition conditionalOp . conditionals
    (38) conditionals -> . condition
    (39) conditionals -> . condition conditionalOp conditionals
    (40) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (41) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (42) condition -> . sendingVariable conditionOp sendingVariable
    (65) sendingVariable -> . variableType
    (66) sendingVariable -> . arithmetic
    (67) sendingVariable -> . variable
    (68) sendingVariable -> . functionCall
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 101
    NAME            shift and go to state 57
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    condition                      shift and go to state 103
    conditionals                   shift and go to state 144
    sendingVariable                shift and go to state 104
    variableType                   shift and go to state 46
    arithmetic                     shift and go to state 47
    variable                       shift and go to state 48
    functionCall                   shift and go to state 49
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    vectorVariable                 shift and go to state 32

state 124

    (49) conditionalOp -> AND .

    LEFTPAR         reduce using rule 49 (conditionalOp -> AND .)
    NAME            reduce using rule 49 (conditionalOp -> AND .)
    INT             reduce using rule 49 (conditionalOp -> AND .)
    DOUBLE          reduce using rule 49 (conditionalOp -> AND .)
    STRING          reduce using rule 49 (conditionalOp -> AND .)
    FALSE           reduce using rule 49 (conditionalOp -> AND .)
    TRUE            reduce using rule 49 (conditionalOp -> AND .)
    SUM             reduce using rule 49 (conditionalOp -> AND .)
    SUBSTRACTION    reduce using rule 49 (conditionalOp -> AND .)
    MULTIPLICATION  reduce using rule 49 (conditionalOp -> AND .)
    DIVISION        reduce using rule 49 (conditionalOp -> AND .)


state 125

    (50) conditionalOp -> OR .

    LEFTPAR         reduce using rule 50 (conditionalOp -> OR .)
    NAME            reduce using rule 50 (conditionalOp -> OR .)
    INT             reduce using rule 50 (conditionalOp -> OR .)
    DOUBLE          reduce using rule 50 (conditionalOp -> OR .)
    STRING          reduce using rule 50 (conditionalOp -> OR .)
    FALSE           reduce using rule 50 (conditionalOp -> OR .)
    TRUE            reduce using rule 50 (conditionalOp -> OR .)
    SUM             reduce using rule 50 (conditionalOp -> OR .)
    SUBSTRACTION    reduce using rule 50 (conditionalOp -> OR .)
    MULTIPLICATION  reduce using rule 50 (conditionalOp -> OR .)
    DIVISION        reduce using rule 50 (conditionalOp -> OR .)


state 126

    (42) condition -> sendingVariable conditionOp . sendingVariable
    (65) sendingVariable -> . variableType
    (66) sendingVariable -> . arithmetic
    (67) sendingVariable -> . variable
    (68) sendingVariable -> . functionCall
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 56
    NAME            shift and go to state 57
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    sendingVariable                shift and go to state 145
    variableType                   shift and go to state 46
    arithmetic                     shift and go to state 47
    variable                       shift and go to state 48
    functionCall                   shift and go to state 49
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    vectorVariable                 shift and go to state 32

state 127

    (51) conditionOp -> EQUALS .

    LEFTPAR         reduce using rule 51 (conditionOp -> EQUALS .)
    NAME            reduce using rule 51 (conditionOp -> EQUALS .)
    INT             reduce using rule 51 (conditionOp -> EQUALS .)
    DOUBLE          reduce using rule 51 (conditionOp -> EQUALS .)
    STRING          reduce using rule 51 (conditionOp -> EQUALS .)
    FALSE           reduce using rule 51 (conditionOp -> EQUALS .)
    TRUE            reduce using rule 51 (conditionOp -> EQUALS .)
    SUM             reduce using rule 51 (conditionOp -> EQUALS .)
    SUBSTRACTION    reduce using rule 51 (conditionOp -> EQUALS .)
    MULTIPLICATION  reduce using rule 51 (conditionOp -> EQUALS .)
    DIVISION        reduce using rule 51 (conditionOp -> EQUALS .)


state 128

    (52) conditionOp -> DIFFERENT .

    LEFTPAR         reduce using rule 52 (conditionOp -> DIFFERENT .)
    NAME            reduce using rule 52 (conditionOp -> DIFFERENT .)
    INT             reduce using rule 52 (conditionOp -> DIFFERENT .)
    DOUBLE          reduce using rule 52 (conditionOp -> DIFFERENT .)
    STRING          reduce using rule 52 (conditionOp -> DIFFERENT .)
    FALSE           reduce using rule 52 (conditionOp -> DIFFERENT .)
    TRUE            reduce using rule 52 (conditionOp -> DIFFERENT .)
    SUM             reduce using rule 52 (conditionOp -> DIFFERENT .)
    SUBSTRACTION    reduce using rule 52 (conditionOp -> DIFFERENT .)
    MULTIPLICATION  reduce using rule 52 (conditionOp -> DIFFERENT .)
    DIVISION        reduce using rule 52 (conditionOp -> DIFFERENT .)


state 129

    (53) conditionOp -> LESSER .

    LEFTPAR         reduce using rule 53 (conditionOp -> LESSER .)
    NAME            reduce using rule 53 (conditionOp -> LESSER .)
    INT             reduce using rule 53 (conditionOp -> LESSER .)
    DOUBLE          reduce using rule 53 (conditionOp -> LESSER .)
    STRING          reduce using rule 53 (conditionOp -> LESSER .)
    FALSE           reduce using rule 53 (conditionOp -> LESSER .)
    TRUE            reduce using rule 53 (conditionOp -> LESSER .)
    SUM             reduce using rule 53 (conditionOp -> LESSER .)
    SUBSTRACTION    reduce using rule 53 (conditionOp -> LESSER .)
    MULTIPLICATION  reduce using rule 53 (conditionOp -> LESSER .)
    DIVISION        reduce using rule 53 (conditionOp -> LESSER .)


state 130

    (54) conditionOp -> GREATER .

    LEFTPAR         reduce using rule 54 (conditionOp -> GREATER .)
    NAME            reduce using rule 54 (conditionOp -> GREATER .)
    INT             reduce using rule 54 (conditionOp -> GREATER .)
    DOUBLE          reduce using rule 54 (conditionOp -> GREATER .)
    STRING          reduce using rule 54 (conditionOp -> GREATER .)
    FALSE           reduce using rule 54 (conditionOp -> GREATER .)
    TRUE            reduce using rule 54 (conditionOp -> GREATER .)
    SUM             reduce using rule 54 (conditionOp -> GREATER .)
    SUBSTRACTION    reduce using rule 54 (conditionOp -> GREATER .)
    MULTIPLICATION  reduce using rule 54 (conditionOp -> GREATER .)
    DIVISION        reduce using rule 54 (conditionOp -> GREATER .)


state 131

    (55) conditionOp -> LESSEREQUAL .

    LEFTPAR         reduce using rule 55 (conditionOp -> LESSEREQUAL .)
    NAME            reduce using rule 55 (conditionOp -> LESSEREQUAL .)
    INT             reduce using rule 55 (conditionOp -> LESSEREQUAL .)
    DOUBLE          reduce using rule 55 (conditionOp -> LESSEREQUAL .)
    STRING          reduce using rule 55 (conditionOp -> LESSEREQUAL .)
    FALSE           reduce using rule 55 (conditionOp -> LESSEREQUAL .)
    TRUE            reduce using rule 55 (conditionOp -> LESSEREQUAL .)
    SUM             reduce using rule 55 (conditionOp -> LESSEREQUAL .)
    SUBSTRACTION    reduce using rule 55 (conditionOp -> LESSEREQUAL .)
    MULTIPLICATION  reduce using rule 55 (conditionOp -> LESSEREQUAL .)
    DIVISION        reduce using rule 55 (conditionOp -> LESSEREQUAL .)


state 132

    (56) conditionOp -> GREATEREQUAL .

    LEFTPAR         reduce using rule 56 (conditionOp -> GREATEREQUAL .)
    NAME            reduce using rule 56 (conditionOp -> GREATEREQUAL .)
    INT             reduce using rule 56 (conditionOp -> GREATEREQUAL .)
    DOUBLE          reduce using rule 56 (conditionOp -> GREATEREQUAL .)
    STRING          reduce using rule 56 (conditionOp -> GREATEREQUAL .)
    FALSE           reduce using rule 56 (conditionOp -> GREATEREQUAL .)
    TRUE            reduce using rule 56 (conditionOp -> GREATEREQUAL .)
    SUM             reduce using rule 56 (conditionOp -> GREATEREQUAL .)
    SUBSTRACTION    reduce using rule 56 (conditionOp -> GREATEREQUAL .)
    MULTIPLICATION  reduce using rule 56 (conditionOp -> GREATEREQUAL .)
    DIVISION        reduce using rule 56 (conditionOp -> GREATEREQUAL .)


state 133

    (36) forCondition -> FOR LEFTPAR declaration SEMICOLON . conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (38) conditionals -> . condition
    (39) conditionals -> . condition conditionalOp conditionals
    (40) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (41) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (42) condition -> . sendingVariable conditionOp sendingVariable
    (65) sendingVariable -> . variableType
    (66) sendingVariable -> . arithmetic
    (67) sendingVariable -> . variable
    (68) sendingVariable -> . functionCall
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 101
    NAME            shift and go to state 57
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    conditionals                   shift and go to state 146
    condition                      shift and go to state 103
    sendingVariable                shift and go to state 104
    variableType                   shift and go to state 46
    arithmetic                     shift and go to state 47
    variable                       shift and go to state 48
    functionCall                   shift and go to state 49
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    vectorVariable                 shift and go to state 32

state 134

    (37) whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTKEY         shift and go to state 147


state 135

    (61) parameters -> NAME . COMMA parameters
    (62) parameters -> NAME .

    COMMA           shift and go to state 148
    RIGHTPAR        reduce using rule 62 (parameters -> NAME .)


state 136

    (5) methodDefinition -> domain methodType NAME LEFTPAR parameters . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTPAR        shift and go to state 149


state 137

    (6) methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTKEY         shift and go to state 150


state 138

    (19) asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION . dataTypeAsignation
    (23) dataTypeAsignation -> . variable
    (24) dataTypeAsignation -> . variableType
    (25) dataTypeAsignation -> . arithmetic
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR

    NAME            shift and go to state 78
    LEFTPAR         shift and go to state 56
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    dataTypeAsignation             shift and go to state 151
    variable                       shift and go to state 80
    variableType                   shift and go to state 81
    arithmetic                     shift and go to state 82
    vectorVariable                 shift and go to state 32
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    functionCall                   shift and go to state 83

state 139

    (63) sendingVariables -> sendingVariable COMMA sendingVariables .

    RIGHTPAR        reduce using rule 63 (sendingVariables -> sendingVariable COMMA sendingVariables .)


state 140

    (85) arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic . RIGHTPAR
    (88) moreArithmetic -> arithmetic .

    RIGHTPAR        shift and go to state 152
    SUM             reduce using rule 88 (moreArithmetic -> arithmetic .)
    SUBSTRACTION    reduce using rule 88 (moreArithmetic -> arithmetic .)
    MULTIPLICATION  reduce using rule 88 (moreArithmetic -> arithmetic .)
    DIVISION        reduce using rule 88 (moreArithmetic -> arithmetic .)


state 141

    (71) vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .

    NEWLINE         reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    $end            reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    SUM             reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    SUBSTRACTION    reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    MULTIPLICATION  reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    DIVISION        reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    COMMA           reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    SEMICOLON       reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    EQUALS          reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    DIFFERENT       reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    LESSER          reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    GREATER         reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    LESSEREQUAL     reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    GREATEREQUAL    reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    AND             reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    OR              reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    INCREASE        reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)
    DECREASE        reduce using rule 71 (vectorVariable -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET .)


state 142

    (40) conditionals -> LEFTPAR conditionals RIGHTPAR . conditionalOp conditionals
    (41) conditionals -> LEFTPAR conditionals RIGHTPAR .
    (49) conditionalOp -> . AND
    (50) conditionalOp -> . OR

    RIGHTPAR        reduce using rule 41 (conditionals -> LEFTPAR conditionals RIGHTPAR .)
    SEMICOLON       reduce using rule 41 (conditionals -> LEFTPAR conditionals RIGHTPAR .)
    AND             shift and go to state 124
    OR              shift and go to state 125

    conditionalOp                  shift and go to state 153

state 143

    (34) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY
    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY

    NEWLINE         shift and go to state 154


state 144

    (39) conditionals -> condition conditionalOp conditionals .

    RIGHTPAR        reduce using rule 39 (conditionals -> condition conditionalOp conditionals .)
    SEMICOLON       reduce using rule 39 (conditionals -> condition conditionalOp conditionals .)


state 145

    (42) condition -> sendingVariable conditionOp sendingVariable .

    AND             reduce using rule 42 (condition -> sendingVariable conditionOp sendingVariable .)
    OR              reduce using rule 42 (condition -> sendingVariable conditionOp sendingVariable .)
    RIGHTPAR        reduce using rule 42 (condition -> sendingVariable conditionOp sendingVariable .)
    SEMICOLON       reduce using rule 42 (condition -> sendingVariable conditionOp sendingVariable .)


state 146

    (36) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals . SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    SEMICOLON       shift and go to state 155


state 147

    (37) whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY

    NEWLINE         shift and go to state 156


state 148

    (61) parameters -> NAME COMMA . parameters
    (61) parameters -> . NAME COMMA parameters
    (62) parameters -> . NAME

    NAME            shift and go to state 135

    parameters                     shift and go to state 157

state 149

    (5) methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTKEY         shift and go to state 158


state 150

    (6) methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY

    NEWLINE         shift and go to state 159


state 151

    (19) asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation .

    NEWLINE         reduce using rule 19 (asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation .)
    $end            reduce using rule 19 (asignation -> NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation .)


state 152

    (85) arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .

    NEWLINE         reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    $end            reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    SUM             reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    SUBSTRACTION    reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    MULTIPLICATION  reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    DIVISION        reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    COMMA           reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    RIGHTPAR        reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    SEMICOLON       reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    EQUALS          reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    DIFFERENT       reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    LESSER          reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    GREATER         reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    LESSEREQUAL     reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    GREATEREQUAL    reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    AND             reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)
    OR              reduce using rule 85 (arithmetic -> moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR .)


state 153

    (40) conditionals -> LEFTPAR conditionals RIGHTPAR conditionalOp . conditionals
    (38) conditionals -> . condition
    (39) conditionals -> . condition conditionalOp conditionals
    (40) conditionals -> . LEFTPAR conditionals RIGHTPAR conditionalOp conditionals
    (41) conditionals -> . LEFTPAR conditionals RIGHTPAR
    (42) condition -> . sendingVariable conditionOp sendingVariable
    (65) sendingVariable -> . variableType
    (66) sendingVariable -> . arithmetic
    (67) sendingVariable -> . variable
    (68) sendingVariable -> . functionCall
    (75) variableType -> . numberType
    (76) variableType -> . stringType
    (77) variableType -> . booleanType
    (83) arithmetic -> . moreArithmetic arithmeticOp arithmeticDataType
    (84) arithmetic -> . LEFTPAR arithmetic RIGHTPAR
    (85) arithmetic -> . moreArithmetic arithmeticOp LEFTPAR arithmetic RIGHTPAR
    (86) arithmetic -> . arithmeticOp arithmeticDataType
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (78) numberType -> . INT
    (79) numberType -> . DOUBLE
    (80) stringType -> . STRING
    (81) booleanType -> . FALSE
    (82) booleanType -> . TRUE
    (87) moreArithmetic -> . arithmeticDataType
    (88) moreArithmetic -> . arithmetic
    (92) arithmeticOp -> . SUM
    (93) arithmeticOp -> . SUBSTRACTION
    (94) arithmeticOp -> . MULTIPLICATION
    (95) arithmeticOp -> . DIVISION
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (89) arithmeticDataType -> . numberType
    (90) arithmeticDataType -> . variable
    (91) arithmeticDataType -> . functionCall

    LEFTPAR         shift and go to state 101
    NAME            shift and go to state 57
    INT             shift and go to state 58
    DOUBLE          shift and go to state 59
    STRING          shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    SUM             shift and go to state 63
    SUBSTRACTION    shift and go to state 64
    MULTIPLICATION  shift and go to state 65
    DIVISION        shift and go to state 66

    conditionals                   shift and go to state 160
    condition                      shift and go to state 103
    sendingVariable                shift and go to state 104
    variableType                   shift and go to state 46
    arithmetic                     shift and go to state 47
    variable                       shift and go to state 48
    functionCall                   shift and go to state 49
    numberType                     shift and go to state 50
    stringType                     shift and go to state 51
    booleanType                    shift and go to state 52
    moreArithmetic                 shift and go to state 53
    arithmeticOp                   shift and go to state 54
    arithmeticDataType             shift and go to state 55
    vectorVariable                 shift and go to state 32

state 154

    (34) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY
    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (7) instructions -> . instruction NEWLINE instructions
    (8) instructions -> . empty
    (9) instruction -> . simple
    (10) instruction -> . complex
    (96) empty -> .
    (11) simple -> . asignation
    (12) simple -> . declaration
    (13) simple -> . read
    (14) simple -> . print
    (15) simple -> . functionCall
    (16) simple -> . return
    (17) simple -> . incdec
    (31) complex -> . ifCondition
    (32) complex -> . forCondition
    (33) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (26) read -> . READ LEFTPAR NAME RIGHTPAR
    (27) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (30) return -> . RETURN sendingVariable
    (43) incdec -> . preIncdec
    (44) incdec -> . postIncdec
    (34) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (36) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (37) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (45) preIncdec -> . INCREASE variable
    (46) preIncdec -> . DECREASE variable
    (47) postIncdec -> . variable INCREASE
    (48) postIncdec -> . variable DECREASE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    RIGHTKEY        reduce using rule 96 (empty -> .)
    NAME            shift and go to state 5
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    INCREASE        shift and go to state 29
    DECREASE        shift and go to state 31

    instructions                   shift and go to state 161
    instruction                    shift and go to state 162
    empty                          shift and go to state 163
    simple                         shift and go to state 6
    complex                        shift and go to state 7
    asignation                     shift and go to state 10
    declaration                    shift and go to state 11
    read                           shift and go to state 12
    print                          shift and go to state 13
    functionCall                   shift and go to state 14
    return                         shift and go to state 15
    incdec                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19
    preIncdec                      shift and go to state 24
    postIncdec                     shift and go to state 25
    variable                       shift and go to state 30
    vectorVariable                 shift and go to state 32

state 155

    (36) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON . incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (43) incdec -> . preIncdec
    (44) incdec -> . postIncdec
    (45) preIncdec -> . INCREASE variable
    (46) preIncdec -> . DECREASE variable
    (47) postIncdec -> . variable INCREASE
    (48) postIncdec -> . variable DECREASE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    INCREASE        shift and go to state 29
    DECREASE        shift and go to state 31
    NAME            shift and go to state 71

    incdec                         shift and go to state 164
    preIncdec                      shift and go to state 24
    postIncdec                     shift and go to state 25
    variable                       shift and go to state 30
    vectorVariable                 shift and go to state 32

state 156

    (37) whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY
    (7) instructions -> . instruction NEWLINE instructions
    (8) instructions -> . empty
    (9) instruction -> . simple
    (10) instruction -> . complex
    (96) empty -> .
    (11) simple -> . asignation
    (12) simple -> . declaration
    (13) simple -> . read
    (14) simple -> . print
    (15) simple -> . functionCall
    (16) simple -> . return
    (17) simple -> . incdec
    (31) complex -> . ifCondition
    (32) complex -> . forCondition
    (33) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (26) read -> . READ LEFTPAR NAME RIGHTPAR
    (27) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (30) return -> . RETURN sendingVariable
    (43) incdec -> . preIncdec
    (44) incdec -> . postIncdec
    (34) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (36) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (37) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (45) preIncdec -> . INCREASE variable
    (46) preIncdec -> . DECREASE variable
    (47) postIncdec -> . variable INCREASE
    (48) postIncdec -> . variable DECREASE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    RIGHTKEY        reduce using rule 96 (empty -> .)
    NAME            shift and go to state 5
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    INCREASE        shift and go to state 29
    DECREASE        shift and go to state 31

    instructions                   shift and go to state 165
    instruction                    shift and go to state 162
    empty                          shift and go to state 163
    simple                         shift and go to state 6
    complex                        shift and go to state 7
    asignation                     shift and go to state 10
    declaration                    shift and go to state 11
    read                           shift and go to state 12
    print                          shift and go to state 13
    functionCall                   shift and go to state 14
    return                         shift and go to state 15
    incdec                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19
    preIncdec                      shift and go to state 24
    postIncdec                     shift and go to state 25
    variable                       shift and go to state 30
    vectorVariable                 shift and go to state 32

state 157

    (61) parameters -> NAME COMMA parameters .

    RIGHTPAR        reduce using rule 61 (parameters -> NAME COMMA parameters .)


state 158

    (5) methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY

    NEWLINE         shift and go to state 166


state 159

    (6) methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY
    (7) instructions -> . instruction NEWLINE instructions
    (8) instructions -> . empty
    (9) instruction -> . simple
    (10) instruction -> . complex
    (96) empty -> .
    (11) simple -> . asignation
    (12) simple -> . declaration
    (13) simple -> . read
    (14) simple -> . print
    (15) simple -> . functionCall
    (16) simple -> . return
    (17) simple -> . incdec
    (31) complex -> . ifCondition
    (32) complex -> . forCondition
    (33) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (26) read -> . READ LEFTPAR NAME RIGHTPAR
    (27) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (30) return -> . RETURN sendingVariable
    (43) incdec -> . preIncdec
    (44) incdec -> . postIncdec
    (34) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (36) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (37) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (45) preIncdec -> . INCREASE variable
    (46) preIncdec -> . DECREASE variable
    (47) postIncdec -> . variable INCREASE
    (48) postIncdec -> . variable DECREASE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    RIGHTKEY        reduce using rule 96 (empty -> .)
    NAME            shift and go to state 5
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    INCREASE        shift and go to state 29
    DECREASE        shift and go to state 31

    instructions                   shift and go to state 167
    instruction                    shift and go to state 162
    empty                          shift and go to state 163
    simple                         shift and go to state 6
    complex                        shift and go to state 7
    asignation                     shift and go to state 10
    declaration                    shift and go to state 11
    read                           shift and go to state 12
    print                          shift and go to state 13
    functionCall                   shift and go to state 14
    return                         shift and go to state 15
    incdec                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19
    preIncdec                      shift and go to state 24
    postIncdec                     shift and go to state 25
    variable                       shift and go to state 30
    vectorVariable                 shift and go to state 32

state 160

    (40) conditionals -> LEFTPAR conditionals RIGHTPAR conditionalOp conditionals .

    RIGHTPAR        reduce using rule 40 (conditionals -> LEFTPAR conditionals RIGHTPAR conditionalOp conditionals .)
    SEMICOLON       reduce using rule 40 (conditionals -> LEFTPAR conditionals RIGHTPAR conditionalOp conditionals .)


state 161

    (34) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY
    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTKEY        shift and go to state 168


state 162

    (7) instructions -> instruction . NEWLINE instructions

    NEWLINE         shift and go to state 169


state 163

    (8) instructions -> empty .

    RIGHTKEY        reduce using rule 8 (instructions -> empty .)


state 164

    (36) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec . RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY

    RIGHTPAR        shift and go to state 170


state 165

    (37) whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY

    RIGHTKEY        shift and go to state 171


state 166

    (5) methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY
    (7) instructions -> . instruction NEWLINE instructions
    (8) instructions -> . empty
    (9) instruction -> . simple
    (10) instruction -> . complex
    (96) empty -> .
    (11) simple -> . asignation
    (12) simple -> . declaration
    (13) simple -> . read
    (14) simple -> . print
    (15) simple -> . functionCall
    (16) simple -> . return
    (17) simple -> . incdec
    (31) complex -> . ifCondition
    (32) complex -> . forCondition
    (33) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (26) read -> . READ LEFTPAR NAME RIGHTPAR
    (27) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (30) return -> . RETURN sendingVariable
    (43) incdec -> . preIncdec
    (44) incdec -> . postIncdec
    (34) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (36) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (37) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (45) preIncdec -> . INCREASE variable
    (46) preIncdec -> . DECREASE variable
    (47) postIncdec -> . variable INCREASE
    (48) postIncdec -> . variable DECREASE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    RIGHTKEY        reduce using rule 96 (empty -> .)
    NAME            shift and go to state 5
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    INCREASE        shift and go to state 29
    DECREASE        shift and go to state 31

    instructions                   shift and go to state 172
    instruction                    shift and go to state 162
    empty                          shift and go to state 163
    simple                         shift and go to state 6
    complex                        shift and go to state 7
    asignation                     shift and go to state 10
    declaration                    shift and go to state 11
    read                           shift and go to state 12
    print                          shift and go to state 13
    functionCall                   shift and go to state 14
    return                         shift and go to state 15
    incdec                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19
    preIncdec                      shift and go to state 24
    postIncdec                     shift and go to state 25
    variable                       shift and go to state 30
    vectorVariable                 shift and go to state 32

state 167

    (6) methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY

    RIGHTKEY        shift and go to state 173


state 168

    (34) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .
    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY . ELSE LEFTKEY NEWLINE instructions RIGHTKEY

    NEWLINE         reduce using rule 34 (ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 34 (ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    ELSE            shift and go to state 174


state 169

    (7) instructions -> instruction NEWLINE . instructions
    (7) instructions -> . instruction NEWLINE instructions
    (8) instructions -> . empty
    (9) instruction -> . simple
    (10) instruction -> . complex
    (96) empty -> .
    (11) simple -> . asignation
    (12) simple -> . declaration
    (13) simple -> . read
    (14) simple -> . print
    (15) simple -> . functionCall
    (16) simple -> . return
    (17) simple -> . incdec
    (31) complex -> . ifCondition
    (32) complex -> . forCondition
    (33) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (26) read -> . READ LEFTPAR NAME RIGHTPAR
    (27) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (30) return -> . RETURN sendingVariable
    (43) incdec -> . preIncdec
    (44) incdec -> . postIncdec
    (34) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (36) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (37) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (45) preIncdec -> . INCREASE variable
    (46) preIncdec -> . DECREASE variable
    (47) postIncdec -> . variable INCREASE
    (48) postIncdec -> . variable DECREASE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    RIGHTKEY        reduce using rule 96 (empty -> .)
    NAME            shift and go to state 5
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    INCREASE        shift and go to state 29
    DECREASE        shift and go to state 31

    instruction                    shift and go to state 162
    instructions                   shift and go to state 175
    empty                          shift and go to state 163
    simple                         shift and go to state 6
    complex                        shift and go to state 7
    asignation                     shift and go to state 10
    declaration                    shift and go to state 11
    read                           shift and go to state 12
    print                          shift and go to state 13
    functionCall                   shift and go to state 14
    return                         shift and go to state 15
    incdec                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19
    preIncdec                      shift and go to state 24
    postIncdec                     shift and go to state 25
    variable                       shift and go to state 30
    vectorVariable                 shift and go to state 32

state 170

    (36) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR . LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTKEY         shift and go to state 176


state 171

    (37) whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .

    NEWLINE         reduce using rule 37 (whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 37 (whileCondition -> WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)


state 172

    (5) methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY

    RIGHTKEY        shift and go to state 177


state 173

    (6) methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .

    NEWLINE         reduce using rule 6 (methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 6 (methodDefinition -> domain methodType NAME LEFTPAR RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)


state 174

    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE . LEFTKEY NEWLINE instructions RIGHTKEY

    LEFTKEY         shift and go to state 178


state 175

    (7) instructions -> instruction NEWLINE instructions .

    RIGHTKEY        reduce using rule 7 (instructions -> instruction NEWLINE instructions .)


state 176

    (36) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY . NEWLINE instructions RIGHTKEY

    NEWLINE         shift and go to state 179


state 177

    (5) methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .

    NEWLINE         reduce using rule 5 (methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 5 (methodDefinition -> domain methodType NAME LEFTPAR parameters RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)


state 178

    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY . NEWLINE instructions RIGHTKEY

    NEWLINE         shift and go to state 180


state 179

    (36) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE . instructions RIGHTKEY
    (7) instructions -> . instruction NEWLINE instructions
    (8) instructions -> . empty
    (9) instruction -> . simple
    (10) instruction -> . complex
    (96) empty -> .
    (11) simple -> . asignation
    (12) simple -> . declaration
    (13) simple -> . read
    (14) simple -> . print
    (15) simple -> . functionCall
    (16) simple -> . return
    (17) simple -> . incdec
    (31) complex -> . ifCondition
    (32) complex -> . forCondition
    (33) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (26) read -> . READ LEFTPAR NAME RIGHTPAR
    (27) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (30) return -> . RETURN sendingVariable
    (43) incdec -> . preIncdec
    (44) incdec -> . postIncdec
    (34) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (36) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (37) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (45) preIncdec -> . INCREASE variable
    (46) preIncdec -> . DECREASE variable
    (47) postIncdec -> . variable INCREASE
    (48) postIncdec -> . variable DECREASE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    RIGHTKEY        reduce using rule 96 (empty -> .)
    NAME            shift and go to state 5
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    INCREASE        shift and go to state 29
    DECREASE        shift and go to state 31

    declaration                    shift and go to state 11
    incdec                         shift and go to state 16
    instructions                   shift and go to state 181
    instruction                    shift and go to state 162
    empty                          shift and go to state 163
    simple                         shift and go to state 6
    complex                        shift and go to state 7
    asignation                     shift and go to state 10
    read                           shift and go to state 12
    print                          shift and go to state 13
    functionCall                   shift and go to state 14
    return                         shift and go to state 15
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19
    preIncdec                      shift and go to state 24
    postIncdec                     shift and go to state 25
    variable                       shift and go to state 30
    vectorVariable                 shift and go to state 32

state 180

    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE . instructions RIGHTKEY
    (7) instructions -> . instruction NEWLINE instructions
    (8) instructions -> . empty
    (9) instruction -> . simple
    (10) instruction -> . complex
    (96) empty -> .
    (11) simple -> . asignation
    (12) simple -> . declaration
    (13) simple -> . read
    (14) simple -> . print
    (15) simple -> . functionCall
    (16) simple -> . return
    (17) simple -> . incdec
    (31) complex -> . ifCondition
    (32) complex -> . forCondition
    (33) complex -> . whileCondition
    (18) asignation -> . NAME ASIGNATION dataTypeAsignation
    (19) asignation -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET ASIGNATION dataTypeAsignation
    (20) declaration -> . VARDECLARATION
    (21) declaration -> . VARDECLARATION ASIGNATION dataTypeAsignation
    (22) declaration -> . VARDECLARATION LEFTBRACKET dataLocalizatorType RIGHTBRACKET
    (26) read -> . READ LEFTPAR NAME RIGHTPAR
    (27) print -> . PRINT LEFTPAR sendingVariables RIGHTPAR
    (28) functionCall -> . NAME LEFTPAR sendingVariables RIGHTPAR
    (29) functionCall -> . NAME LEFTPAR empty RIGHTPAR
    (30) return -> . RETURN sendingVariable
    (43) incdec -> . preIncdec
    (44) incdec -> . postIncdec
    (34) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (35) ifCondition -> . IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY
    (36) forCondition -> . FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (37) whileCondition -> . WHILE LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY
    (45) preIncdec -> . INCREASE variable
    (46) preIncdec -> . DECREASE variable
    (47) postIncdec -> . variable INCREASE
    (48) postIncdec -> . variable DECREASE
    (69) variable -> . NAME
    (70) variable -> . vectorVariable
    (71) vectorVariable -> . NAME LEFTBRACKET dataLocalizatorType RIGHTBRACKET

    RIGHTKEY        reduce using rule 96 (empty -> .)
    NAME            shift and go to state 5
    VARDECLARATION  shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 23
    IF              shift and go to state 26
    FOR             shift and go to state 27
    WHILE           shift and go to state 28
    INCREASE        shift and go to state 29
    DECREASE        shift and go to state 31

    instructions                   shift and go to state 182
    instruction                    shift and go to state 162
    empty                          shift and go to state 163
    simple                         shift and go to state 6
    complex                        shift and go to state 7
    asignation                     shift and go to state 10
    declaration                    shift and go to state 11
    read                           shift and go to state 12
    print                          shift and go to state 13
    functionCall                   shift and go to state 14
    return                         shift and go to state 15
    incdec                         shift and go to state 16
    ifCondition                    shift and go to state 17
    forCondition                   shift and go to state 18
    whileCondition                 shift and go to state 19
    preIncdec                      shift and go to state 24
    postIncdec                     shift and go to state 25
    variable                       shift and go to state 30
    vectorVariable                 shift and go to state 32

state 181

    (36) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions . RIGHTKEY

    RIGHTKEY        shift and go to state 183


state 182

    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions . RIGHTKEY

    RIGHTKEY        shift and go to state 184


state 183

    (36) forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .

    NEWLINE         reduce using rule 36 (forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 36 (forCondition -> FOR LEFTPAR declaration SEMICOLON conditionals SEMICOLON incdec RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY .)


state 184

    (35) ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY .

    NEWLINE         reduce using rule 35 (ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY .)
    $end            reduce using rule 35 (ifCondition -> IF LEFTPAR conditionals RIGHTPAR LEFTKEY NEWLINE instructions RIGHTKEY ELSE LEFTKEY NEWLINE instructions RIGHTKEY .)

