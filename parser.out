Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    COMENTARIO
    CORCHETEDER
    CORCHETEIZQ
    IMPORT
    SWITCH

Grammar

Rule 0     S' -> inicial
Rule 1     inicial -> funcion instrucciones NEWLINE
Rule 2     indentacion -> vacio
Rule 3     indentacion -> TABULACION indentacion
Rule 4     funcion -> definicion_funcion instrucciones
Rule 5     funcion -> vacio
Rule 6     definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER
Rule 7     dominio -> PRIVATE
Rule 8     dominio -> PUBLIC
Rule 9     return -> VOID
Rule 10    return -> FUNCTION
Rule 11    parametro -> vacio
Rule 12    parametro -> NOMBRE parametro_extra
Rule 13    parametro_extra -> COMA NOMBRE parametro_extra
Rule 14    parametro_extra -> vacio
Rule 15    llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER
Rule 16    parametro_llamado -> vacio
Rule 17    parametro_llamado -> tipo_variable parametro_llamado_extra
Rule 18    parametro_llamado_extra -> COMA NOMBRE parametro_llamado_extra
Rule 19    parametro_llamado_extra -> vacio
Rule 20    instrucciones -> if NEWLINE
Rule 21    instrucciones -> for NEWLINE
Rule 22    instrucciones -> while NEWLINE
Rule 23    instrucciones -> print NEWLINE
Rule 24    instrucciones -> read NEWLINE
Rule 25    instrucciones -> incdec NEWLINE
Rule 26    instrucciones -> dec_variable NEWLINE
Rule 27    instrucciones -> asignacion NEWLINE
Rule 28    instrucciones -> llamado_funcion NEWLINE
Rule 29    instrucciones -> RETURN tipo_variable NEWLINE
Rule 30    instrucciones -> vacio
Rule 31    if -> indentacion IF PARIZQ condicion PARDER
Rule 32    else -> indentacion ELSE NEWLINE
Rule 33    for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER
Rule 34    incdec -> indentacion pre_incdec
Rule 35    incdec -> indentacion post_incdec
Rule 36    pre_incdec -> INCREMENTAR NOMBRE
Rule 37    pre_incdec -> DECREMENTAR NOMBRE
Rule 38    post_incdec -> NOMBRE INCREMENTAR
Rule 39    post_incdec -> NOMBRE DECREMENTAR
Rule 40    while -> indentacion WHILE PARIZQ condicion PARDER
Rule 41    print -> indentacion PRINT PARIZQ tipo_variable PARDER
Rule 42    read -> indentacion READ PARIZQ STRING PARDER
Rule 43    dec_variable -> indentacion DECVARIABLE ASIGNACION tipo_variable Op_Aritmetica
Rule 44    asignacion -> indentacion NOMBRE ASIGNACION tipo_variable Op_Aritmetica
Rule 45    operador_condicional -> DIFERENTE
Rule 46    operador_condicional -> IGUAL
Rule 47    operador_condicional -> MAYOR
Rule 48    operador_condicional -> MAYORIGUAL
Rule 49    operador_condicional -> MENOR
Rule 50    operador_condicional -> MENORIGUAL
Rule 51    condicion -> tipo_variable operador_condicional tipo_variable condicion_extra
Rule 52    condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra
Rule 53    condicion_extra -> vacio
Rule 54    tipo_variable -> NOMBRE
Rule 55    tipo_variable -> DOUBLE
Rule 56    tipo_variable -> INT
Rule 57    tipo_variable -> STRING
Rule 58    tipo_variable -> FALSE
Rule 59    tipo_variable -> TRUE
Rule 60    tipo_variable -> llamado_funcion
Rule 61    Op_Aritmetica -> Operador_Aritmetico tipo_variable Op_Aritmetica
Rule 62    Op_Aritmetica -> vacio
Rule 63    Operador_Aritmetico -> SUMA
Rule 64    Operador_Aritmetico -> RESTA
Rule 65    Operador_Aritmetico -> MULT
Rule 66    Operador_Aritmetico -> DIV
Rule 67    operador_logico -> AND
Rule 68    operador_logico -> OR
Rule 69    vacio -> <empty>

Terminals, with rules where they appear

AND                  : 67
ASIGNACION           : 33 43 44
BREAK                : 
CASE                 : 
COMA                 : 13 18
COMENTARIO           : 
CORCHETEDER          : 
CORCHETEIZQ          : 
DECREMENTAR          : 37 39
DECVARIABLE          : 33 43
DIFERENTE            : 45
DIV                  : 66
DOUBLE               : 55
ELSE                 : 32
FALSE                : 58
FOR                  : 33
FUNCTION             : 10
IF                   : 31
IGUAL                : 46
IMPORT               : 
INCREMENTAR          : 36 38
INT                  : 33 56
MAYOR                : 47
MAYORIGUAL           : 48
MENOR                : 49
MENORIGUAL           : 50
MULT                 : 65
NEWLINE              : 1 20 21 22 23 24 25 26 27 28 29 32
NOMBRE               : 6 12 13 15 18 36 37 38 39 44 54
OR                   : 68
PARDER               : 6 15 31 33 40 41 42
PARIZQ               : 6 15 31 33 40 41 42
PRINT                : 41
PRIVATE              : 7
PUBLIC               : 8
PUNTOYCOMA           : 33 33
READ                 : 42
RESTA                : 64
RETURN               : 29
STRING               : 42 57
SUMA                 : 63
SWITCH               : 
TABULACION           : 3
TRUE                 : 59
VOID                 : 9
WHILE                : 40
error                : 

Nonterminals, with rules where they appear

Op_Aritmetica        : 43 44 61
Operador_Aritmetico  : 61
asignacion           : 27
condicion            : 31 33 40
condicion_extra      : 51 52
dec_variable         : 26
definicion_funcion   : 4
dominio              : 6
else                 : 
for                  : 21
funcion              : 1
if                   : 20
incdec               : 25 33
indentacion          : 3 15 31 32 33 34 35 40 41 42 43 44
inicial              : 0
instrucciones        : 1 4
llamado_funcion      : 28 60
operador_condicional : 51 52
operador_logico      : 52
parametro            : 6
parametro_extra      : 12 13
parametro_llamado    : 15
parametro_llamado_extra : 17 18
post_incdec          : 35
pre_incdec           : 34
print                : 23
read                 : 24
return               : 6
tipo_variable        : 17 29 41 43 44 51 51 52 52 61
vacio                : 2 5 11 14 16 19 30 53 62
while                : 22

Parsing method: LALR

state 0

    (0) S' -> . inicial
    (1) inicial -> . funcion instrucciones NEWLINE
    (4) funcion -> . definicion_funcion instrucciones
    (5) funcion -> . vacio
    (6) definicion_funcion -> . dominio return NOMBRE PARIZQ parametro PARDER
    (69) vacio -> .
    (7) dominio -> . PRIVATE
    (8) dominio -> . PUBLIC

    RETURN          reduce using rule 69 (vacio -> .)
    TABULACION      reduce using rule 69 (vacio -> .)
    NEWLINE         reduce using rule 69 (vacio -> .)
    IF              reduce using rule 69 (vacio -> .)
    FOR             reduce using rule 69 (vacio -> .)
    WHILE           reduce using rule 69 (vacio -> .)
    PRINT           reduce using rule 69 (vacio -> .)
    READ            reduce using rule 69 (vacio -> .)
    DECVARIABLE     reduce using rule 69 (vacio -> .)
    NOMBRE          reduce using rule 69 (vacio -> .)
    INCREMENTAR     reduce using rule 69 (vacio -> .)
    DECREMENTAR     reduce using rule 69 (vacio -> .)
    PRIVATE         shift and go to state 6
    PUBLIC          shift and go to state 7

    inicial                        shift and go to state 1
    funcion                        shift and go to state 2
    definicion_funcion             shift and go to state 3
    vacio                          shift and go to state 4
    dominio                        shift and go to state 5

state 1

    (0) S' -> inicial .



state 2

    (1) inicial -> funcion . instrucciones NEWLINE
    (20) instrucciones -> . if NEWLINE
    (21) instrucciones -> . for NEWLINE
    (22) instrucciones -> . while NEWLINE
    (23) instrucciones -> . print NEWLINE
    (24) instrucciones -> . read NEWLINE
    (25) instrucciones -> . incdec NEWLINE
    (26) instrucciones -> . dec_variable NEWLINE
    (27) instrucciones -> . asignacion NEWLINE
    (28) instrucciones -> . llamado_funcion NEWLINE
    (29) instrucciones -> . RETURN tipo_variable NEWLINE
    (30) instrucciones -> . vacio
    (31) if -> . indentacion IF PARIZQ condicion PARDER
    (33) for -> . indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER
    (40) while -> . indentacion WHILE PARIZQ condicion PARDER
    (41) print -> . indentacion PRINT PARIZQ tipo_variable PARDER
    (42) read -> . indentacion READ PARIZQ STRING PARDER
    (34) incdec -> . indentacion pre_incdec
    (35) incdec -> . indentacion post_incdec
    (43) dec_variable -> . indentacion DECVARIABLE ASIGNACION tipo_variable Op_Aritmetica
    (44) asignacion -> . indentacion NOMBRE ASIGNACION tipo_variable Op_Aritmetica
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (69) vacio -> .
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion

    RETURN          shift and go to state 18
    NEWLINE         reduce using rule 69 (vacio -> .)
    IF              reduce using rule 69 (vacio -> .)
    FOR             reduce using rule 69 (vacio -> .)
    WHILE           reduce using rule 69 (vacio -> .)
    PRINT           reduce using rule 69 (vacio -> .)
    READ            reduce using rule 69 (vacio -> .)
    DECVARIABLE     reduce using rule 69 (vacio -> .)
    NOMBRE          reduce using rule 69 (vacio -> .)
    INCREMENTAR     reduce using rule 69 (vacio -> .)
    DECREMENTAR     reduce using rule 69 (vacio -> .)
    TABULACION      shift and go to state 21

    instrucciones                  shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    print                          shift and go to state 12
    read                           shift and go to state 13
    incdec                         shift and go to state 14
    dec_variable                   shift and go to state 15
    asignacion                     shift and go to state 16
    llamado_funcion                shift and go to state 17
    vacio                          shift and go to state 19
    indentacion                    shift and go to state 20

state 3

    (4) funcion -> definicion_funcion . instrucciones
    (20) instrucciones -> . if NEWLINE
    (21) instrucciones -> . for NEWLINE
    (22) instrucciones -> . while NEWLINE
    (23) instrucciones -> . print NEWLINE
    (24) instrucciones -> . read NEWLINE
    (25) instrucciones -> . incdec NEWLINE
    (26) instrucciones -> . dec_variable NEWLINE
    (27) instrucciones -> . asignacion NEWLINE
    (28) instrucciones -> . llamado_funcion NEWLINE
    (29) instrucciones -> . RETURN tipo_variable NEWLINE
    (30) instrucciones -> . vacio
    (31) if -> . indentacion IF PARIZQ condicion PARDER
    (33) for -> . indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER
    (40) while -> . indentacion WHILE PARIZQ condicion PARDER
    (41) print -> . indentacion PRINT PARIZQ tipo_variable PARDER
    (42) read -> . indentacion READ PARIZQ STRING PARDER
    (34) incdec -> . indentacion pre_incdec
    (35) incdec -> . indentacion post_incdec
    (43) dec_variable -> . indentacion DECVARIABLE ASIGNACION tipo_variable Op_Aritmetica
    (44) asignacion -> . indentacion NOMBRE ASIGNACION tipo_variable Op_Aritmetica
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (69) vacio -> .
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for TABULACION resolved as shift
    RETURN          shift and go to state 18
    NEWLINE         reduce using rule 69 (vacio -> .)
    IF              reduce using rule 69 (vacio -> .)
    FOR             reduce using rule 69 (vacio -> .)
    WHILE           reduce using rule 69 (vacio -> .)
    PRINT           reduce using rule 69 (vacio -> .)
    READ            reduce using rule 69 (vacio -> .)
    DECVARIABLE     reduce using rule 69 (vacio -> .)
    NOMBRE          reduce using rule 69 (vacio -> .)
    INCREMENTAR     reduce using rule 69 (vacio -> .)
    DECREMENTAR     reduce using rule 69 (vacio -> .)
    TABULACION      shift and go to state 21

  ! RETURN          [ reduce using rule 69 (vacio -> .) ]
  ! TABULACION      [ reduce using rule 69 (vacio -> .) ]

    instrucciones                  shift and go to state 22
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    print                          shift and go to state 12
    read                           shift and go to state 13
    incdec                         shift and go to state 14
    dec_variable                   shift and go to state 15
    asignacion                     shift and go to state 16
    llamado_funcion                shift and go to state 17
    vacio                          shift and go to state 19
    indentacion                    shift and go to state 20

state 4

    (5) funcion -> vacio .

    RETURN          reduce using rule 5 (funcion -> vacio .)
    TABULACION      reduce using rule 5 (funcion -> vacio .)
    NEWLINE         reduce using rule 5 (funcion -> vacio .)
    IF              reduce using rule 5 (funcion -> vacio .)
    FOR             reduce using rule 5 (funcion -> vacio .)
    WHILE           reduce using rule 5 (funcion -> vacio .)
    PRINT           reduce using rule 5 (funcion -> vacio .)
    READ            reduce using rule 5 (funcion -> vacio .)
    DECVARIABLE     reduce using rule 5 (funcion -> vacio .)
    NOMBRE          reduce using rule 5 (funcion -> vacio .)
    INCREMENTAR     reduce using rule 5 (funcion -> vacio .)
    DECREMENTAR     reduce using rule 5 (funcion -> vacio .)


state 5

    (6) definicion_funcion -> dominio . return NOMBRE PARIZQ parametro PARDER
    (9) return -> . VOID
    (10) return -> . FUNCTION

    VOID            shift and go to state 24
    FUNCTION        shift and go to state 25

    return                         shift and go to state 23

state 6

    (7) dominio -> PRIVATE .

    VOID            reduce using rule 7 (dominio -> PRIVATE .)
    FUNCTION        reduce using rule 7 (dominio -> PRIVATE .)


state 7

    (8) dominio -> PUBLIC .

    VOID            reduce using rule 8 (dominio -> PUBLIC .)
    FUNCTION        reduce using rule 8 (dominio -> PUBLIC .)


state 8

    (1) inicial -> funcion instrucciones . NEWLINE

    NEWLINE         shift and go to state 26


state 9

    (20) instrucciones -> if . NEWLINE

    NEWLINE         shift and go to state 27


state 10

    (21) instrucciones -> for . NEWLINE

    NEWLINE         shift and go to state 28


state 11

    (22) instrucciones -> while . NEWLINE

    NEWLINE         shift and go to state 29


state 12

    (23) instrucciones -> print . NEWLINE

    NEWLINE         shift and go to state 30


state 13

    (24) instrucciones -> read . NEWLINE

    NEWLINE         shift and go to state 31


state 14

    (25) instrucciones -> incdec . NEWLINE

    NEWLINE         shift and go to state 32


state 15

    (26) instrucciones -> dec_variable . NEWLINE

    NEWLINE         shift and go to state 33


state 16

    (27) instrucciones -> asignacion . NEWLINE

    NEWLINE         shift and go to state 34


state 17

    (28) instrucciones -> llamado_funcion . NEWLINE

    NEWLINE         shift and go to state 35


state 18

    (29) instrucciones -> RETURN . tipo_variable NEWLINE
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    tipo_variable                  shift and go to state 36
    llamado_funcion                shift and go to state 43
    indentacion                    shift and go to state 44
    vacio                          shift and go to state 45

state 19

    (30) instrucciones -> vacio .
    (2) indentacion -> vacio .

  ! reduce/reduce conflict for IF resolved using rule 2 (indentacion -> vacio .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (indentacion -> vacio .)
  ! reduce/reduce conflict for WHILE resolved using rule 2 (indentacion -> vacio .)
  ! reduce/reduce conflict for PRINT resolved using rule 2 (indentacion -> vacio .)
  ! reduce/reduce conflict for READ resolved using rule 2 (indentacion -> vacio .)
  ! reduce/reduce conflict for DECVARIABLE resolved using rule 2 (indentacion -> vacio .)
  ! reduce/reduce conflict for NOMBRE resolved using rule 2 (indentacion -> vacio .)
  ! reduce/reduce conflict for INCREMENTAR resolved using rule 2 (indentacion -> vacio .)
  ! reduce/reduce conflict for DECREMENTAR resolved using rule 2 (indentacion -> vacio .)
    NEWLINE         reduce using rule 30 (instrucciones -> vacio .)
    RETURN          reduce using rule 30 (instrucciones -> vacio .)
    TABULACION      reduce using rule 30 (instrucciones -> vacio .)
    IF              reduce using rule 2 (indentacion -> vacio .)
    FOR             reduce using rule 2 (indentacion -> vacio .)
    WHILE           reduce using rule 2 (indentacion -> vacio .)
    PRINT           reduce using rule 2 (indentacion -> vacio .)
    READ            reduce using rule 2 (indentacion -> vacio .)
    DECVARIABLE     reduce using rule 2 (indentacion -> vacio .)
    NOMBRE          reduce using rule 2 (indentacion -> vacio .)
    INCREMENTAR     reduce using rule 2 (indentacion -> vacio .)
    DECREMENTAR     reduce using rule 2 (indentacion -> vacio .)

  ! IF              [ reduce using rule 30 (instrucciones -> vacio .) ]
  ! FOR             [ reduce using rule 30 (instrucciones -> vacio .) ]
  ! WHILE           [ reduce using rule 30 (instrucciones -> vacio .) ]
  ! PRINT           [ reduce using rule 30 (instrucciones -> vacio .) ]
  ! READ            [ reduce using rule 30 (instrucciones -> vacio .) ]
  ! DECVARIABLE     [ reduce using rule 30 (instrucciones -> vacio .) ]
  ! NOMBRE          [ reduce using rule 30 (instrucciones -> vacio .) ]
  ! INCREMENTAR     [ reduce using rule 30 (instrucciones -> vacio .) ]
  ! DECREMENTAR     [ reduce using rule 30 (instrucciones -> vacio .) ]


state 20

    (31) if -> indentacion . IF PARIZQ condicion PARDER
    (33) for -> indentacion . FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER
    (40) while -> indentacion . WHILE PARIZQ condicion PARDER
    (41) print -> indentacion . PRINT PARIZQ tipo_variable PARDER
    (42) read -> indentacion . READ PARIZQ STRING PARDER
    (34) incdec -> indentacion . pre_incdec
    (35) incdec -> indentacion . post_incdec
    (43) dec_variable -> indentacion . DECVARIABLE ASIGNACION tipo_variable Op_Aritmetica
    (44) asignacion -> indentacion . NOMBRE ASIGNACION tipo_variable Op_Aritmetica
    (15) llamado_funcion -> indentacion . NOMBRE PARIZQ parametro_llamado PARDER
    (36) pre_incdec -> . INCREMENTAR NOMBRE
    (37) pre_incdec -> . DECREMENTAR NOMBRE
    (38) post_incdec -> . NOMBRE INCREMENTAR
    (39) post_incdec -> . NOMBRE DECREMENTAR

    IF              shift and go to state 46
    FOR             shift and go to state 47
    WHILE           shift and go to state 49
    PRINT           shift and go to state 50
    READ            shift and go to state 51
    DECVARIABLE     shift and go to state 48
    NOMBRE          shift and go to state 54
    INCREMENTAR     shift and go to state 55
    DECREMENTAR     shift and go to state 56

    pre_incdec                     shift and go to state 52
    post_incdec                    shift and go to state 53

state 21

    (3) indentacion -> TABULACION . indentacion
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

    TABULACION      shift and go to state 21
    IF              reduce using rule 69 (vacio -> .)
    FOR             reduce using rule 69 (vacio -> .)
    WHILE           reduce using rule 69 (vacio -> .)
    PRINT           reduce using rule 69 (vacio -> .)
    READ            reduce using rule 69 (vacio -> .)
    DECVARIABLE     reduce using rule 69 (vacio -> .)
    NOMBRE          reduce using rule 69 (vacio -> .)
    INCREMENTAR     reduce using rule 69 (vacio -> .)
    DECREMENTAR     reduce using rule 69 (vacio -> .)

    indentacion                    shift and go to state 57
    vacio                          shift and go to state 45

state 22

    (4) funcion -> definicion_funcion instrucciones .

    RETURN          reduce using rule 4 (funcion -> definicion_funcion instrucciones .)
    TABULACION      reduce using rule 4 (funcion -> definicion_funcion instrucciones .)
    NEWLINE         reduce using rule 4 (funcion -> definicion_funcion instrucciones .)
    IF              reduce using rule 4 (funcion -> definicion_funcion instrucciones .)
    FOR             reduce using rule 4 (funcion -> definicion_funcion instrucciones .)
    WHILE           reduce using rule 4 (funcion -> definicion_funcion instrucciones .)
    PRINT           reduce using rule 4 (funcion -> definicion_funcion instrucciones .)
    READ            reduce using rule 4 (funcion -> definicion_funcion instrucciones .)
    DECVARIABLE     reduce using rule 4 (funcion -> definicion_funcion instrucciones .)
    NOMBRE          reduce using rule 4 (funcion -> definicion_funcion instrucciones .)
    INCREMENTAR     reduce using rule 4 (funcion -> definicion_funcion instrucciones .)
    DECREMENTAR     reduce using rule 4 (funcion -> definicion_funcion instrucciones .)


state 23

    (6) definicion_funcion -> dominio return . NOMBRE PARIZQ parametro PARDER

    NOMBRE          shift and go to state 58


state 24

    (9) return -> VOID .

    NOMBRE          reduce using rule 9 (return -> VOID .)


state 25

    (10) return -> FUNCTION .

    NOMBRE          reduce using rule 10 (return -> FUNCTION .)


state 26

    (1) inicial -> funcion instrucciones NEWLINE .

    $end            reduce using rule 1 (inicial -> funcion instrucciones NEWLINE .)


state 27

    (20) instrucciones -> if NEWLINE .

    NEWLINE         reduce using rule 20 (instrucciones -> if NEWLINE .)
    RETURN          reduce using rule 20 (instrucciones -> if NEWLINE .)
    TABULACION      reduce using rule 20 (instrucciones -> if NEWLINE .)
    IF              reduce using rule 20 (instrucciones -> if NEWLINE .)
    FOR             reduce using rule 20 (instrucciones -> if NEWLINE .)
    WHILE           reduce using rule 20 (instrucciones -> if NEWLINE .)
    PRINT           reduce using rule 20 (instrucciones -> if NEWLINE .)
    READ            reduce using rule 20 (instrucciones -> if NEWLINE .)
    DECVARIABLE     reduce using rule 20 (instrucciones -> if NEWLINE .)
    NOMBRE          reduce using rule 20 (instrucciones -> if NEWLINE .)
    INCREMENTAR     reduce using rule 20 (instrucciones -> if NEWLINE .)
    DECREMENTAR     reduce using rule 20 (instrucciones -> if NEWLINE .)


state 28

    (21) instrucciones -> for NEWLINE .

    NEWLINE         reduce using rule 21 (instrucciones -> for NEWLINE .)
    RETURN          reduce using rule 21 (instrucciones -> for NEWLINE .)
    TABULACION      reduce using rule 21 (instrucciones -> for NEWLINE .)
    IF              reduce using rule 21 (instrucciones -> for NEWLINE .)
    FOR             reduce using rule 21 (instrucciones -> for NEWLINE .)
    WHILE           reduce using rule 21 (instrucciones -> for NEWLINE .)
    PRINT           reduce using rule 21 (instrucciones -> for NEWLINE .)
    READ            reduce using rule 21 (instrucciones -> for NEWLINE .)
    DECVARIABLE     reduce using rule 21 (instrucciones -> for NEWLINE .)
    NOMBRE          reduce using rule 21 (instrucciones -> for NEWLINE .)
    INCREMENTAR     reduce using rule 21 (instrucciones -> for NEWLINE .)
    DECREMENTAR     reduce using rule 21 (instrucciones -> for NEWLINE .)


state 29

    (22) instrucciones -> while NEWLINE .

    NEWLINE         reduce using rule 22 (instrucciones -> while NEWLINE .)
    RETURN          reduce using rule 22 (instrucciones -> while NEWLINE .)
    TABULACION      reduce using rule 22 (instrucciones -> while NEWLINE .)
    IF              reduce using rule 22 (instrucciones -> while NEWLINE .)
    FOR             reduce using rule 22 (instrucciones -> while NEWLINE .)
    WHILE           reduce using rule 22 (instrucciones -> while NEWLINE .)
    PRINT           reduce using rule 22 (instrucciones -> while NEWLINE .)
    READ            reduce using rule 22 (instrucciones -> while NEWLINE .)
    DECVARIABLE     reduce using rule 22 (instrucciones -> while NEWLINE .)
    NOMBRE          reduce using rule 22 (instrucciones -> while NEWLINE .)
    INCREMENTAR     reduce using rule 22 (instrucciones -> while NEWLINE .)
    DECREMENTAR     reduce using rule 22 (instrucciones -> while NEWLINE .)


state 30

    (23) instrucciones -> print NEWLINE .

    NEWLINE         reduce using rule 23 (instrucciones -> print NEWLINE .)
    RETURN          reduce using rule 23 (instrucciones -> print NEWLINE .)
    TABULACION      reduce using rule 23 (instrucciones -> print NEWLINE .)
    IF              reduce using rule 23 (instrucciones -> print NEWLINE .)
    FOR             reduce using rule 23 (instrucciones -> print NEWLINE .)
    WHILE           reduce using rule 23 (instrucciones -> print NEWLINE .)
    PRINT           reduce using rule 23 (instrucciones -> print NEWLINE .)
    READ            reduce using rule 23 (instrucciones -> print NEWLINE .)
    DECVARIABLE     reduce using rule 23 (instrucciones -> print NEWLINE .)
    NOMBRE          reduce using rule 23 (instrucciones -> print NEWLINE .)
    INCREMENTAR     reduce using rule 23 (instrucciones -> print NEWLINE .)
    DECREMENTAR     reduce using rule 23 (instrucciones -> print NEWLINE .)


state 31

    (24) instrucciones -> read NEWLINE .

    NEWLINE         reduce using rule 24 (instrucciones -> read NEWLINE .)
    RETURN          reduce using rule 24 (instrucciones -> read NEWLINE .)
    TABULACION      reduce using rule 24 (instrucciones -> read NEWLINE .)
    IF              reduce using rule 24 (instrucciones -> read NEWLINE .)
    FOR             reduce using rule 24 (instrucciones -> read NEWLINE .)
    WHILE           reduce using rule 24 (instrucciones -> read NEWLINE .)
    PRINT           reduce using rule 24 (instrucciones -> read NEWLINE .)
    READ            reduce using rule 24 (instrucciones -> read NEWLINE .)
    DECVARIABLE     reduce using rule 24 (instrucciones -> read NEWLINE .)
    NOMBRE          reduce using rule 24 (instrucciones -> read NEWLINE .)
    INCREMENTAR     reduce using rule 24 (instrucciones -> read NEWLINE .)
    DECREMENTAR     reduce using rule 24 (instrucciones -> read NEWLINE .)


state 32

    (25) instrucciones -> incdec NEWLINE .

    NEWLINE         reduce using rule 25 (instrucciones -> incdec NEWLINE .)
    RETURN          reduce using rule 25 (instrucciones -> incdec NEWLINE .)
    TABULACION      reduce using rule 25 (instrucciones -> incdec NEWLINE .)
    IF              reduce using rule 25 (instrucciones -> incdec NEWLINE .)
    FOR             reduce using rule 25 (instrucciones -> incdec NEWLINE .)
    WHILE           reduce using rule 25 (instrucciones -> incdec NEWLINE .)
    PRINT           reduce using rule 25 (instrucciones -> incdec NEWLINE .)
    READ            reduce using rule 25 (instrucciones -> incdec NEWLINE .)
    DECVARIABLE     reduce using rule 25 (instrucciones -> incdec NEWLINE .)
    NOMBRE          reduce using rule 25 (instrucciones -> incdec NEWLINE .)
    INCREMENTAR     reduce using rule 25 (instrucciones -> incdec NEWLINE .)
    DECREMENTAR     reduce using rule 25 (instrucciones -> incdec NEWLINE .)


state 33

    (26) instrucciones -> dec_variable NEWLINE .

    NEWLINE         reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)
    RETURN          reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)
    TABULACION      reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)
    IF              reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)
    FOR             reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)
    WHILE           reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)
    PRINT           reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)
    READ            reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)
    DECVARIABLE     reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)
    NOMBRE          reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)
    INCREMENTAR     reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)
    DECREMENTAR     reduce using rule 26 (instrucciones -> dec_variable NEWLINE .)


state 34

    (27) instrucciones -> asignacion NEWLINE .

    NEWLINE         reduce using rule 27 (instrucciones -> asignacion NEWLINE .)
    RETURN          reduce using rule 27 (instrucciones -> asignacion NEWLINE .)
    TABULACION      reduce using rule 27 (instrucciones -> asignacion NEWLINE .)
    IF              reduce using rule 27 (instrucciones -> asignacion NEWLINE .)
    FOR             reduce using rule 27 (instrucciones -> asignacion NEWLINE .)
    WHILE           reduce using rule 27 (instrucciones -> asignacion NEWLINE .)
    PRINT           reduce using rule 27 (instrucciones -> asignacion NEWLINE .)
    READ            reduce using rule 27 (instrucciones -> asignacion NEWLINE .)
    DECVARIABLE     reduce using rule 27 (instrucciones -> asignacion NEWLINE .)
    NOMBRE          reduce using rule 27 (instrucciones -> asignacion NEWLINE .)
    INCREMENTAR     reduce using rule 27 (instrucciones -> asignacion NEWLINE .)
    DECREMENTAR     reduce using rule 27 (instrucciones -> asignacion NEWLINE .)


state 35

    (28) instrucciones -> llamado_funcion NEWLINE .

    NEWLINE         reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)
    RETURN          reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)
    TABULACION      reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)
    IF              reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)
    FOR             reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)
    WHILE           reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)
    PRINT           reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)
    READ            reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)
    DECVARIABLE     reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)
    NOMBRE          reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)
    INCREMENTAR     reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)
    DECREMENTAR     reduce using rule 28 (instrucciones -> llamado_funcion NEWLINE .)


state 36

    (29) instrucciones -> RETURN tipo_variable . NEWLINE

    NEWLINE         shift and go to state 59


state 37

    (54) tipo_variable -> NOMBRE .

    NEWLINE         reduce using rule 54 (tipo_variable -> NOMBRE .)
    DIFERENTE       reduce using rule 54 (tipo_variable -> NOMBRE .)
    IGUAL           reduce using rule 54 (tipo_variable -> NOMBRE .)
    MAYOR           reduce using rule 54 (tipo_variable -> NOMBRE .)
    MAYORIGUAL      reduce using rule 54 (tipo_variable -> NOMBRE .)
    MENOR           reduce using rule 54 (tipo_variable -> NOMBRE .)
    MENORIGUAL      reduce using rule 54 (tipo_variable -> NOMBRE .)
    SUMA            reduce using rule 54 (tipo_variable -> NOMBRE .)
    RESTA           reduce using rule 54 (tipo_variable -> NOMBRE .)
    MULT            reduce using rule 54 (tipo_variable -> NOMBRE .)
    DIV             reduce using rule 54 (tipo_variable -> NOMBRE .)
    PARDER          reduce using rule 54 (tipo_variable -> NOMBRE .)
    COMA            reduce using rule 54 (tipo_variable -> NOMBRE .)
    AND             reduce using rule 54 (tipo_variable -> NOMBRE .)
    OR              reduce using rule 54 (tipo_variable -> NOMBRE .)
    PUNTOYCOMA      reduce using rule 54 (tipo_variable -> NOMBRE .)


state 38

    (55) tipo_variable -> DOUBLE .

    NEWLINE         reduce using rule 55 (tipo_variable -> DOUBLE .)
    DIFERENTE       reduce using rule 55 (tipo_variable -> DOUBLE .)
    IGUAL           reduce using rule 55 (tipo_variable -> DOUBLE .)
    MAYOR           reduce using rule 55 (tipo_variable -> DOUBLE .)
    MAYORIGUAL      reduce using rule 55 (tipo_variable -> DOUBLE .)
    MENOR           reduce using rule 55 (tipo_variable -> DOUBLE .)
    MENORIGUAL      reduce using rule 55 (tipo_variable -> DOUBLE .)
    SUMA            reduce using rule 55 (tipo_variable -> DOUBLE .)
    RESTA           reduce using rule 55 (tipo_variable -> DOUBLE .)
    MULT            reduce using rule 55 (tipo_variable -> DOUBLE .)
    DIV             reduce using rule 55 (tipo_variable -> DOUBLE .)
    PARDER          reduce using rule 55 (tipo_variable -> DOUBLE .)
    COMA            reduce using rule 55 (tipo_variable -> DOUBLE .)
    AND             reduce using rule 55 (tipo_variable -> DOUBLE .)
    OR              reduce using rule 55 (tipo_variable -> DOUBLE .)
    PUNTOYCOMA      reduce using rule 55 (tipo_variable -> DOUBLE .)


state 39

    (56) tipo_variable -> INT .

    NEWLINE         reduce using rule 56 (tipo_variable -> INT .)
    DIFERENTE       reduce using rule 56 (tipo_variable -> INT .)
    IGUAL           reduce using rule 56 (tipo_variable -> INT .)
    MAYOR           reduce using rule 56 (tipo_variable -> INT .)
    MAYORIGUAL      reduce using rule 56 (tipo_variable -> INT .)
    MENOR           reduce using rule 56 (tipo_variable -> INT .)
    MENORIGUAL      reduce using rule 56 (tipo_variable -> INT .)
    SUMA            reduce using rule 56 (tipo_variable -> INT .)
    RESTA           reduce using rule 56 (tipo_variable -> INT .)
    MULT            reduce using rule 56 (tipo_variable -> INT .)
    DIV             reduce using rule 56 (tipo_variable -> INT .)
    PARDER          reduce using rule 56 (tipo_variable -> INT .)
    COMA            reduce using rule 56 (tipo_variable -> INT .)
    AND             reduce using rule 56 (tipo_variable -> INT .)
    OR              reduce using rule 56 (tipo_variable -> INT .)
    PUNTOYCOMA      reduce using rule 56 (tipo_variable -> INT .)


state 40

    (57) tipo_variable -> STRING .

    NEWLINE         reduce using rule 57 (tipo_variable -> STRING .)
    DIFERENTE       reduce using rule 57 (tipo_variable -> STRING .)
    IGUAL           reduce using rule 57 (tipo_variable -> STRING .)
    MAYOR           reduce using rule 57 (tipo_variable -> STRING .)
    MAYORIGUAL      reduce using rule 57 (tipo_variable -> STRING .)
    MENOR           reduce using rule 57 (tipo_variable -> STRING .)
    MENORIGUAL      reduce using rule 57 (tipo_variable -> STRING .)
    SUMA            reduce using rule 57 (tipo_variable -> STRING .)
    RESTA           reduce using rule 57 (tipo_variable -> STRING .)
    MULT            reduce using rule 57 (tipo_variable -> STRING .)
    DIV             reduce using rule 57 (tipo_variable -> STRING .)
    PARDER          reduce using rule 57 (tipo_variable -> STRING .)
    COMA            reduce using rule 57 (tipo_variable -> STRING .)
    AND             reduce using rule 57 (tipo_variable -> STRING .)
    OR              reduce using rule 57 (tipo_variable -> STRING .)
    PUNTOYCOMA      reduce using rule 57 (tipo_variable -> STRING .)


state 41

    (58) tipo_variable -> FALSE .

    NEWLINE         reduce using rule 58 (tipo_variable -> FALSE .)
    DIFERENTE       reduce using rule 58 (tipo_variable -> FALSE .)
    IGUAL           reduce using rule 58 (tipo_variable -> FALSE .)
    MAYOR           reduce using rule 58 (tipo_variable -> FALSE .)
    MAYORIGUAL      reduce using rule 58 (tipo_variable -> FALSE .)
    MENOR           reduce using rule 58 (tipo_variable -> FALSE .)
    MENORIGUAL      reduce using rule 58 (tipo_variable -> FALSE .)
    SUMA            reduce using rule 58 (tipo_variable -> FALSE .)
    RESTA           reduce using rule 58 (tipo_variable -> FALSE .)
    MULT            reduce using rule 58 (tipo_variable -> FALSE .)
    DIV             reduce using rule 58 (tipo_variable -> FALSE .)
    PARDER          reduce using rule 58 (tipo_variable -> FALSE .)
    COMA            reduce using rule 58 (tipo_variable -> FALSE .)
    AND             reduce using rule 58 (tipo_variable -> FALSE .)
    OR              reduce using rule 58 (tipo_variable -> FALSE .)
    PUNTOYCOMA      reduce using rule 58 (tipo_variable -> FALSE .)


state 42

    (59) tipo_variable -> TRUE .

    NEWLINE         reduce using rule 59 (tipo_variable -> TRUE .)
    DIFERENTE       reduce using rule 59 (tipo_variable -> TRUE .)
    IGUAL           reduce using rule 59 (tipo_variable -> TRUE .)
    MAYOR           reduce using rule 59 (tipo_variable -> TRUE .)
    MAYORIGUAL      reduce using rule 59 (tipo_variable -> TRUE .)
    MENOR           reduce using rule 59 (tipo_variable -> TRUE .)
    MENORIGUAL      reduce using rule 59 (tipo_variable -> TRUE .)
    SUMA            reduce using rule 59 (tipo_variable -> TRUE .)
    RESTA           reduce using rule 59 (tipo_variable -> TRUE .)
    MULT            reduce using rule 59 (tipo_variable -> TRUE .)
    DIV             reduce using rule 59 (tipo_variable -> TRUE .)
    PARDER          reduce using rule 59 (tipo_variable -> TRUE .)
    COMA            reduce using rule 59 (tipo_variable -> TRUE .)
    AND             reduce using rule 59 (tipo_variable -> TRUE .)
    OR              reduce using rule 59 (tipo_variable -> TRUE .)
    PUNTOYCOMA      reduce using rule 59 (tipo_variable -> TRUE .)


state 43

    (60) tipo_variable -> llamado_funcion .

    NEWLINE         reduce using rule 60 (tipo_variable -> llamado_funcion .)
    DIFERENTE       reduce using rule 60 (tipo_variable -> llamado_funcion .)
    IGUAL           reduce using rule 60 (tipo_variable -> llamado_funcion .)
    MAYOR           reduce using rule 60 (tipo_variable -> llamado_funcion .)
    MAYORIGUAL      reduce using rule 60 (tipo_variable -> llamado_funcion .)
    MENOR           reduce using rule 60 (tipo_variable -> llamado_funcion .)
    MENORIGUAL      reduce using rule 60 (tipo_variable -> llamado_funcion .)
    SUMA            reduce using rule 60 (tipo_variable -> llamado_funcion .)
    RESTA           reduce using rule 60 (tipo_variable -> llamado_funcion .)
    MULT            reduce using rule 60 (tipo_variable -> llamado_funcion .)
    DIV             reduce using rule 60 (tipo_variable -> llamado_funcion .)
    PARDER          reduce using rule 60 (tipo_variable -> llamado_funcion .)
    COMA            reduce using rule 60 (tipo_variable -> llamado_funcion .)
    AND             reduce using rule 60 (tipo_variable -> llamado_funcion .)
    OR              reduce using rule 60 (tipo_variable -> llamado_funcion .)
    PUNTOYCOMA      reduce using rule 60 (tipo_variable -> llamado_funcion .)


state 44

    (15) llamado_funcion -> indentacion . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 60


state 45

    (2) indentacion -> vacio .

    NOMBRE          reduce using rule 2 (indentacion -> vacio .)
    IF              reduce using rule 2 (indentacion -> vacio .)
    FOR             reduce using rule 2 (indentacion -> vacio .)
    WHILE           reduce using rule 2 (indentacion -> vacio .)
    PRINT           reduce using rule 2 (indentacion -> vacio .)
    READ            reduce using rule 2 (indentacion -> vacio .)
    DECVARIABLE     reduce using rule 2 (indentacion -> vacio .)
    INCREMENTAR     reduce using rule 2 (indentacion -> vacio .)
    DECREMENTAR     reduce using rule 2 (indentacion -> vacio .)


state 46

    (31) if -> indentacion IF . PARIZQ condicion PARDER

    PARIZQ          shift and go to state 61


state 47

    (33) for -> indentacion FOR . PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER

    PARIZQ          shift and go to state 62


state 48

    (43) dec_variable -> indentacion DECVARIABLE . ASIGNACION tipo_variable Op_Aritmetica

    ASIGNACION      shift and go to state 63


state 49

    (40) while -> indentacion WHILE . PARIZQ condicion PARDER

    PARIZQ          shift and go to state 64


state 50

    (41) print -> indentacion PRINT . PARIZQ tipo_variable PARDER

    PARIZQ          shift and go to state 65


state 51

    (42) read -> indentacion READ . PARIZQ STRING PARDER

    PARIZQ          shift and go to state 66


state 52

    (34) incdec -> indentacion pre_incdec .

    NEWLINE         reduce using rule 34 (incdec -> indentacion pre_incdec .)
    PARDER          reduce using rule 34 (incdec -> indentacion pre_incdec .)


state 53

    (35) incdec -> indentacion post_incdec .

    NEWLINE         reduce using rule 35 (incdec -> indentacion post_incdec .)
    PARDER          reduce using rule 35 (incdec -> indentacion post_incdec .)


state 54

    (44) asignacion -> indentacion NOMBRE . ASIGNACION tipo_variable Op_Aritmetica
    (15) llamado_funcion -> indentacion NOMBRE . PARIZQ parametro_llamado PARDER
    (38) post_incdec -> NOMBRE . INCREMENTAR
    (39) post_incdec -> NOMBRE . DECREMENTAR

    ASIGNACION      shift and go to state 67
    PARIZQ          shift and go to state 68
    INCREMENTAR     shift and go to state 69
    DECREMENTAR     shift and go to state 70


state 55

    (36) pre_incdec -> INCREMENTAR . NOMBRE

    NOMBRE          shift and go to state 71


state 56

    (37) pre_incdec -> DECREMENTAR . NOMBRE

    NOMBRE          shift and go to state 72


state 57

    (3) indentacion -> TABULACION indentacion .

    IF              reduce using rule 3 (indentacion -> TABULACION indentacion .)
    FOR             reduce using rule 3 (indentacion -> TABULACION indentacion .)
    WHILE           reduce using rule 3 (indentacion -> TABULACION indentacion .)
    PRINT           reduce using rule 3 (indentacion -> TABULACION indentacion .)
    READ            reduce using rule 3 (indentacion -> TABULACION indentacion .)
    DECVARIABLE     reduce using rule 3 (indentacion -> TABULACION indentacion .)
    NOMBRE          reduce using rule 3 (indentacion -> TABULACION indentacion .)
    INCREMENTAR     reduce using rule 3 (indentacion -> TABULACION indentacion .)
    DECREMENTAR     reduce using rule 3 (indentacion -> TABULACION indentacion .)


state 58

    (6) definicion_funcion -> dominio return NOMBRE . PARIZQ parametro PARDER

    PARIZQ          shift and go to state 73


state 59

    (29) instrucciones -> RETURN tipo_variable NEWLINE .

    NEWLINE         reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)
    RETURN          reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)
    TABULACION      reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)
    IF              reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)
    FOR             reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)
    WHILE           reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)
    PRINT           reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)
    READ            reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)
    DECVARIABLE     reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)
    NOMBRE          reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)
    INCREMENTAR     reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)
    DECREMENTAR     reduce using rule 29 (instrucciones -> RETURN tipo_variable NEWLINE .)


state 60

    (15) llamado_funcion -> indentacion NOMBRE . PARIZQ parametro_llamado PARDER

    PARIZQ          shift and go to state 68


state 61

    (31) if -> indentacion IF PARIZQ . condicion PARDER
    (51) condicion -> . tipo_variable operador_condicional tipo_variable condicion_extra
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    indentacion                    shift and go to state 44
    condicion                      shift and go to state 74
    tipo_variable                  shift and go to state 75
    llamado_funcion                shift and go to state 43
    vacio                          shift and go to state 45

state 62

    (33) for -> indentacion FOR PARIZQ . DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER

    DECVARIABLE     shift and go to state 76


state 63

    (43) dec_variable -> indentacion DECVARIABLE ASIGNACION . tipo_variable Op_Aritmetica
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    indentacion                    shift and go to state 44
    tipo_variable                  shift and go to state 77
    llamado_funcion                shift and go to state 43
    vacio                          shift and go to state 45

state 64

    (40) while -> indentacion WHILE PARIZQ . condicion PARDER
    (51) condicion -> . tipo_variable operador_condicional tipo_variable condicion_extra
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    indentacion                    shift and go to state 44
    condicion                      shift and go to state 78
    tipo_variable                  shift and go to state 75
    llamado_funcion                shift and go to state 43
    vacio                          shift and go to state 45

state 65

    (41) print -> indentacion PRINT PARIZQ . tipo_variable PARDER
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    indentacion                    shift and go to state 44
    tipo_variable                  shift and go to state 79
    llamado_funcion                shift and go to state 43
    vacio                          shift and go to state 45

state 66

    (42) read -> indentacion READ PARIZQ . STRING PARDER

    STRING          shift and go to state 80


state 67

    (44) asignacion -> indentacion NOMBRE ASIGNACION . tipo_variable Op_Aritmetica
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    indentacion                    shift and go to state 44
    tipo_variable                  shift and go to state 81
    llamado_funcion                shift and go to state 43
    vacio                          shift and go to state 45

state 68

    (15) llamado_funcion -> indentacion NOMBRE PARIZQ . parametro_llamado PARDER
    (16) parametro_llamado -> . vacio
    (17) parametro_llamado -> . tipo_variable parametro_llamado_extra
    (69) vacio -> .
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion

  ! shift/reduce conflict for NOMBRE resolved as shift
    PARDER          reduce using rule 69 (vacio -> .)
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    indentacion                    shift and go to state 44
    parametro_llamado              shift and go to state 82
    vacio                          shift and go to state 83
    tipo_variable                  shift and go to state 84
    llamado_funcion                shift and go to state 43

state 69

    (38) post_incdec -> NOMBRE INCREMENTAR .

    NEWLINE         reduce using rule 38 (post_incdec -> NOMBRE INCREMENTAR .)
    PARDER          reduce using rule 38 (post_incdec -> NOMBRE INCREMENTAR .)


state 70

    (39) post_incdec -> NOMBRE DECREMENTAR .

    NEWLINE         reduce using rule 39 (post_incdec -> NOMBRE DECREMENTAR .)
    PARDER          reduce using rule 39 (post_incdec -> NOMBRE DECREMENTAR .)


state 71

    (36) pre_incdec -> INCREMENTAR NOMBRE .

    NEWLINE         reduce using rule 36 (pre_incdec -> INCREMENTAR NOMBRE .)
    PARDER          reduce using rule 36 (pre_incdec -> INCREMENTAR NOMBRE .)


state 72

    (37) pre_incdec -> DECREMENTAR NOMBRE .

    NEWLINE         reduce using rule 37 (pre_incdec -> DECREMENTAR NOMBRE .)
    PARDER          reduce using rule 37 (pre_incdec -> DECREMENTAR NOMBRE .)


state 73

    (6) definicion_funcion -> dominio return NOMBRE PARIZQ . parametro PARDER
    (11) parametro -> . vacio
    (12) parametro -> . NOMBRE parametro_extra
    (69) vacio -> .

    NOMBRE          shift and go to state 85
    PARDER          reduce using rule 69 (vacio -> .)

    parametro                      shift and go to state 86
    vacio                          shift and go to state 87

state 74

    (31) if -> indentacion IF PARIZQ condicion . PARDER

    PARDER          shift and go to state 88


state 75

    (51) condicion -> tipo_variable . operador_condicional tipo_variable condicion_extra
    (45) operador_condicional -> . DIFERENTE
    (46) operador_condicional -> . IGUAL
    (47) operador_condicional -> . MAYOR
    (48) operador_condicional -> . MAYORIGUAL
    (49) operador_condicional -> . MENOR
    (50) operador_condicional -> . MENORIGUAL

    DIFERENTE       shift and go to state 90
    IGUAL           shift and go to state 91
    MAYOR           shift and go to state 92
    MAYORIGUAL      shift and go to state 93
    MENOR           shift and go to state 94
    MENORIGUAL      shift and go to state 95

    operador_condicional           shift and go to state 89

state 76

    (33) for -> indentacion FOR PARIZQ DECVARIABLE . ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER

    ASIGNACION      shift and go to state 96


state 77

    (43) dec_variable -> indentacion DECVARIABLE ASIGNACION tipo_variable . Op_Aritmetica
    (61) Op_Aritmetica -> . Operador_Aritmetico tipo_variable Op_Aritmetica
    (62) Op_Aritmetica -> . vacio
    (63) Operador_Aritmetico -> . SUMA
    (64) Operador_Aritmetico -> . RESTA
    (65) Operador_Aritmetico -> . MULT
    (66) Operador_Aritmetico -> . DIV
    (69) vacio -> .

    SUMA            shift and go to state 100
    RESTA           shift and go to state 101
    MULT            shift and go to state 102
    DIV             shift and go to state 103
    NEWLINE         reduce using rule 69 (vacio -> .)

    Op_Aritmetica                  shift and go to state 97
    Operador_Aritmetico            shift and go to state 98
    vacio                          shift and go to state 99

state 78

    (40) while -> indentacion WHILE PARIZQ condicion . PARDER

    PARDER          shift and go to state 104


state 79

    (41) print -> indentacion PRINT PARIZQ tipo_variable . PARDER

    PARDER          shift and go to state 105


state 80

    (42) read -> indentacion READ PARIZQ STRING . PARDER

    PARDER          shift and go to state 106


state 81

    (44) asignacion -> indentacion NOMBRE ASIGNACION tipo_variable . Op_Aritmetica
    (61) Op_Aritmetica -> . Operador_Aritmetico tipo_variable Op_Aritmetica
    (62) Op_Aritmetica -> . vacio
    (63) Operador_Aritmetico -> . SUMA
    (64) Operador_Aritmetico -> . RESTA
    (65) Operador_Aritmetico -> . MULT
    (66) Operador_Aritmetico -> . DIV
    (69) vacio -> .

    SUMA            shift and go to state 100
    RESTA           shift and go to state 101
    MULT            shift and go to state 102
    DIV             shift and go to state 103
    NEWLINE         reduce using rule 69 (vacio -> .)

    Op_Aritmetica                  shift and go to state 107
    Operador_Aritmetico            shift and go to state 98
    vacio                          shift and go to state 99

state 82

    (15) llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado . PARDER

    PARDER          shift and go to state 108


state 83

    (16) parametro_llamado -> vacio .
    (2) indentacion -> vacio .

    PARDER          reduce using rule 16 (parametro_llamado -> vacio .)
    NOMBRE          reduce using rule 2 (indentacion -> vacio .)


state 84

    (17) parametro_llamado -> tipo_variable . parametro_llamado_extra
    (18) parametro_llamado_extra -> . COMA NOMBRE parametro_llamado_extra
    (19) parametro_llamado_extra -> . vacio
    (69) vacio -> .

    COMA            shift and go to state 110
    PARDER          reduce using rule 69 (vacio -> .)

    parametro_llamado_extra        shift and go to state 109
    vacio                          shift and go to state 111

state 85

    (12) parametro -> NOMBRE . parametro_extra
    (13) parametro_extra -> . COMA NOMBRE parametro_extra
    (14) parametro_extra -> . vacio
    (69) vacio -> .

    COMA            shift and go to state 113
    PARDER          reduce using rule 69 (vacio -> .)

    parametro_extra                shift and go to state 112
    vacio                          shift and go to state 114

state 86

    (6) definicion_funcion -> dominio return NOMBRE PARIZQ parametro . PARDER

    PARDER          shift and go to state 115


state 87

    (11) parametro -> vacio .

    PARDER          reduce using rule 11 (parametro -> vacio .)


state 88

    (31) if -> indentacion IF PARIZQ condicion PARDER .

    NEWLINE         reduce using rule 31 (if -> indentacion IF PARIZQ condicion PARDER .)


state 89

    (51) condicion -> tipo_variable operador_condicional . tipo_variable condicion_extra
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    tipo_variable                  shift and go to state 116
    llamado_funcion                shift and go to state 43
    indentacion                    shift and go to state 44
    vacio                          shift and go to state 45

state 90

    (45) operador_condicional -> DIFERENTE .

    NOMBRE          reduce using rule 45 (operador_condicional -> DIFERENTE .)
    DOUBLE          reduce using rule 45 (operador_condicional -> DIFERENTE .)
    INT             reduce using rule 45 (operador_condicional -> DIFERENTE .)
    STRING          reduce using rule 45 (operador_condicional -> DIFERENTE .)
    FALSE           reduce using rule 45 (operador_condicional -> DIFERENTE .)
    TRUE            reduce using rule 45 (operador_condicional -> DIFERENTE .)
    TABULACION      reduce using rule 45 (operador_condicional -> DIFERENTE .)


state 91

    (46) operador_condicional -> IGUAL .

    NOMBRE          reduce using rule 46 (operador_condicional -> IGUAL .)
    DOUBLE          reduce using rule 46 (operador_condicional -> IGUAL .)
    INT             reduce using rule 46 (operador_condicional -> IGUAL .)
    STRING          reduce using rule 46 (operador_condicional -> IGUAL .)
    FALSE           reduce using rule 46 (operador_condicional -> IGUAL .)
    TRUE            reduce using rule 46 (operador_condicional -> IGUAL .)
    TABULACION      reduce using rule 46 (operador_condicional -> IGUAL .)


state 92

    (47) operador_condicional -> MAYOR .

    NOMBRE          reduce using rule 47 (operador_condicional -> MAYOR .)
    DOUBLE          reduce using rule 47 (operador_condicional -> MAYOR .)
    INT             reduce using rule 47 (operador_condicional -> MAYOR .)
    STRING          reduce using rule 47 (operador_condicional -> MAYOR .)
    FALSE           reduce using rule 47 (operador_condicional -> MAYOR .)
    TRUE            reduce using rule 47 (operador_condicional -> MAYOR .)
    TABULACION      reduce using rule 47 (operador_condicional -> MAYOR .)


state 93

    (48) operador_condicional -> MAYORIGUAL .

    NOMBRE          reduce using rule 48 (operador_condicional -> MAYORIGUAL .)
    DOUBLE          reduce using rule 48 (operador_condicional -> MAYORIGUAL .)
    INT             reduce using rule 48 (operador_condicional -> MAYORIGUAL .)
    STRING          reduce using rule 48 (operador_condicional -> MAYORIGUAL .)
    FALSE           reduce using rule 48 (operador_condicional -> MAYORIGUAL .)
    TRUE            reduce using rule 48 (operador_condicional -> MAYORIGUAL .)
    TABULACION      reduce using rule 48 (operador_condicional -> MAYORIGUAL .)


state 94

    (49) operador_condicional -> MENOR .

    NOMBRE          reduce using rule 49 (operador_condicional -> MENOR .)
    DOUBLE          reduce using rule 49 (operador_condicional -> MENOR .)
    INT             reduce using rule 49 (operador_condicional -> MENOR .)
    STRING          reduce using rule 49 (operador_condicional -> MENOR .)
    FALSE           reduce using rule 49 (operador_condicional -> MENOR .)
    TRUE            reduce using rule 49 (operador_condicional -> MENOR .)
    TABULACION      reduce using rule 49 (operador_condicional -> MENOR .)


state 95

    (50) operador_condicional -> MENORIGUAL .

    NOMBRE          reduce using rule 50 (operador_condicional -> MENORIGUAL .)
    DOUBLE          reduce using rule 50 (operador_condicional -> MENORIGUAL .)
    INT             reduce using rule 50 (operador_condicional -> MENORIGUAL .)
    STRING          reduce using rule 50 (operador_condicional -> MENORIGUAL .)
    FALSE           reduce using rule 50 (operador_condicional -> MENORIGUAL .)
    TRUE            reduce using rule 50 (operador_condicional -> MENORIGUAL .)
    TABULACION      reduce using rule 50 (operador_condicional -> MENORIGUAL .)


state 96

    (33) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION . INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER

    INT             shift and go to state 117


state 97

    (43) dec_variable -> indentacion DECVARIABLE ASIGNACION tipo_variable Op_Aritmetica .

    NEWLINE         reduce using rule 43 (dec_variable -> indentacion DECVARIABLE ASIGNACION tipo_variable Op_Aritmetica .)


state 98

    (61) Op_Aritmetica -> Operador_Aritmetico . tipo_variable Op_Aritmetica
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    tipo_variable                  shift and go to state 118
    llamado_funcion                shift and go to state 43
    indentacion                    shift and go to state 44
    vacio                          shift and go to state 45

state 99

    (62) Op_Aritmetica -> vacio .

    NEWLINE         reduce using rule 62 (Op_Aritmetica -> vacio .)


state 100

    (63) Operador_Aritmetico -> SUMA .

    NOMBRE          reduce using rule 63 (Operador_Aritmetico -> SUMA .)
    DOUBLE          reduce using rule 63 (Operador_Aritmetico -> SUMA .)
    INT             reduce using rule 63 (Operador_Aritmetico -> SUMA .)
    STRING          reduce using rule 63 (Operador_Aritmetico -> SUMA .)
    FALSE           reduce using rule 63 (Operador_Aritmetico -> SUMA .)
    TRUE            reduce using rule 63 (Operador_Aritmetico -> SUMA .)
    TABULACION      reduce using rule 63 (Operador_Aritmetico -> SUMA .)


state 101

    (64) Operador_Aritmetico -> RESTA .

    NOMBRE          reduce using rule 64 (Operador_Aritmetico -> RESTA .)
    DOUBLE          reduce using rule 64 (Operador_Aritmetico -> RESTA .)
    INT             reduce using rule 64 (Operador_Aritmetico -> RESTA .)
    STRING          reduce using rule 64 (Operador_Aritmetico -> RESTA .)
    FALSE           reduce using rule 64 (Operador_Aritmetico -> RESTA .)
    TRUE            reduce using rule 64 (Operador_Aritmetico -> RESTA .)
    TABULACION      reduce using rule 64 (Operador_Aritmetico -> RESTA .)


state 102

    (65) Operador_Aritmetico -> MULT .

    NOMBRE          reduce using rule 65 (Operador_Aritmetico -> MULT .)
    DOUBLE          reduce using rule 65 (Operador_Aritmetico -> MULT .)
    INT             reduce using rule 65 (Operador_Aritmetico -> MULT .)
    STRING          reduce using rule 65 (Operador_Aritmetico -> MULT .)
    FALSE           reduce using rule 65 (Operador_Aritmetico -> MULT .)
    TRUE            reduce using rule 65 (Operador_Aritmetico -> MULT .)
    TABULACION      reduce using rule 65 (Operador_Aritmetico -> MULT .)


state 103

    (66) Operador_Aritmetico -> DIV .

    NOMBRE          reduce using rule 66 (Operador_Aritmetico -> DIV .)
    DOUBLE          reduce using rule 66 (Operador_Aritmetico -> DIV .)
    INT             reduce using rule 66 (Operador_Aritmetico -> DIV .)
    STRING          reduce using rule 66 (Operador_Aritmetico -> DIV .)
    FALSE           reduce using rule 66 (Operador_Aritmetico -> DIV .)
    TRUE            reduce using rule 66 (Operador_Aritmetico -> DIV .)
    TABULACION      reduce using rule 66 (Operador_Aritmetico -> DIV .)


state 104

    (40) while -> indentacion WHILE PARIZQ condicion PARDER .

    NEWLINE         reduce using rule 40 (while -> indentacion WHILE PARIZQ condicion PARDER .)


state 105

    (41) print -> indentacion PRINT PARIZQ tipo_variable PARDER .

    NEWLINE         reduce using rule 41 (print -> indentacion PRINT PARIZQ tipo_variable PARDER .)


state 106

    (42) read -> indentacion READ PARIZQ STRING PARDER .

    NEWLINE         reduce using rule 42 (read -> indentacion READ PARIZQ STRING PARDER .)


state 107

    (44) asignacion -> indentacion NOMBRE ASIGNACION tipo_variable Op_Aritmetica .

    NEWLINE         reduce using rule 44 (asignacion -> indentacion NOMBRE ASIGNACION tipo_variable Op_Aritmetica .)


state 108

    (15) llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .

    NEWLINE         reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    DIFERENTE       reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    IGUAL           reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    MAYOR           reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    MAYORIGUAL      reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    MENOR           reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    MENORIGUAL      reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    SUMA            reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    RESTA           reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    MULT            reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    DIV             reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    PARDER          reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    COMA            reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    AND             reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    OR              reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    PUNTOYCOMA      reduce using rule 15 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)


state 109

    (17) parametro_llamado -> tipo_variable parametro_llamado_extra .

    PARDER          reduce using rule 17 (parametro_llamado -> tipo_variable parametro_llamado_extra .)


state 110

    (18) parametro_llamado_extra -> COMA . NOMBRE parametro_llamado_extra

    NOMBRE          shift and go to state 119


state 111

    (19) parametro_llamado_extra -> vacio .

    PARDER          reduce using rule 19 (parametro_llamado_extra -> vacio .)


state 112

    (12) parametro -> NOMBRE parametro_extra .

    PARDER          reduce using rule 12 (parametro -> NOMBRE parametro_extra .)


state 113

    (13) parametro_extra -> COMA . NOMBRE parametro_extra

    NOMBRE          shift and go to state 120


state 114

    (14) parametro_extra -> vacio .

    PARDER          reduce using rule 14 (parametro_extra -> vacio .)


state 115

    (6) definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .

    RETURN          reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    TABULACION      reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    IF              reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    FOR             reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    WHILE           reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    PRINT           reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    READ            reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    DECVARIABLE     reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    NOMBRE          reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    INCREMENTAR     reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    DECREMENTAR     reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    NEWLINE         reduce using rule 6 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)


state 116

    (51) condicion -> tipo_variable operador_condicional tipo_variable . condicion_extra
    (52) condicion_extra -> . operador_logico tipo_variable operador_condicional tipo_variable condicion_extra
    (53) condicion_extra -> . vacio
    (67) operador_logico -> . AND
    (68) operador_logico -> . OR
    (69) vacio -> .

    AND             shift and go to state 124
    OR              shift and go to state 125
    PARDER          reduce using rule 69 (vacio -> .)
    PUNTOYCOMA      reduce using rule 69 (vacio -> .)

    condicion_extra                shift and go to state 121
    operador_logico                shift and go to state 122
    vacio                          shift and go to state 123

state 117

    (33) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT . PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER

    PUNTOYCOMA      shift and go to state 126


state 118

    (61) Op_Aritmetica -> Operador_Aritmetico tipo_variable . Op_Aritmetica
    (61) Op_Aritmetica -> . Operador_Aritmetico tipo_variable Op_Aritmetica
    (62) Op_Aritmetica -> . vacio
    (63) Operador_Aritmetico -> . SUMA
    (64) Operador_Aritmetico -> . RESTA
    (65) Operador_Aritmetico -> . MULT
    (66) Operador_Aritmetico -> . DIV
    (69) vacio -> .

    SUMA            shift and go to state 100
    RESTA           shift and go to state 101
    MULT            shift and go to state 102
    DIV             shift and go to state 103
    NEWLINE         reduce using rule 69 (vacio -> .)

    Operador_Aritmetico            shift and go to state 98
    Op_Aritmetica                  shift and go to state 127
    vacio                          shift and go to state 99

state 119

    (18) parametro_llamado_extra -> COMA NOMBRE . parametro_llamado_extra
    (18) parametro_llamado_extra -> . COMA NOMBRE parametro_llamado_extra
    (19) parametro_llamado_extra -> . vacio
    (69) vacio -> .

    COMA            shift and go to state 110
    PARDER          reduce using rule 69 (vacio -> .)

    parametro_llamado_extra        shift and go to state 128
    vacio                          shift and go to state 111

state 120

    (13) parametro_extra -> COMA NOMBRE . parametro_extra
    (13) parametro_extra -> . COMA NOMBRE parametro_extra
    (14) parametro_extra -> . vacio
    (69) vacio -> .

    COMA            shift and go to state 113
    PARDER          reduce using rule 69 (vacio -> .)

    parametro_extra                shift and go to state 129
    vacio                          shift and go to state 114

state 121

    (51) condicion -> tipo_variable operador_condicional tipo_variable condicion_extra .

    PARDER          reduce using rule 51 (condicion -> tipo_variable operador_condicional tipo_variable condicion_extra .)
    PUNTOYCOMA      reduce using rule 51 (condicion -> tipo_variable operador_condicional tipo_variable condicion_extra .)


state 122

    (52) condicion_extra -> operador_logico . tipo_variable operador_condicional tipo_variable condicion_extra
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    tipo_variable                  shift and go to state 130
    llamado_funcion                shift and go to state 43
    indentacion                    shift and go to state 44
    vacio                          shift and go to state 45

state 123

    (53) condicion_extra -> vacio .

    PARDER          reduce using rule 53 (condicion_extra -> vacio .)
    PUNTOYCOMA      reduce using rule 53 (condicion_extra -> vacio .)


state 124

    (67) operador_logico -> AND .

    NOMBRE          reduce using rule 67 (operador_logico -> AND .)
    DOUBLE          reduce using rule 67 (operador_logico -> AND .)
    INT             reduce using rule 67 (operador_logico -> AND .)
    STRING          reduce using rule 67 (operador_logico -> AND .)
    FALSE           reduce using rule 67 (operador_logico -> AND .)
    TRUE            reduce using rule 67 (operador_logico -> AND .)
    TABULACION      reduce using rule 67 (operador_logico -> AND .)


state 125

    (68) operador_logico -> OR .

    NOMBRE          reduce using rule 68 (operador_logico -> OR .)
    DOUBLE          reduce using rule 68 (operador_logico -> OR .)
    INT             reduce using rule 68 (operador_logico -> OR .)
    STRING          reduce using rule 68 (operador_logico -> OR .)
    FALSE           reduce using rule 68 (operador_logico -> OR .)
    TRUE            reduce using rule 68 (operador_logico -> OR .)
    TABULACION      reduce using rule 68 (operador_logico -> OR .)


state 126

    (33) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA . condicion PUNTOYCOMA incdec PARDER
    (51) condicion -> . tipo_variable operador_condicional tipo_variable condicion_extra
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    indentacion                    shift and go to state 44
    condicion                      shift and go to state 131
    tipo_variable                  shift and go to state 75
    llamado_funcion                shift and go to state 43
    vacio                          shift and go to state 45

state 127

    (61) Op_Aritmetica -> Operador_Aritmetico tipo_variable Op_Aritmetica .

    NEWLINE         reduce using rule 61 (Op_Aritmetica -> Operador_Aritmetico tipo_variable Op_Aritmetica .)


state 128

    (18) parametro_llamado_extra -> COMA NOMBRE parametro_llamado_extra .

    PARDER          reduce using rule 18 (parametro_llamado_extra -> COMA NOMBRE parametro_llamado_extra .)


state 129

    (13) parametro_extra -> COMA NOMBRE parametro_extra .

    PARDER          reduce using rule 13 (parametro_extra -> COMA NOMBRE parametro_extra .)


state 130

    (52) condicion_extra -> operador_logico tipo_variable . operador_condicional tipo_variable condicion_extra
    (45) operador_condicional -> . DIFERENTE
    (46) operador_condicional -> . IGUAL
    (47) operador_condicional -> . MAYOR
    (48) operador_condicional -> . MAYORIGUAL
    (49) operador_condicional -> . MENOR
    (50) operador_condicional -> . MENORIGUAL

    DIFERENTE       shift and go to state 90
    IGUAL           shift and go to state 91
    MAYOR           shift and go to state 92
    MAYORIGUAL      shift and go to state 93
    MENOR           shift and go to state 94
    MENORIGUAL      shift and go to state 95

    operador_condicional           shift and go to state 132

state 131

    (33) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion . PUNTOYCOMA incdec PARDER

    PUNTOYCOMA      shift and go to state 133


state 132

    (52) condicion_extra -> operador_logico tipo_variable operador_condicional . tipo_variable condicion_extra
    (54) tipo_variable -> . NOMBRE
    (55) tipo_variable -> . DOUBLE
    (56) tipo_variable -> . INT
    (57) tipo_variable -> . STRING
    (58) tipo_variable -> . FALSE
    (59) tipo_variable -> . TRUE
    (60) tipo_variable -> . llamado_funcion
    (15) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 37
    DOUBLE          shift and go to state 38
    INT             shift and go to state 39
    STRING          shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    TABULACION      shift and go to state 21

  ! NOMBRE          [ reduce using rule 69 (vacio -> .) ]

    tipo_variable                  shift and go to state 134
    llamado_funcion                shift and go to state 43
    indentacion                    shift and go to state 44
    vacio                          shift and go to state 45

state 133

    (33) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA . incdec PARDER
    (34) incdec -> . indentacion pre_incdec
    (35) incdec -> . indentacion post_incdec
    (2) indentacion -> . vacio
    (3) indentacion -> . TABULACION indentacion
    (69) vacio -> .

    TABULACION      shift and go to state 21
    INCREMENTAR     reduce using rule 69 (vacio -> .)
    DECREMENTAR     reduce using rule 69 (vacio -> .)
    NOMBRE          reduce using rule 69 (vacio -> .)

    indentacion                    shift and go to state 135
    incdec                         shift and go to state 136
    vacio                          shift and go to state 45

state 134

    (52) condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable . condicion_extra
    (52) condicion_extra -> . operador_logico tipo_variable operador_condicional tipo_variable condicion_extra
    (53) condicion_extra -> . vacio
    (67) operador_logico -> . AND
    (68) operador_logico -> . OR
    (69) vacio -> .

    AND             shift and go to state 124
    OR              shift and go to state 125
    PARDER          reduce using rule 69 (vacio -> .)
    PUNTOYCOMA      reduce using rule 69 (vacio -> .)

    operador_logico                shift and go to state 122
    condicion_extra                shift and go to state 137
    vacio                          shift and go to state 123

state 135

    (34) incdec -> indentacion . pre_incdec
    (35) incdec -> indentacion . post_incdec
    (36) pre_incdec -> . INCREMENTAR NOMBRE
    (37) pre_incdec -> . DECREMENTAR NOMBRE
    (38) post_incdec -> . NOMBRE INCREMENTAR
    (39) post_incdec -> . NOMBRE DECREMENTAR

    INCREMENTAR     shift and go to state 55
    DECREMENTAR     shift and go to state 56
    NOMBRE          shift and go to state 138

    pre_incdec                     shift and go to state 52
    post_incdec                    shift and go to state 53

state 136

    (33) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec . PARDER

    PARDER          shift and go to state 139


state 137

    (52) condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra .

    PARDER          reduce using rule 52 (condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra .)
    PUNTOYCOMA      reduce using rule 52 (condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra .)


state 138

    (38) post_incdec -> NOMBRE . INCREMENTAR
    (39) post_incdec -> NOMBRE . DECREMENTAR

    INCREMENTAR     shift and go to state 69
    DECREMENTAR     shift and go to state 70


state 139

    (33) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER .

    NEWLINE         reduce using rule 33 (for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for TABULACION in state 3 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 18 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 61 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 63 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 64 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 65 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 67 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 68 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 89 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 98 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 122 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 126 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 132 resolved as shift
WARNING: reduce/reduce conflict in state 19 resolved using rule (indentacion -> vacio)
WARNING: rejected rule (instrucciones -> vacio) in state 19
