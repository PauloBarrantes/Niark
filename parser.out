Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    COMENTARIO
    IMPORT
    SWITCH

Grammar

Rule 0     S' -> inicial
Rule 1     inicial -> funcion inicial instrucciones NEWLINE
Rule 2     inicial -> vacio
Rule 3     indentacion -> vacio
Rule 4     indentacion -> TABULACION indentacion
Rule 5     funcion -> definicion_funcion instrucciones
Rule 6     funcion -> vacio
Rule 7     definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER
Rule 8     dominio -> PRIVATE
Rule 9     dominio -> PUBLIC
Rule 10    return -> VOID
Rule 11    return -> FUNCTION
Rule 12    parametro -> vacio
Rule 13    parametro -> NOMBRE parametro_extra
Rule 14    parametro_extra -> COMA NOMBRE parametro_extra
Rule 15    parametro_extra -> vacio
Rule 16    llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER
Rule 17    parametro_llamado -> vacio
Rule 18    parametro_llamado -> tipo_variable parametro_llamado_extra
Rule 19    parametro_llamado_extra -> COMA NOMBRE parametro_llamado_extra
Rule 20    parametro_llamado_extra -> vacio
Rule 21    instrucciones -> if NEWLINE
Rule 22    instrucciones -> for NEWLINE
Rule 23    instrucciones -> while NEWLINE
Rule 24    instrucciones -> print NEWLINE
Rule 25    instrucciones -> read NEWLINE
Rule 26    instrucciones -> incdec NEWLINE
Rule 27    instrucciones -> dec_variable NEWLINE
Rule 28    instrucciones -> dec_vector NEWLINE
Rule 29    instrucciones -> asignacion NEWLINE
Rule 30    instrucciones -> llamado_funcion NEWLINE
Rule 31    instrucciones -> retorno NEWLINE
Rule 32    instrucciones -> vacio
Rule 33    if -> indentacion IF PARIZQ condicion PARDER
Rule 34    else -> indentacion ELSE NEWLINE
Rule 35    for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER
Rule 36    incdec -> indentacion pre_incdec
Rule 37    incdec -> indentacion post_incdec
Rule 38    pre_incdec -> INCREMENTAR NOMBRE
Rule 39    pre_incdec -> DECREMENTAR NOMBRE
Rule 40    post_incdec -> NOMBRE INCREMENTAR
Rule 41    post_incdec -> NOMBRE DECREMENTAR
Rule 42    while -> indentacion WHILE PARIZQ condicion PARDER
Rule 43    print -> indentacion PRINT PARIZQ tipo_variable PARDER
Rule 44    read -> indentacion READ PARIZQ STRING PARDER
Rule 45    dec_variable -> indentacion DECVARIABLE ASIGNACION op_aritmetica
Rule 46    dec_vector -> indentacion DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
Rule 47    dec_vector -> indentacion DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
Rule 48    asignacion -> indentacion NOMBRE ASIGNACION op_aritmetica
Rule 49    asignacion_vector -> indentacion NOMBRE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
Rule 50    asignacion_vector -> indentacion NOMBRE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
Rule 51    retorno -> RETURN tipo_variable
Rule 52    retorno -> RETURN op_aritmetica
Rule 53    operador_condicional -> DIFERENTE
Rule 54    operador_condicional -> IGUAL
Rule 55    operador_condicional -> MAYOR
Rule 56    operador_condicional -> MAYORIGUAL
Rule 57    operador_condicional -> MENOR
Rule 58    operador_condicional -> MENORIGUAL
Rule 59    condicion -> tipo_variable operador_condicional tipo_variable condicion_extra
Rule 60    condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra
Rule 61    condicion_extra -> vacio
Rule 62    tipo_variable -> NOMBRE
Rule 63    tipo_variable -> DOUBLE
Rule 64    tipo_variable -> INT
Rule 65    tipo_variable -> STRING
Rule 66    tipo_variable -> FALSE
Rule 67    tipo_variable -> TRUE
Rule 68    tipo_variable -> llamado_funcion
Rule 69    op_aritmetica -> tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
Rule 70    op_aritmetica -> vacio
Rule 71    op_aritmetica_extra -> operador_aritmetico tipo_variable op_aritmetica_extra
Rule 72    op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER
Rule 73    op_aritmetica_extra -> vacio
Rule 74    operador_aritmetico -> SUMA
Rule 75    operador_aritmetico -> RESTA
Rule 76    operador_aritmetico -> MULT
Rule 77    operador_aritmetico -> DIV
Rule 78    operador_logico -> AND
Rule 79    operador_logico -> OR
Rule 80    vacio -> <empty>

Terminals, with rules where they appear

AND                  : 78
ASIGNACION           : 35 45 46 47 48 49 50
BREAK                : 
CASE                 : 
COMA                 : 14 19
COMENTARIO           : 
CORCHETEDER          : 46 47 49 50
CORCHETEIZQ          : 46 47 49 50
DECREMENTAR          : 39 41
DECVARIABLE          : 35 45 46 47
DIFERENTE            : 53
DIV                  : 77
DOUBLE               : 63
ELSE                 : 34
FALSE                : 66
FOR                  : 35
FUNCTION             : 11
IF                   : 33
IGUAL                : 54
IMPORT               : 
INCREMENTAR          : 38 40
INT                  : 35 47 50 64
MAYOR                : 55
MAYORIGUAL           : 56
MENOR                : 57
MENORIGUAL           : 58
MULT                 : 76
NEWLINE              : 1 21 22 23 24 25 26 27 28 29 30 31 34
NOMBRE               : 7 13 14 16 19 38 39 40 41 46 48 49 49 50 62
OR                   : 79
PARDER               : 7 16 33 35 42 43 44 72
PARIZQ               : 7 16 33 35 42 43 44 72
PRINT                : 43
PRIVATE              : 8
PUBLIC               : 9
PUNTOYCOMA           : 35 35
READ                 : 44
RESTA                : 75
RETURN               : 51 52
STRING               : 44 65
SUMA                 : 74
SWITCH               : 
TABULACION           : 4
TRUE                 : 67
VOID                 : 10
WHILE                : 42
error                : 

Nonterminals, with rules where they appear

asignacion           : 29
asignacion_vector    : 
condicion            : 33 35 42
condicion_extra      : 59 60
dec_variable         : 27
dec_vector           : 28
definicion_funcion   : 5
dominio              : 7
else                 : 
for                  : 22
funcion              : 1
if                   : 21
incdec               : 26 35
indentacion          : 4 16 33 34 35 36 37 42 43 44 45 46 47 48 49 50
inicial              : 1 0
instrucciones        : 1 5
llamado_funcion      : 30 68
op_aritmetica        : 45 46 47 48 49 50 52
op_aritmetica_extra  : 69 71 72
operador_aritmetico  : 69 71 72
operador_condicional : 59 60
operador_logico      : 60
parametro            : 7
parametro_extra      : 13 14
parametro_llamado    : 16
parametro_llamado_extra : 18 19
post_incdec          : 37
pre_incdec           : 36
print                : 24
read                 : 25
retorno              : 31
return               : 7
tipo_variable        : 18 43 51 59 59 60 60 69 69 71 72
vacio                : 2 3 6 12 15 17 20 32 61 70 73
while                : 23

Parsing method: LALR

state 0

    (0) S' -> . inicial
    (1) inicial -> . funcion inicial instrucciones NEWLINE
    (2) inicial -> . vacio
    (5) funcion -> . definicion_funcion instrucciones
    (6) funcion -> . vacio
    (80) vacio -> .
    (7) definicion_funcion -> . dominio return NOMBRE PARIZQ parametro PARDER
    (8) dominio -> . PRIVATE
    (9) dominio -> . PUBLIC

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
    $end            reduce using rule 80 (vacio -> .)
    RETURN          reduce using rule 80 (vacio -> .)
    TABULACION      reduce using rule 80 (vacio -> .)
    NEWLINE         reduce using rule 80 (vacio -> .)
    IF              reduce using rule 80 (vacio -> .)
    FOR             reduce using rule 80 (vacio -> .)
    WHILE           reduce using rule 80 (vacio -> .)
    PRINT           reduce using rule 80 (vacio -> .)
    READ            reduce using rule 80 (vacio -> .)
    DECVARIABLE     reduce using rule 80 (vacio -> .)
    NOMBRE          reduce using rule 80 (vacio -> .)
    INCREMENTAR     reduce using rule 80 (vacio -> .)
    DECREMENTAR     reduce using rule 80 (vacio -> .)
    PRIVATE         shift and go to state 6
    PUBLIC          shift and go to state 7

  ! PRIVATE         [ reduce using rule 80 (vacio -> .) ]
  ! PUBLIC          [ reduce using rule 80 (vacio -> .) ]

    inicial                        shift and go to state 1
    funcion                        shift and go to state 2
    vacio                          shift and go to state 3
    definicion_funcion             shift and go to state 4
    dominio                        shift and go to state 5

state 1

    (0) S' -> inicial .



state 2

    (1) inicial -> funcion . inicial instrucciones NEWLINE
    (1) inicial -> . funcion inicial instrucciones NEWLINE
    (2) inicial -> . vacio
    (5) funcion -> . definicion_funcion instrucciones
    (6) funcion -> . vacio
    (80) vacio -> .
    (7) definicion_funcion -> . dominio return NOMBRE PARIZQ parametro PARDER
    (8) dominio -> . PRIVATE
    (9) dominio -> . PUBLIC

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
    RETURN          reduce using rule 80 (vacio -> .)
    TABULACION      reduce using rule 80 (vacio -> .)
    NEWLINE         reduce using rule 80 (vacio -> .)
    IF              reduce using rule 80 (vacio -> .)
    FOR             reduce using rule 80 (vacio -> .)
    WHILE           reduce using rule 80 (vacio -> .)
    PRINT           reduce using rule 80 (vacio -> .)
    READ            reduce using rule 80 (vacio -> .)
    DECVARIABLE     reduce using rule 80 (vacio -> .)
    NOMBRE          reduce using rule 80 (vacio -> .)
    INCREMENTAR     reduce using rule 80 (vacio -> .)
    DECREMENTAR     reduce using rule 80 (vacio -> .)
    PRIVATE         shift and go to state 6
    PUBLIC          shift and go to state 7

  ! PRIVATE         [ reduce using rule 80 (vacio -> .) ]
  ! PUBLIC          [ reduce using rule 80 (vacio -> .) ]

    funcion                        shift and go to state 2
    inicial                        shift and go to state 8
    vacio                          shift and go to state 3
    definicion_funcion             shift and go to state 4
    dominio                        shift and go to state 5

state 3

    (2) inicial -> vacio .
    (6) funcion -> vacio .

  ! reduce/reduce conflict for RETURN resolved using rule 2 (inicial -> vacio .)
  ! reduce/reduce conflict for TABULACION resolved using rule 2 (inicial -> vacio .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 2 (inicial -> vacio .)
  ! reduce/reduce conflict for IF resolved using rule 2 (inicial -> vacio .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (inicial -> vacio .)
  ! reduce/reduce conflict for WHILE resolved using rule 2 (inicial -> vacio .)
  ! reduce/reduce conflict for PRINT resolved using rule 2 (inicial -> vacio .)
  ! reduce/reduce conflict for READ resolved using rule 2 (inicial -> vacio .)
  ! reduce/reduce conflict for DECVARIABLE resolved using rule 2 (inicial -> vacio .)
  ! reduce/reduce conflict for NOMBRE resolved using rule 2 (inicial -> vacio .)
  ! reduce/reduce conflict for INCREMENTAR resolved using rule 2 (inicial -> vacio .)
  ! reduce/reduce conflict for DECREMENTAR resolved using rule 2 (inicial -> vacio .)
    $end            reduce using rule 2 (inicial -> vacio .)
    RETURN          reduce using rule 2 (inicial -> vacio .)
    TABULACION      reduce using rule 2 (inicial -> vacio .)
    NEWLINE         reduce using rule 2 (inicial -> vacio .)
    IF              reduce using rule 2 (inicial -> vacio .)
    FOR             reduce using rule 2 (inicial -> vacio .)
    WHILE           reduce using rule 2 (inicial -> vacio .)
    PRINT           reduce using rule 2 (inicial -> vacio .)
    READ            reduce using rule 2 (inicial -> vacio .)
    DECVARIABLE     reduce using rule 2 (inicial -> vacio .)
    NOMBRE          reduce using rule 2 (inicial -> vacio .)
    INCREMENTAR     reduce using rule 2 (inicial -> vacio .)
    DECREMENTAR     reduce using rule 2 (inicial -> vacio .)
    PRIVATE         reduce using rule 6 (funcion -> vacio .)
    PUBLIC          reduce using rule 6 (funcion -> vacio .)

  ! RETURN          [ reduce using rule 6 (funcion -> vacio .) ]
  ! TABULACION      [ reduce using rule 6 (funcion -> vacio .) ]
  ! NEWLINE         [ reduce using rule 6 (funcion -> vacio .) ]
  ! IF              [ reduce using rule 6 (funcion -> vacio .) ]
  ! FOR             [ reduce using rule 6 (funcion -> vacio .) ]
  ! WHILE           [ reduce using rule 6 (funcion -> vacio .) ]
  ! PRINT           [ reduce using rule 6 (funcion -> vacio .) ]
  ! READ            [ reduce using rule 6 (funcion -> vacio .) ]
  ! DECVARIABLE     [ reduce using rule 6 (funcion -> vacio .) ]
  ! NOMBRE          [ reduce using rule 6 (funcion -> vacio .) ]
  ! INCREMENTAR     [ reduce using rule 6 (funcion -> vacio .) ]
  ! DECREMENTAR     [ reduce using rule 6 (funcion -> vacio .) ]


state 4

    (5) funcion -> definicion_funcion . instrucciones
    (21) instrucciones -> . if NEWLINE
    (22) instrucciones -> . for NEWLINE
    (23) instrucciones -> . while NEWLINE
    (24) instrucciones -> . print NEWLINE
    (25) instrucciones -> . read NEWLINE
    (26) instrucciones -> . incdec NEWLINE
    (27) instrucciones -> . dec_variable NEWLINE
    (28) instrucciones -> . dec_vector NEWLINE
    (29) instrucciones -> . asignacion NEWLINE
    (30) instrucciones -> . llamado_funcion NEWLINE
    (31) instrucciones -> . retorno NEWLINE
    (32) instrucciones -> . vacio
    (33) if -> . indentacion IF PARIZQ condicion PARDER
    (35) for -> . indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER
    (42) while -> . indentacion WHILE PARIZQ condicion PARDER
    (43) print -> . indentacion PRINT PARIZQ tipo_variable PARDER
    (44) read -> . indentacion READ PARIZQ STRING PARDER
    (36) incdec -> . indentacion pre_incdec
    (37) incdec -> . indentacion post_incdec
    (45) dec_variable -> . indentacion DECVARIABLE ASIGNACION op_aritmetica
    (46) dec_vector -> . indentacion DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (47) dec_vector -> . indentacion DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
    (48) asignacion -> . indentacion NOMBRE ASIGNACION op_aritmetica
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (51) retorno -> . RETURN tipo_variable
    (52) retorno -> . RETURN op_aritmetica
    (80) vacio -> .
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for TABULACION resolved as shift
    RETURN          shift and go to state 23
    PRIVATE         reduce using rule 80 (vacio -> .)
    PUBLIC          reduce using rule 80 (vacio -> .)
    NEWLINE         reduce using rule 80 (vacio -> .)
    IF              reduce using rule 80 (vacio -> .)
    FOR             reduce using rule 80 (vacio -> .)
    WHILE           reduce using rule 80 (vacio -> .)
    PRINT           reduce using rule 80 (vacio -> .)
    READ            reduce using rule 80 (vacio -> .)
    DECVARIABLE     reduce using rule 80 (vacio -> .)
    NOMBRE          reduce using rule 80 (vacio -> .)
    INCREMENTAR     reduce using rule 80 (vacio -> .)
    DECREMENTAR     reduce using rule 80 (vacio -> .)
    TABULACION      shift and go to state 24

  ! RETURN          [ reduce using rule 80 (vacio -> .) ]
  ! TABULACION      [ reduce using rule 80 (vacio -> .) ]

    instrucciones                  shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    print                          shift and go to state 13
    read                           shift and go to state 14
    incdec                         shift and go to state 15
    dec_variable                   shift and go to state 16
    dec_vector                     shift and go to state 17
    asignacion                     shift and go to state 18
    llamado_funcion                shift and go to state 19
    retorno                        shift and go to state 20
    vacio                          shift and go to state 21
    indentacion                    shift and go to state 22

state 5

    (7) definicion_funcion -> dominio . return NOMBRE PARIZQ parametro PARDER
    (10) return -> . VOID
    (11) return -> . FUNCTION

    VOID            shift and go to state 26
    FUNCTION        shift and go to state 27

    return                         shift and go to state 25

state 6

    (8) dominio -> PRIVATE .

    VOID            reduce using rule 8 (dominio -> PRIVATE .)
    FUNCTION        reduce using rule 8 (dominio -> PRIVATE .)


state 7

    (9) dominio -> PUBLIC .

    VOID            reduce using rule 9 (dominio -> PUBLIC .)
    FUNCTION        reduce using rule 9 (dominio -> PUBLIC .)


state 8

    (1) inicial -> funcion inicial . instrucciones NEWLINE
    (21) instrucciones -> . if NEWLINE
    (22) instrucciones -> . for NEWLINE
    (23) instrucciones -> . while NEWLINE
    (24) instrucciones -> . print NEWLINE
    (25) instrucciones -> . read NEWLINE
    (26) instrucciones -> . incdec NEWLINE
    (27) instrucciones -> . dec_variable NEWLINE
    (28) instrucciones -> . dec_vector NEWLINE
    (29) instrucciones -> . asignacion NEWLINE
    (30) instrucciones -> . llamado_funcion NEWLINE
    (31) instrucciones -> . retorno NEWLINE
    (32) instrucciones -> . vacio
    (33) if -> . indentacion IF PARIZQ condicion PARDER
    (35) for -> . indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER
    (42) while -> . indentacion WHILE PARIZQ condicion PARDER
    (43) print -> . indentacion PRINT PARIZQ tipo_variable PARDER
    (44) read -> . indentacion READ PARIZQ STRING PARDER
    (36) incdec -> . indentacion pre_incdec
    (37) incdec -> . indentacion post_incdec
    (45) dec_variable -> . indentacion DECVARIABLE ASIGNACION op_aritmetica
    (46) dec_vector -> . indentacion DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (47) dec_vector -> . indentacion DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
    (48) asignacion -> . indentacion NOMBRE ASIGNACION op_aritmetica
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (51) retorno -> . RETURN tipo_variable
    (52) retorno -> . RETURN op_aritmetica
    (80) vacio -> .
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion

    RETURN          shift and go to state 23
    NEWLINE         reduce using rule 80 (vacio -> .)
    IF              reduce using rule 80 (vacio -> .)
    FOR             reduce using rule 80 (vacio -> .)
    WHILE           reduce using rule 80 (vacio -> .)
    PRINT           reduce using rule 80 (vacio -> .)
    READ            reduce using rule 80 (vacio -> .)
    DECVARIABLE     reduce using rule 80 (vacio -> .)
    NOMBRE          reduce using rule 80 (vacio -> .)
    INCREMENTAR     reduce using rule 80 (vacio -> .)
    DECREMENTAR     reduce using rule 80 (vacio -> .)
    TABULACION      shift and go to state 24

    instrucciones                  shift and go to state 28
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    print                          shift and go to state 13
    read                           shift and go to state 14
    incdec                         shift and go to state 15
    dec_variable                   shift and go to state 16
    dec_vector                     shift and go to state 17
    asignacion                     shift and go to state 18
    llamado_funcion                shift and go to state 19
    retorno                        shift and go to state 20
    vacio                          shift and go to state 21
    indentacion                    shift and go to state 22

state 9

    (5) funcion -> definicion_funcion instrucciones .

    PRIVATE         reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    PUBLIC          reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    RETURN          reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    TABULACION      reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    NEWLINE         reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    IF              reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    FOR             reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    WHILE           reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    PRINT           reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    READ            reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    DECVARIABLE     reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    NOMBRE          reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    INCREMENTAR     reduce using rule 5 (funcion -> definicion_funcion instrucciones .)
    DECREMENTAR     reduce using rule 5 (funcion -> definicion_funcion instrucciones .)


state 10

    (21) instrucciones -> if . NEWLINE

    NEWLINE         shift and go to state 29


state 11

    (22) instrucciones -> for . NEWLINE

    NEWLINE         shift and go to state 30


state 12

    (23) instrucciones -> while . NEWLINE

    NEWLINE         shift and go to state 31


state 13

    (24) instrucciones -> print . NEWLINE

    NEWLINE         shift and go to state 32


state 14

    (25) instrucciones -> read . NEWLINE

    NEWLINE         shift and go to state 33


state 15

    (26) instrucciones -> incdec . NEWLINE

    NEWLINE         shift and go to state 34


state 16

    (27) instrucciones -> dec_variable . NEWLINE

    NEWLINE         shift and go to state 35


state 17

    (28) instrucciones -> dec_vector . NEWLINE

    NEWLINE         shift and go to state 36


state 18

    (29) instrucciones -> asignacion . NEWLINE

    NEWLINE         shift and go to state 37


state 19

    (30) instrucciones -> llamado_funcion . NEWLINE

    NEWLINE         shift and go to state 38


state 20

    (31) instrucciones -> retorno . NEWLINE

    NEWLINE         shift and go to state 39


state 21

    (32) instrucciones -> vacio .
    (3) indentacion -> vacio .

  ! reduce/reduce conflict for IF resolved using rule 3 (indentacion -> vacio .)
  ! reduce/reduce conflict for FOR resolved using rule 3 (indentacion -> vacio .)
  ! reduce/reduce conflict for WHILE resolved using rule 3 (indentacion -> vacio .)
  ! reduce/reduce conflict for PRINT resolved using rule 3 (indentacion -> vacio .)
  ! reduce/reduce conflict for READ resolved using rule 3 (indentacion -> vacio .)
  ! reduce/reduce conflict for DECVARIABLE resolved using rule 3 (indentacion -> vacio .)
  ! reduce/reduce conflict for NOMBRE resolved using rule 3 (indentacion -> vacio .)
  ! reduce/reduce conflict for INCREMENTAR resolved using rule 3 (indentacion -> vacio .)
  ! reduce/reduce conflict for DECREMENTAR resolved using rule 3 (indentacion -> vacio .)
    PRIVATE         reduce using rule 32 (instrucciones -> vacio .)
    PUBLIC          reduce using rule 32 (instrucciones -> vacio .)
    RETURN          reduce using rule 32 (instrucciones -> vacio .)
    TABULACION      reduce using rule 32 (instrucciones -> vacio .)
    NEWLINE         reduce using rule 32 (instrucciones -> vacio .)
    IF              reduce using rule 3 (indentacion -> vacio .)
    FOR             reduce using rule 3 (indentacion -> vacio .)
    WHILE           reduce using rule 3 (indentacion -> vacio .)
    PRINT           reduce using rule 3 (indentacion -> vacio .)
    READ            reduce using rule 3 (indentacion -> vacio .)
    DECVARIABLE     reduce using rule 3 (indentacion -> vacio .)
    NOMBRE          reduce using rule 3 (indentacion -> vacio .)
    INCREMENTAR     reduce using rule 3 (indentacion -> vacio .)
    DECREMENTAR     reduce using rule 3 (indentacion -> vacio .)

  ! IF              [ reduce using rule 32 (instrucciones -> vacio .) ]
  ! FOR             [ reduce using rule 32 (instrucciones -> vacio .) ]
  ! WHILE           [ reduce using rule 32 (instrucciones -> vacio .) ]
  ! PRINT           [ reduce using rule 32 (instrucciones -> vacio .) ]
  ! READ            [ reduce using rule 32 (instrucciones -> vacio .) ]
  ! DECVARIABLE     [ reduce using rule 32 (instrucciones -> vacio .) ]
  ! NOMBRE          [ reduce using rule 32 (instrucciones -> vacio .) ]
  ! INCREMENTAR     [ reduce using rule 32 (instrucciones -> vacio .) ]
  ! DECREMENTAR     [ reduce using rule 32 (instrucciones -> vacio .) ]


state 22

    (33) if -> indentacion . IF PARIZQ condicion PARDER
    (35) for -> indentacion . FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER
    (42) while -> indentacion . WHILE PARIZQ condicion PARDER
    (43) print -> indentacion . PRINT PARIZQ tipo_variable PARDER
    (44) read -> indentacion . READ PARIZQ STRING PARDER
    (36) incdec -> indentacion . pre_incdec
    (37) incdec -> indentacion . post_incdec
    (45) dec_variable -> indentacion . DECVARIABLE ASIGNACION op_aritmetica
    (46) dec_vector -> indentacion . DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (47) dec_vector -> indentacion . DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica
    (48) asignacion -> indentacion . NOMBRE ASIGNACION op_aritmetica
    (16) llamado_funcion -> indentacion . NOMBRE PARIZQ parametro_llamado PARDER
    (38) pre_incdec -> . INCREMENTAR NOMBRE
    (39) pre_incdec -> . DECREMENTAR NOMBRE
    (40) post_incdec -> . NOMBRE INCREMENTAR
    (41) post_incdec -> . NOMBRE DECREMENTAR

    IF              shift and go to state 40
    FOR             shift and go to state 41
    WHILE           shift and go to state 43
    PRINT           shift and go to state 44
    READ            shift and go to state 45
    DECVARIABLE     shift and go to state 42
    NOMBRE          shift and go to state 48
    INCREMENTAR     shift and go to state 49
    DECREMENTAR     shift and go to state 50

    pre_incdec                     shift and go to state 46
    post_incdec                    shift and go to state 47

state 23

    (51) retorno -> RETURN . tipo_variable
    (52) retorno -> RETURN . op_aritmetica
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (69) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (70) op_aritmetica -> . vacio
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (80) vacio -> .
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    NEWLINE         reduce using rule 80 (vacio -> .)
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    tipo_variable                  shift and go to state 51
    op_aritmetica                  shift and go to state 52
    llamado_funcion                shift and go to state 59
    vacio                          shift and go to state 60
    indentacion                    shift and go to state 61

state 24

    (4) indentacion -> TABULACION . indentacion
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

    TABULACION      shift and go to state 24
    IF              reduce using rule 80 (vacio -> .)
    FOR             reduce using rule 80 (vacio -> .)
    WHILE           reduce using rule 80 (vacio -> .)
    PRINT           reduce using rule 80 (vacio -> .)
    READ            reduce using rule 80 (vacio -> .)
    DECVARIABLE     reduce using rule 80 (vacio -> .)
    NOMBRE          reduce using rule 80 (vacio -> .)
    INCREMENTAR     reduce using rule 80 (vacio -> .)
    DECREMENTAR     reduce using rule 80 (vacio -> .)

    indentacion                    shift and go to state 62
    vacio                          shift and go to state 63

state 25

    (7) definicion_funcion -> dominio return . NOMBRE PARIZQ parametro PARDER

    NOMBRE          shift and go to state 64


state 26

    (10) return -> VOID .

    NOMBRE          reduce using rule 10 (return -> VOID .)


state 27

    (11) return -> FUNCTION .

    NOMBRE          reduce using rule 11 (return -> FUNCTION .)


state 28

    (1) inicial -> funcion inicial instrucciones . NEWLINE

    NEWLINE         shift and go to state 65


state 29

    (21) instrucciones -> if NEWLINE .

    PRIVATE         reduce using rule 21 (instrucciones -> if NEWLINE .)
    PUBLIC          reduce using rule 21 (instrucciones -> if NEWLINE .)
    RETURN          reduce using rule 21 (instrucciones -> if NEWLINE .)
    TABULACION      reduce using rule 21 (instrucciones -> if NEWLINE .)
    NEWLINE         reduce using rule 21 (instrucciones -> if NEWLINE .)
    IF              reduce using rule 21 (instrucciones -> if NEWLINE .)
    FOR             reduce using rule 21 (instrucciones -> if NEWLINE .)
    WHILE           reduce using rule 21 (instrucciones -> if NEWLINE .)
    PRINT           reduce using rule 21 (instrucciones -> if NEWLINE .)
    READ            reduce using rule 21 (instrucciones -> if NEWLINE .)
    DECVARIABLE     reduce using rule 21 (instrucciones -> if NEWLINE .)
    NOMBRE          reduce using rule 21 (instrucciones -> if NEWLINE .)
    INCREMENTAR     reduce using rule 21 (instrucciones -> if NEWLINE .)
    DECREMENTAR     reduce using rule 21 (instrucciones -> if NEWLINE .)


state 30

    (22) instrucciones -> for NEWLINE .

    PRIVATE         reduce using rule 22 (instrucciones -> for NEWLINE .)
    PUBLIC          reduce using rule 22 (instrucciones -> for NEWLINE .)
    RETURN          reduce using rule 22 (instrucciones -> for NEWLINE .)
    TABULACION      reduce using rule 22 (instrucciones -> for NEWLINE .)
    NEWLINE         reduce using rule 22 (instrucciones -> for NEWLINE .)
    IF              reduce using rule 22 (instrucciones -> for NEWLINE .)
    FOR             reduce using rule 22 (instrucciones -> for NEWLINE .)
    WHILE           reduce using rule 22 (instrucciones -> for NEWLINE .)
    PRINT           reduce using rule 22 (instrucciones -> for NEWLINE .)
    READ            reduce using rule 22 (instrucciones -> for NEWLINE .)
    DECVARIABLE     reduce using rule 22 (instrucciones -> for NEWLINE .)
    NOMBRE          reduce using rule 22 (instrucciones -> for NEWLINE .)
    INCREMENTAR     reduce using rule 22 (instrucciones -> for NEWLINE .)
    DECREMENTAR     reduce using rule 22 (instrucciones -> for NEWLINE .)


state 31

    (23) instrucciones -> while NEWLINE .

    PRIVATE         reduce using rule 23 (instrucciones -> while NEWLINE .)
    PUBLIC          reduce using rule 23 (instrucciones -> while NEWLINE .)
    RETURN          reduce using rule 23 (instrucciones -> while NEWLINE .)
    TABULACION      reduce using rule 23 (instrucciones -> while NEWLINE .)
    NEWLINE         reduce using rule 23 (instrucciones -> while NEWLINE .)
    IF              reduce using rule 23 (instrucciones -> while NEWLINE .)
    FOR             reduce using rule 23 (instrucciones -> while NEWLINE .)
    WHILE           reduce using rule 23 (instrucciones -> while NEWLINE .)
    PRINT           reduce using rule 23 (instrucciones -> while NEWLINE .)
    READ            reduce using rule 23 (instrucciones -> while NEWLINE .)
    DECVARIABLE     reduce using rule 23 (instrucciones -> while NEWLINE .)
    NOMBRE          reduce using rule 23 (instrucciones -> while NEWLINE .)
    INCREMENTAR     reduce using rule 23 (instrucciones -> while NEWLINE .)
    DECREMENTAR     reduce using rule 23 (instrucciones -> while NEWLINE .)


state 32

    (24) instrucciones -> print NEWLINE .

    PRIVATE         reduce using rule 24 (instrucciones -> print NEWLINE .)
    PUBLIC          reduce using rule 24 (instrucciones -> print NEWLINE .)
    RETURN          reduce using rule 24 (instrucciones -> print NEWLINE .)
    TABULACION      reduce using rule 24 (instrucciones -> print NEWLINE .)
    NEWLINE         reduce using rule 24 (instrucciones -> print NEWLINE .)
    IF              reduce using rule 24 (instrucciones -> print NEWLINE .)
    FOR             reduce using rule 24 (instrucciones -> print NEWLINE .)
    WHILE           reduce using rule 24 (instrucciones -> print NEWLINE .)
    PRINT           reduce using rule 24 (instrucciones -> print NEWLINE .)
    READ            reduce using rule 24 (instrucciones -> print NEWLINE .)
    DECVARIABLE     reduce using rule 24 (instrucciones -> print NEWLINE .)
    NOMBRE          reduce using rule 24 (instrucciones -> print NEWLINE .)
    INCREMENTAR     reduce using rule 24 (instrucciones -> print NEWLINE .)
    DECREMENTAR     reduce using rule 24 (instrucciones -> print NEWLINE .)


state 33

    (25) instrucciones -> read NEWLINE .

    PRIVATE         reduce using rule 25 (instrucciones -> read NEWLINE .)
    PUBLIC          reduce using rule 25 (instrucciones -> read NEWLINE .)
    RETURN          reduce using rule 25 (instrucciones -> read NEWLINE .)
    TABULACION      reduce using rule 25 (instrucciones -> read NEWLINE .)
    NEWLINE         reduce using rule 25 (instrucciones -> read NEWLINE .)
    IF              reduce using rule 25 (instrucciones -> read NEWLINE .)
    FOR             reduce using rule 25 (instrucciones -> read NEWLINE .)
    WHILE           reduce using rule 25 (instrucciones -> read NEWLINE .)
    PRINT           reduce using rule 25 (instrucciones -> read NEWLINE .)
    READ            reduce using rule 25 (instrucciones -> read NEWLINE .)
    DECVARIABLE     reduce using rule 25 (instrucciones -> read NEWLINE .)
    NOMBRE          reduce using rule 25 (instrucciones -> read NEWLINE .)
    INCREMENTAR     reduce using rule 25 (instrucciones -> read NEWLINE .)
    DECREMENTAR     reduce using rule 25 (instrucciones -> read NEWLINE .)


state 34

    (26) instrucciones -> incdec NEWLINE .

    PRIVATE         reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    PUBLIC          reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    RETURN          reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    TABULACION      reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    NEWLINE         reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    IF              reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    FOR             reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    WHILE           reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    PRINT           reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    READ            reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    DECVARIABLE     reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    NOMBRE          reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    INCREMENTAR     reduce using rule 26 (instrucciones -> incdec NEWLINE .)
    DECREMENTAR     reduce using rule 26 (instrucciones -> incdec NEWLINE .)


state 35

    (27) instrucciones -> dec_variable NEWLINE .

    PRIVATE         reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    PUBLIC          reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    RETURN          reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    TABULACION      reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    NEWLINE         reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    IF              reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    FOR             reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    WHILE           reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    PRINT           reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    READ            reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    DECVARIABLE     reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    NOMBRE          reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    INCREMENTAR     reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)
    DECREMENTAR     reduce using rule 27 (instrucciones -> dec_variable NEWLINE .)


state 36

    (28) instrucciones -> dec_vector NEWLINE .

    PRIVATE         reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    PUBLIC          reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    RETURN          reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    TABULACION      reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    NEWLINE         reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    IF              reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    FOR             reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    WHILE           reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    PRINT           reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    READ            reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    DECVARIABLE     reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    NOMBRE          reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    INCREMENTAR     reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)
    DECREMENTAR     reduce using rule 28 (instrucciones -> dec_vector NEWLINE .)


state 37

    (29) instrucciones -> asignacion NEWLINE .

    PRIVATE         reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    PUBLIC          reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    RETURN          reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    TABULACION      reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    NEWLINE         reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    IF              reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    FOR             reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    WHILE           reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    PRINT           reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    READ            reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    DECVARIABLE     reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    NOMBRE          reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    INCREMENTAR     reduce using rule 29 (instrucciones -> asignacion NEWLINE .)
    DECREMENTAR     reduce using rule 29 (instrucciones -> asignacion NEWLINE .)


state 38

    (30) instrucciones -> llamado_funcion NEWLINE .

    PRIVATE         reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    PUBLIC          reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    RETURN          reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    TABULACION      reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    NEWLINE         reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    IF              reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    FOR             reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    WHILE           reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    PRINT           reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    READ            reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    DECVARIABLE     reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    NOMBRE          reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    INCREMENTAR     reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)
    DECREMENTAR     reduce using rule 30 (instrucciones -> llamado_funcion NEWLINE .)


state 39

    (31) instrucciones -> retorno NEWLINE .

    PRIVATE         reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    PUBLIC          reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    RETURN          reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    TABULACION      reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    NEWLINE         reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    IF              reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    FOR             reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    WHILE           reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    PRINT           reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    READ            reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    DECVARIABLE     reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    NOMBRE          reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    INCREMENTAR     reduce using rule 31 (instrucciones -> retorno NEWLINE .)
    DECREMENTAR     reduce using rule 31 (instrucciones -> retorno NEWLINE .)


state 40

    (33) if -> indentacion IF . PARIZQ condicion PARDER

    PARIZQ          shift and go to state 66


state 41

    (35) for -> indentacion FOR . PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER

    PARIZQ          shift and go to state 67


state 42

    (45) dec_variable -> indentacion DECVARIABLE . ASIGNACION op_aritmetica
    (46) dec_vector -> indentacion DECVARIABLE . CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (47) dec_vector -> indentacion DECVARIABLE . CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica

    ASIGNACION      shift and go to state 68
    CORCHETEIZQ     shift and go to state 69


state 43

    (42) while -> indentacion WHILE . PARIZQ condicion PARDER

    PARIZQ          shift and go to state 70


state 44

    (43) print -> indentacion PRINT . PARIZQ tipo_variable PARDER

    PARIZQ          shift and go to state 71


state 45

    (44) read -> indentacion READ . PARIZQ STRING PARDER

    PARIZQ          shift and go to state 72


state 46

    (36) incdec -> indentacion pre_incdec .

    NEWLINE         reduce using rule 36 (incdec -> indentacion pre_incdec .)
    PARDER          reduce using rule 36 (incdec -> indentacion pre_incdec .)


state 47

    (37) incdec -> indentacion post_incdec .

    NEWLINE         reduce using rule 37 (incdec -> indentacion post_incdec .)
    PARDER          reduce using rule 37 (incdec -> indentacion post_incdec .)


state 48

    (48) asignacion -> indentacion NOMBRE . ASIGNACION op_aritmetica
    (16) llamado_funcion -> indentacion NOMBRE . PARIZQ parametro_llamado PARDER
    (40) post_incdec -> NOMBRE . INCREMENTAR
    (41) post_incdec -> NOMBRE . DECREMENTAR

    ASIGNACION      shift and go to state 73
    PARIZQ          shift and go to state 74
    INCREMENTAR     shift and go to state 75
    DECREMENTAR     shift and go to state 76


state 49

    (38) pre_incdec -> INCREMENTAR . NOMBRE

    NOMBRE          shift and go to state 77


state 50

    (39) pre_incdec -> DECREMENTAR . NOMBRE

    NOMBRE          shift and go to state 78


state 51

    (51) retorno -> RETURN tipo_variable .
    (69) op_aritmetica -> tipo_variable . operador_aritmetico tipo_variable op_aritmetica_extra
    (74) operador_aritmetico -> . SUMA
    (75) operador_aritmetico -> . RESTA
    (76) operador_aritmetico -> . MULT
    (77) operador_aritmetico -> . DIV

    NEWLINE         reduce using rule 51 (retorno -> RETURN tipo_variable .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULT            shift and go to state 82
    DIV             shift and go to state 83

    operador_aritmetico            shift and go to state 79

state 52

    (52) retorno -> RETURN op_aritmetica .

    NEWLINE         reduce using rule 52 (retorno -> RETURN op_aritmetica .)


state 53

    (62) tipo_variable -> NOMBRE .

    SUMA            reduce using rule 62 (tipo_variable -> NOMBRE .)
    RESTA           reduce using rule 62 (tipo_variable -> NOMBRE .)
    MULT            reduce using rule 62 (tipo_variable -> NOMBRE .)
    DIV             reduce using rule 62 (tipo_variable -> NOMBRE .)
    NEWLINE         reduce using rule 62 (tipo_variable -> NOMBRE .)
    DIFERENTE       reduce using rule 62 (tipo_variable -> NOMBRE .)
    IGUAL           reduce using rule 62 (tipo_variable -> NOMBRE .)
    MAYOR           reduce using rule 62 (tipo_variable -> NOMBRE .)
    MAYORIGUAL      reduce using rule 62 (tipo_variable -> NOMBRE .)
    MENOR           reduce using rule 62 (tipo_variable -> NOMBRE .)
    MENORIGUAL      reduce using rule 62 (tipo_variable -> NOMBRE .)
    PARDER          reduce using rule 62 (tipo_variable -> NOMBRE .)
    COMA            reduce using rule 62 (tipo_variable -> NOMBRE .)
    AND             reduce using rule 62 (tipo_variable -> NOMBRE .)
    OR              reduce using rule 62 (tipo_variable -> NOMBRE .)
    PUNTOYCOMA      reduce using rule 62 (tipo_variable -> NOMBRE .)


state 54

    (63) tipo_variable -> DOUBLE .

    SUMA            reduce using rule 63 (tipo_variable -> DOUBLE .)
    RESTA           reduce using rule 63 (tipo_variable -> DOUBLE .)
    MULT            reduce using rule 63 (tipo_variable -> DOUBLE .)
    DIV             reduce using rule 63 (tipo_variable -> DOUBLE .)
    NEWLINE         reduce using rule 63 (tipo_variable -> DOUBLE .)
    DIFERENTE       reduce using rule 63 (tipo_variable -> DOUBLE .)
    IGUAL           reduce using rule 63 (tipo_variable -> DOUBLE .)
    MAYOR           reduce using rule 63 (tipo_variable -> DOUBLE .)
    MAYORIGUAL      reduce using rule 63 (tipo_variable -> DOUBLE .)
    MENOR           reduce using rule 63 (tipo_variable -> DOUBLE .)
    MENORIGUAL      reduce using rule 63 (tipo_variable -> DOUBLE .)
    PARDER          reduce using rule 63 (tipo_variable -> DOUBLE .)
    COMA            reduce using rule 63 (tipo_variable -> DOUBLE .)
    AND             reduce using rule 63 (tipo_variable -> DOUBLE .)
    OR              reduce using rule 63 (tipo_variable -> DOUBLE .)
    PUNTOYCOMA      reduce using rule 63 (tipo_variable -> DOUBLE .)


state 55

    (64) tipo_variable -> INT .

    SUMA            reduce using rule 64 (tipo_variable -> INT .)
    RESTA           reduce using rule 64 (tipo_variable -> INT .)
    MULT            reduce using rule 64 (tipo_variable -> INT .)
    DIV             reduce using rule 64 (tipo_variable -> INT .)
    NEWLINE         reduce using rule 64 (tipo_variable -> INT .)
    DIFERENTE       reduce using rule 64 (tipo_variable -> INT .)
    IGUAL           reduce using rule 64 (tipo_variable -> INT .)
    MAYOR           reduce using rule 64 (tipo_variable -> INT .)
    MAYORIGUAL      reduce using rule 64 (tipo_variable -> INT .)
    MENOR           reduce using rule 64 (tipo_variable -> INT .)
    MENORIGUAL      reduce using rule 64 (tipo_variable -> INT .)
    PARDER          reduce using rule 64 (tipo_variable -> INT .)
    COMA            reduce using rule 64 (tipo_variable -> INT .)
    AND             reduce using rule 64 (tipo_variable -> INT .)
    OR              reduce using rule 64 (tipo_variable -> INT .)
    PUNTOYCOMA      reduce using rule 64 (tipo_variable -> INT .)


state 56

    (65) tipo_variable -> STRING .

    SUMA            reduce using rule 65 (tipo_variable -> STRING .)
    RESTA           reduce using rule 65 (tipo_variable -> STRING .)
    MULT            reduce using rule 65 (tipo_variable -> STRING .)
    DIV             reduce using rule 65 (tipo_variable -> STRING .)
    NEWLINE         reduce using rule 65 (tipo_variable -> STRING .)
    DIFERENTE       reduce using rule 65 (tipo_variable -> STRING .)
    IGUAL           reduce using rule 65 (tipo_variable -> STRING .)
    MAYOR           reduce using rule 65 (tipo_variable -> STRING .)
    MAYORIGUAL      reduce using rule 65 (tipo_variable -> STRING .)
    MENOR           reduce using rule 65 (tipo_variable -> STRING .)
    MENORIGUAL      reduce using rule 65 (tipo_variable -> STRING .)
    PARDER          reduce using rule 65 (tipo_variable -> STRING .)
    COMA            reduce using rule 65 (tipo_variable -> STRING .)
    AND             reduce using rule 65 (tipo_variable -> STRING .)
    OR              reduce using rule 65 (tipo_variable -> STRING .)
    PUNTOYCOMA      reduce using rule 65 (tipo_variable -> STRING .)


state 57

    (66) tipo_variable -> FALSE .

    SUMA            reduce using rule 66 (tipo_variable -> FALSE .)
    RESTA           reduce using rule 66 (tipo_variable -> FALSE .)
    MULT            reduce using rule 66 (tipo_variable -> FALSE .)
    DIV             reduce using rule 66 (tipo_variable -> FALSE .)
    NEWLINE         reduce using rule 66 (tipo_variable -> FALSE .)
    DIFERENTE       reduce using rule 66 (tipo_variable -> FALSE .)
    IGUAL           reduce using rule 66 (tipo_variable -> FALSE .)
    MAYOR           reduce using rule 66 (tipo_variable -> FALSE .)
    MAYORIGUAL      reduce using rule 66 (tipo_variable -> FALSE .)
    MENOR           reduce using rule 66 (tipo_variable -> FALSE .)
    MENORIGUAL      reduce using rule 66 (tipo_variable -> FALSE .)
    PARDER          reduce using rule 66 (tipo_variable -> FALSE .)
    COMA            reduce using rule 66 (tipo_variable -> FALSE .)
    AND             reduce using rule 66 (tipo_variable -> FALSE .)
    OR              reduce using rule 66 (tipo_variable -> FALSE .)
    PUNTOYCOMA      reduce using rule 66 (tipo_variable -> FALSE .)


state 58

    (67) tipo_variable -> TRUE .

    SUMA            reduce using rule 67 (tipo_variable -> TRUE .)
    RESTA           reduce using rule 67 (tipo_variable -> TRUE .)
    MULT            reduce using rule 67 (tipo_variable -> TRUE .)
    DIV             reduce using rule 67 (tipo_variable -> TRUE .)
    NEWLINE         reduce using rule 67 (tipo_variable -> TRUE .)
    DIFERENTE       reduce using rule 67 (tipo_variable -> TRUE .)
    IGUAL           reduce using rule 67 (tipo_variable -> TRUE .)
    MAYOR           reduce using rule 67 (tipo_variable -> TRUE .)
    MAYORIGUAL      reduce using rule 67 (tipo_variable -> TRUE .)
    MENOR           reduce using rule 67 (tipo_variable -> TRUE .)
    MENORIGUAL      reduce using rule 67 (tipo_variable -> TRUE .)
    PARDER          reduce using rule 67 (tipo_variable -> TRUE .)
    COMA            reduce using rule 67 (tipo_variable -> TRUE .)
    AND             reduce using rule 67 (tipo_variable -> TRUE .)
    OR              reduce using rule 67 (tipo_variable -> TRUE .)
    PUNTOYCOMA      reduce using rule 67 (tipo_variable -> TRUE .)


state 59

    (68) tipo_variable -> llamado_funcion .

    SUMA            reduce using rule 68 (tipo_variable -> llamado_funcion .)
    RESTA           reduce using rule 68 (tipo_variable -> llamado_funcion .)
    MULT            reduce using rule 68 (tipo_variable -> llamado_funcion .)
    DIV             reduce using rule 68 (tipo_variable -> llamado_funcion .)
    NEWLINE         reduce using rule 68 (tipo_variable -> llamado_funcion .)
    DIFERENTE       reduce using rule 68 (tipo_variable -> llamado_funcion .)
    IGUAL           reduce using rule 68 (tipo_variable -> llamado_funcion .)
    MAYOR           reduce using rule 68 (tipo_variable -> llamado_funcion .)
    MAYORIGUAL      reduce using rule 68 (tipo_variable -> llamado_funcion .)
    MENOR           reduce using rule 68 (tipo_variable -> llamado_funcion .)
    MENORIGUAL      reduce using rule 68 (tipo_variable -> llamado_funcion .)
    PARDER          reduce using rule 68 (tipo_variable -> llamado_funcion .)
    COMA            reduce using rule 68 (tipo_variable -> llamado_funcion .)
    AND             reduce using rule 68 (tipo_variable -> llamado_funcion .)
    OR              reduce using rule 68 (tipo_variable -> llamado_funcion .)
    PUNTOYCOMA      reduce using rule 68 (tipo_variable -> llamado_funcion .)


state 60

    (70) op_aritmetica -> vacio .
    (3) indentacion -> vacio .

    NEWLINE         reduce using rule 70 (op_aritmetica -> vacio .)
    NOMBRE          reduce using rule 3 (indentacion -> vacio .)


state 61

    (16) llamado_funcion -> indentacion . NOMBRE PARIZQ parametro_llamado PARDER

    NOMBRE          shift and go to state 84


state 62

    (4) indentacion -> TABULACION indentacion .

    IF              reduce using rule 4 (indentacion -> TABULACION indentacion .)
    FOR             reduce using rule 4 (indentacion -> TABULACION indentacion .)
    WHILE           reduce using rule 4 (indentacion -> TABULACION indentacion .)
    PRINT           reduce using rule 4 (indentacion -> TABULACION indentacion .)
    READ            reduce using rule 4 (indentacion -> TABULACION indentacion .)
    DECVARIABLE     reduce using rule 4 (indentacion -> TABULACION indentacion .)
    NOMBRE          reduce using rule 4 (indentacion -> TABULACION indentacion .)
    INCREMENTAR     reduce using rule 4 (indentacion -> TABULACION indentacion .)
    DECREMENTAR     reduce using rule 4 (indentacion -> TABULACION indentacion .)


state 63

    (3) indentacion -> vacio .

    IF              reduce using rule 3 (indentacion -> vacio .)
    FOR             reduce using rule 3 (indentacion -> vacio .)
    WHILE           reduce using rule 3 (indentacion -> vacio .)
    PRINT           reduce using rule 3 (indentacion -> vacio .)
    READ            reduce using rule 3 (indentacion -> vacio .)
    DECVARIABLE     reduce using rule 3 (indentacion -> vacio .)
    NOMBRE          reduce using rule 3 (indentacion -> vacio .)
    INCREMENTAR     reduce using rule 3 (indentacion -> vacio .)
    DECREMENTAR     reduce using rule 3 (indentacion -> vacio .)


state 64

    (7) definicion_funcion -> dominio return NOMBRE . PARIZQ parametro PARDER

    PARIZQ          shift and go to state 85


state 65

    (1) inicial -> funcion inicial instrucciones NEWLINE .

    $end            reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    RETURN          reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    TABULACION      reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    NEWLINE         reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    IF              reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    FOR             reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    WHILE           reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    PRINT           reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    READ            reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    DECVARIABLE     reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    NOMBRE          reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    INCREMENTAR     reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)
    DECREMENTAR     reduce using rule 1 (inicial -> funcion inicial instrucciones NEWLINE .)


state 66

    (33) if -> indentacion IF PARIZQ . condicion PARDER
    (59) condicion -> . tipo_variable operador_condicional tipo_variable condicion_extra
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    indentacion                    shift and go to state 61
    condicion                      shift and go to state 86
    tipo_variable                  shift and go to state 87
    llamado_funcion                shift and go to state 59
    vacio                          shift and go to state 63

state 67

    (35) for -> indentacion FOR PARIZQ . DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER

    DECVARIABLE     shift and go to state 88


state 68

    (45) dec_variable -> indentacion DECVARIABLE ASIGNACION . op_aritmetica
    (69) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (70) op_aritmetica -> . vacio
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (80) vacio -> .
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    NEWLINE         reduce using rule 80 (vacio -> .)
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    indentacion                    shift and go to state 61
    op_aritmetica                  shift and go to state 89
    tipo_variable                  shift and go to state 90
    vacio                          shift and go to state 60
    llamado_funcion                shift and go to state 59

state 69

    (46) dec_vector -> indentacion DECVARIABLE CORCHETEIZQ . NOMBRE CORCHETEDER ASIGNACION op_aritmetica
    (47) dec_vector -> indentacion DECVARIABLE CORCHETEIZQ . INT CORCHETEDER ASIGNACION op_aritmetica

    NOMBRE          shift and go to state 91
    INT             shift and go to state 92


state 70

    (42) while -> indentacion WHILE PARIZQ . condicion PARDER
    (59) condicion -> . tipo_variable operador_condicional tipo_variable condicion_extra
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    indentacion                    shift and go to state 61
    condicion                      shift and go to state 93
    tipo_variable                  shift and go to state 87
    llamado_funcion                shift and go to state 59
    vacio                          shift and go to state 63

state 71

    (43) print -> indentacion PRINT PARIZQ . tipo_variable PARDER
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    indentacion                    shift and go to state 61
    tipo_variable                  shift and go to state 94
    llamado_funcion                shift and go to state 59
    vacio                          shift and go to state 63

state 72

    (44) read -> indentacion READ PARIZQ . STRING PARDER

    STRING          shift and go to state 95


state 73

    (48) asignacion -> indentacion NOMBRE ASIGNACION . op_aritmetica
    (69) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (70) op_aritmetica -> . vacio
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (80) vacio -> .
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    NEWLINE         reduce using rule 80 (vacio -> .)
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    indentacion                    shift and go to state 61
    op_aritmetica                  shift and go to state 96
    tipo_variable                  shift and go to state 90
    vacio                          shift and go to state 60
    llamado_funcion                shift and go to state 59

state 74

    (16) llamado_funcion -> indentacion NOMBRE PARIZQ . parametro_llamado PARDER
    (17) parametro_llamado -> . vacio
    (18) parametro_llamado -> . tipo_variable parametro_llamado_extra
    (80) vacio -> .
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion

  ! shift/reduce conflict for NOMBRE resolved as shift
    PARDER          reduce using rule 80 (vacio -> .)
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    indentacion                    shift and go to state 61
    parametro_llamado              shift and go to state 97
    vacio                          shift and go to state 98
    tipo_variable                  shift and go to state 99
    llamado_funcion                shift and go to state 59

state 75

    (40) post_incdec -> NOMBRE INCREMENTAR .

    NEWLINE         reduce using rule 40 (post_incdec -> NOMBRE INCREMENTAR .)
    PARDER          reduce using rule 40 (post_incdec -> NOMBRE INCREMENTAR .)


state 76

    (41) post_incdec -> NOMBRE DECREMENTAR .

    NEWLINE         reduce using rule 41 (post_incdec -> NOMBRE DECREMENTAR .)
    PARDER          reduce using rule 41 (post_incdec -> NOMBRE DECREMENTAR .)


state 77

    (38) pre_incdec -> INCREMENTAR NOMBRE .

    NEWLINE         reduce using rule 38 (pre_incdec -> INCREMENTAR NOMBRE .)
    PARDER          reduce using rule 38 (pre_incdec -> INCREMENTAR NOMBRE .)


state 78

    (39) pre_incdec -> DECREMENTAR NOMBRE .

    NEWLINE         reduce using rule 39 (pre_incdec -> DECREMENTAR NOMBRE .)
    PARDER          reduce using rule 39 (pre_incdec -> DECREMENTAR NOMBRE .)


state 79

    (69) op_aritmetica -> tipo_variable operador_aritmetico . tipo_variable op_aritmetica_extra
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    tipo_variable                  shift and go to state 100
    llamado_funcion                shift and go to state 59
    indentacion                    shift and go to state 61
    vacio                          shift and go to state 63

state 80

    (74) operador_aritmetico -> SUMA .

    NOMBRE          reduce using rule 74 (operador_aritmetico -> SUMA .)
    DOUBLE          reduce using rule 74 (operador_aritmetico -> SUMA .)
    INT             reduce using rule 74 (operador_aritmetico -> SUMA .)
    STRING          reduce using rule 74 (operador_aritmetico -> SUMA .)
    FALSE           reduce using rule 74 (operador_aritmetico -> SUMA .)
    TRUE            reduce using rule 74 (operador_aritmetico -> SUMA .)
    TABULACION      reduce using rule 74 (operador_aritmetico -> SUMA .)
    PARIZQ          reduce using rule 74 (operador_aritmetico -> SUMA .)


state 81

    (75) operador_aritmetico -> RESTA .

    NOMBRE          reduce using rule 75 (operador_aritmetico -> RESTA .)
    DOUBLE          reduce using rule 75 (operador_aritmetico -> RESTA .)
    INT             reduce using rule 75 (operador_aritmetico -> RESTA .)
    STRING          reduce using rule 75 (operador_aritmetico -> RESTA .)
    FALSE           reduce using rule 75 (operador_aritmetico -> RESTA .)
    TRUE            reduce using rule 75 (operador_aritmetico -> RESTA .)
    TABULACION      reduce using rule 75 (operador_aritmetico -> RESTA .)
    PARIZQ          reduce using rule 75 (operador_aritmetico -> RESTA .)


state 82

    (76) operador_aritmetico -> MULT .

    NOMBRE          reduce using rule 76 (operador_aritmetico -> MULT .)
    DOUBLE          reduce using rule 76 (operador_aritmetico -> MULT .)
    INT             reduce using rule 76 (operador_aritmetico -> MULT .)
    STRING          reduce using rule 76 (operador_aritmetico -> MULT .)
    FALSE           reduce using rule 76 (operador_aritmetico -> MULT .)
    TRUE            reduce using rule 76 (operador_aritmetico -> MULT .)
    TABULACION      reduce using rule 76 (operador_aritmetico -> MULT .)
    PARIZQ          reduce using rule 76 (operador_aritmetico -> MULT .)


state 83

    (77) operador_aritmetico -> DIV .

    NOMBRE          reduce using rule 77 (operador_aritmetico -> DIV .)
    DOUBLE          reduce using rule 77 (operador_aritmetico -> DIV .)
    INT             reduce using rule 77 (operador_aritmetico -> DIV .)
    STRING          reduce using rule 77 (operador_aritmetico -> DIV .)
    FALSE           reduce using rule 77 (operador_aritmetico -> DIV .)
    TRUE            reduce using rule 77 (operador_aritmetico -> DIV .)
    TABULACION      reduce using rule 77 (operador_aritmetico -> DIV .)
    PARIZQ          reduce using rule 77 (operador_aritmetico -> DIV .)


state 84

    (16) llamado_funcion -> indentacion NOMBRE . PARIZQ parametro_llamado PARDER

    PARIZQ          shift and go to state 74


state 85

    (7) definicion_funcion -> dominio return NOMBRE PARIZQ . parametro PARDER
    (12) parametro -> . vacio
    (13) parametro -> . NOMBRE parametro_extra
    (80) vacio -> .

    NOMBRE          shift and go to state 101
    PARDER          reduce using rule 80 (vacio -> .)

    parametro                      shift and go to state 102
    vacio                          shift and go to state 103

state 86

    (33) if -> indentacion IF PARIZQ condicion . PARDER

    PARDER          shift and go to state 104


state 87

    (59) condicion -> tipo_variable . operador_condicional tipo_variable condicion_extra
    (53) operador_condicional -> . DIFERENTE
    (54) operador_condicional -> . IGUAL
    (55) operador_condicional -> . MAYOR
    (56) operador_condicional -> . MAYORIGUAL
    (57) operador_condicional -> . MENOR
    (58) operador_condicional -> . MENORIGUAL

    DIFERENTE       shift and go to state 106
    IGUAL           shift and go to state 107
    MAYOR           shift and go to state 108
    MAYORIGUAL      shift and go to state 109
    MENOR           shift and go to state 110
    MENORIGUAL      shift and go to state 111

    operador_condicional           shift and go to state 105

state 88

    (35) for -> indentacion FOR PARIZQ DECVARIABLE . ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER

    ASIGNACION      shift and go to state 112


state 89

    (45) dec_variable -> indentacion DECVARIABLE ASIGNACION op_aritmetica .

    NEWLINE         reduce using rule 45 (dec_variable -> indentacion DECVARIABLE ASIGNACION op_aritmetica .)


state 90

    (69) op_aritmetica -> tipo_variable . operador_aritmetico tipo_variable op_aritmetica_extra
    (74) operador_aritmetico -> . SUMA
    (75) operador_aritmetico -> . RESTA
    (76) operador_aritmetico -> . MULT
    (77) operador_aritmetico -> . DIV

    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULT            shift and go to state 82
    DIV             shift and go to state 83

    operador_aritmetico            shift and go to state 79

state 91

    (46) dec_vector -> indentacion DECVARIABLE CORCHETEIZQ NOMBRE . CORCHETEDER ASIGNACION op_aritmetica

    CORCHETEDER     shift and go to state 113


state 92

    (47) dec_vector -> indentacion DECVARIABLE CORCHETEIZQ INT . CORCHETEDER ASIGNACION op_aritmetica

    CORCHETEDER     shift and go to state 114


state 93

    (42) while -> indentacion WHILE PARIZQ condicion . PARDER

    PARDER          shift and go to state 115


state 94

    (43) print -> indentacion PRINT PARIZQ tipo_variable . PARDER

    PARDER          shift and go to state 116


state 95

    (44) read -> indentacion READ PARIZQ STRING . PARDER

    PARDER          shift and go to state 117


state 96

    (48) asignacion -> indentacion NOMBRE ASIGNACION op_aritmetica .

    NEWLINE         reduce using rule 48 (asignacion -> indentacion NOMBRE ASIGNACION op_aritmetica .)


state 97

    (16) llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado . PARDER

    PARDER          shift and go to state 118


state 98

    (17) parametro_llamado -> vacio .
    (3) indentacion -> vacio .

    PARDER          reduce using rule 17 (parametro_llamado -> vacio .)
    NOMBRE          reduce using rule 3 (indentacion -> vacio .)


state 99

    (18) parametro_llamado -> tipo_variable . parametro_llamado_extra
    (19) parametro_llamado_extra -> . COMA NOMBRE parametro_llamado_extra
    (20) parametro_llamado_extra -> . vacio
    (80) vacio -> .

    COMA            shift and go to state 120
    PARDER          reduce using rule 80 (vacio -> .)

    parametro_llamado_extra        shift and go to state 119
    vacio                          shift and go to state 121

state 100

    (69) op_aritmetica -> tipo_variable operador_aritmetico tipo_variable . op_aritmetica_extra
    (71) op_aritmetica_extra -> . operador_aritmetico tipo_variable op_aritmetica_extra
    (72) op_aritmetica_extra -> . operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER
    (73) op_aritmetica_extra -> . vacio
    (74) operador_aritmetico -> . SUMA
    (75) operador_aritmetico -> . RESTA
    (76) operador_aritmetico -> . MULT
    (77) operador_aritmetico -> . DIV
    (80) vacio -> .

    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULT            shift and go to state 82
    DIV             shift and go to state 83
    NEWLINE         reduce using rule 80 (vacio -> .)

    operador_aritmetico            shift and go to state 122
    op_aritmetica_extra            shift and go to state 123
    vacio                          shift and go to state 124

state 101

    (13) parametro -> NOMBRE . parametro_extra
    (14) parametro_extra -> . COMA NOMBRE parametro_extra
    (15) parametro_extra -> . vacio
    (80) vacio -> .

    COMA            shift and go to state 126
    PARDER          reduce using rule 80 (vacio -> .)

    parametro_extra                shift and go to state 125
    vacio                          shift and go to state 127

state 102

    (7) definicion_funcion -> dominio return NOMBRE PARIZQ parametro . PARDER

    PARDER          shift and go to state 128


state 103

    (12) parametro -> vacio .

    PARDER          reduce using rule 12 (parametro -> vacio .)


state 104

    (33) if -> indentacion IF PARIZQ condicion PARDER .

    NEWLINE         reduce using rule 33 (if -> indentacion IF PARIZQ condicion PARDER .)


state 105

    (59) condicion -> tipo_variable operador_condicional . tipo_variable condicion_extra
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    tipo_variable                  shift and go to state 129
    llamado_funcion                shift and go to state 59
    indentacion                    shift and go to state 61
    vacio                          shift and go to state 63

state 106

    (53) operador_condicional -> DIFERENTE .

    NOMBRE          reduce using rule 53 (operador_condicional -> DIFERENTE .)
    DOUBLE          reduce using rule 53 (operador_condicional -> DIFERENTE .)
    INT             reduce using rule 53 (operador_condicional -> DIFERENTE .)
    STRING          reduce using rule 53 (operador_condicional -> DIFERENTE .)
    FALSE           reduce using rule 53 (operador_condicional -> DIFERENTE .)
    TRUE            reduce using rule 53 (operador_condicional -> DIFERENTE .)
    TABULACION      reduce using rule 53 (operador_condicional -> DIFERENTE .)


state 107

    (54) operador_condicional -> IGUAL .

    NOMBRE          reduce using rule 54 (operador_condicional -> IGUAL .)
    DOUBLE          reduce using rule 54 (operador_condicional -> IGUAL .)
    INT             reduce using rule 54 (operador_condicional -> IGUAL .)
    STRING          reduce using rule 54 (operador_condicional -> IGUAL .)
    FALSE           reduce using rule 54 (operador_condicional -> IGUAL .)
    TRUE            reduce using rule 54 (operador_condicional -> IGUAL .)
    TABULACION      reduce using rule 54 (operador_condicional -> IGUAL .)


state 108

    (55) operador_condicional -> MAYOR .

    NOMBRE          reduce using rule 55 (operador_condicional -> MAYOR .)
    DOUBLE          reduce using rule 55 (operador_condicional -> MAYOR .)
    INT             reduce using rule 55 (operador_condicional -> MAYOR .)
    STRING          reduce using rule 55 (operador_condicional -> MAYOR .)
    FALSE           reduce using rule 55 (operador_condicional -> MAYOR .)
    TRUE            reduce using rule 55 (operador_condicional -> MAYOR .)
    TABULACION      reduce using rule 55 (operador_condicional -> MAYOR .)


state 109

    (56) operador_condicional -> MAYORIGUAL .

    NOMBRE          reduce using rule 56 (operador_condicional -> MAYORIGUAL .)
    DOUBLE          reduce using rule 56 (operador_condicional -> MAYORIGUAL .)
    INT             reduce using rule 56 (operador_condicional -> MAYORIGUAL .)
    STRING          reduce using rule 56 (operador_condicional -> MAYORIGUAL .)
    FALSE           reduce using rule 56 (operador_condicional -> MAYORIGUAL .)
    TRUE            reduce using rule 56 (operador_condicional -> MAYORIGUAL .)
    TABULACION      reduce using rule 56 (operador_condicional -> MAYORIGUAL .)


state 110

    (57) operador_condicional -> MENOR .

    NOMBRE          reduce using rule 57 (operador_condicional -> MENOR .)
    DOUBLE          reduce using rule 57 (operador_condicional -> MENOR .)
    INT             reduce using rule 57 (operador_condicional -> MENOR .)
    STRING          reduce using rule 57 (operador_condicional -> MENOR .)
    FALSE           reduce using rule 57 (operador_condicional -> MENOR .)
    TRUE            reduce using rule 57 (operador_condicional -> MENOR .)
    TABULACION      reduce using rule 57 (operador_condicional -> MENOR .)


state 111

    (58) operador_condicional -> MENORIGUAL .

    NOMBRE          reduce using rule 58 (operador_condicional -> MENORIGUAL .)
    DOUBLE          reduce using rule 58 (operador_condicional -> MENORIGUAL .)
    INT             reduce using rule 58 (operador_condicional -> MENORIGUAL .)
    STRING          reduce using rule 58 (operador_condicional -> MENORIGUAL .)
    FALSE           reduce using rule 58 (operador_condicional -> MENORIGUAL .)
    TRUE            reduce using rule 58 (operador_condicional -> MENORIGUAL .)
    TABULACION      reduce using rule 58 (operador_condicional -> MENORIGUAL .)


state 112

    (35) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION . INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER

    INT             shift and go to state 130


state 113

    (46) dec_vector -> indentacion DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER . ASIGNACION op_aritmetica

    ASIGNACION      shift and go to state 131


state 114

    (47) dec_vector -> indentacion DECVARIABLE CORCHETEIZQ INT CORCHETEDER . ASIGNACION op_aritmetica

    ASIGNACION      shift and go to state 132


state 115

    (42) while -> indentacion WHILE PARIZQ condicion PARDER .

    NEWLINE         reduce using rule 42 (while -> indentacion WHILE PARIZQ condicion PARDER .)


state 116

    (43) print -> indentacion PRINT PARIZQ tipo_variable PARDER .

    NEWLINE         reduce using rule 43 (print -> indentacion PRINT PARIZQ tipo_variable PARDER .)


state 117

    (44) read -> indentacion READ PARIZQ STRING PARDER .

    NEWLINE         reduce using rule 44 (read -> indentacion READ PARIZQ STRING PARDER .)


state 118

    (16) llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .

    NEWLINE         reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    SUMA            reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    RESTA           reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    MULT            reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    DIV             reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    DIFERENTE       reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    IGUAL           reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    MAYOR           reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    MAYORIGUAL      reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    MENOR           reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    MENORIGUAL      reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    PARDER          reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    COMA            reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    AND             reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    OR              reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)
    PUNTOYCOMA      reduce using rule 16 (llamado_funcion -> indentacion NOMBRE PARIZQ parametro_llamado PARDER .)


state 119

    (18) parametro_llamado -> tipo_variable parametro_llamado_extra .

    PARDER          reduce using rule 18 (parametro_llamado -> tipo_variable parametro_llamado_extra .)


state 120

    (19) parametro_llamado_extra -> COMA . NOMBRE parametro_llamado_extra

    NOMBRE          shift and go to state 133


state 121

    (20) parametro_llamado_extra -> vacio .

    PARDER          reduce using rule 20 (parametro_llamado_extra -> vacio .)


state 122

    (71) op_aritmetica_extra -> operador_aritmetico . tipo_variable op_aritmetica_extra
    (72) op_aritmetica_extra -> operador_aritmetico . PARIZQ tipo_variable op_aritmetica_extra PARDER
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    PARIZQ          shift and go to state 135
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    tipo_variable                  shift and go to state 134
    llamado_funcion                shift and go to state 59
    indentacion                    shift and go to state 61
    vacio                          shift and go to state 63

state 123

    (69) op_aritmetica -> tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra .

    NEWLINE         reduce using rule 69 (op_aritmetica -> tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra .)


state 124

    (73) op_aritmetica_extra -> vacio .

    NEWLINE         reduce using rule 73 (op_aritmetica_extra -> vacio .)
    PARDER          reduce using rule 73 (op_aritmetica_extra -> vacio .)


state 125

    (13) parametro -> NOMBRE parametro_extra .

    PARDER          reduce using rule 13 (parametro -> NOMBRE parametro_extra .)


state 126

    (14) parametro_extra -> COMA . NOMBRE parametro_extra

    NOMBRE          shift and go to state 136


state 127

    (15) parametro_extra -> vacio .

    PARDER          reduce using rule 15 (parametro_extra -> vacio .)


state 128

    (7) definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .

    RETURN          reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    TABULACION      reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    IF              reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    FOR             reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    WHILE           reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    PRINT           reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    READ            reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    DECVARIABLE     reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    NOMBRE          reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    INCREMENTAR     reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    DECREMENTAR     reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    PRIVATE         reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    PUBLIC          reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)
    NEWLINE         reduce using rule 7 (definicion_funcion -> dominio return NOMBRE PARIZQ parametro PARDER .)


state 129

    (59) condicion -> tipo_variable operador_condicional tipo_variable . condicion_extra
    (60) condicion_extra -> . operador_logico tipo_variable operador_condicional tipo_variable condicion_extra
    (61) condicion_extra -> . vacio
    (78) operador_logico -> . AND
    (79) operador_logico -> . OR
    (80) vacio -> .

    AND             shift and go to state 140
    OR              shift and go to state 141
    PARDER          reduce using rule 80 (vacio -> .)
    PUNTOYCOMA      reduce using rule 80 (vacio -> .)

    condicion_extra                shift and go to state 137
    operador_logico                shift and go to state 138
    vacio                          shift and go to state 139

state 130

    (35) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT . PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER

    PUNTOYCOMA      shift and go to state 142


state 131

    (46) dec_vector -> indentacion DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION . op_aritmetica
    (69) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (70) op_aritmetica -> . vacio
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (80) vacio -> .
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    NEWLINE         reduce using rule 80 (vacio -> .)
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    indentacion                    shift and go to state 61
    op_aritmetica                  shift and go to state 143
    tipo_variable                  shift and go to state 90
    vacio                          shift and go to state 60
    llamado_funcion                shift and go to state 59

state 132

    (47) dec_vector -> indentacion DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION . op_aritmetica
    (69) op_aritmetica -> . tipo_variable operador_aritmetico tipo_variable op_aritmetica_extra
    (70) op_aritmetica -> . vacio
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (80) vacio -> .
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    NEWLINE         reduce using rule 80 (vacio -> .)
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    indentacion                    shift and go to state 61
    op_aritmetica                  shift and go to state 144
    tipo_variable                  shift and go to state 90
    vacio                          shift and go to state 60
    llamado_funcion                shift and go to state 59

state 133

    (19) parametro_llamado_extra -> COMA NOMBRE . parametro_llamado_extra
    (19) parametro_llamado_extra -> . COMA NOMBRE parametro_llamado_extra
    (20) parametro_llamado_extra -> . vacio
    (80) vacio -> .

    COMA            shift and go to state 120
    PARDER          reduce using rule 80 (vacio -> .)

    parametro_llamado_extra        shift and go to state 145
    vacio                          shift and go to state 121

state 134

    (71) op_aritmetica_extra -> operador_aritmetico tipo_variable . op_aritmetica_extra
    (71) op_aritmetica_extra -> . operador_aritmetico tipo_variable op_aritmetica_extra
    (72) op_aritmetica_extra -> . operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER
    (73) op_aritmetica_extra -> . vacio
    (74) operador_aritmetico -> . SUMA
    (75) operador_aritmetico -> . RESTA
    (76) operador_aritmetico -> . MULT
    (77) operador_aritmetico -> . DIV
    (80) vacio -> .

    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULT            shift and go to state 82
    DIV             shift and go to state 83
    NEWLINE         reduce using rule 80 (vacio -> .)
    PARDER          reduce using rule 80 (vacio -> .)

    operador_aritmetico            shift and go to state 122
    op_aritmetica_extra            shift and go to state 146
    vacio                          shift and go to state 124

state 135

    (72) op_aritmetica_extra -> operador_aritmetico PARIZQ . tipo_variable op_aritmetica_extra PARDER
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    tipo_variable                  shift and go to state 147
    llamado_funcion                shift and go to state 59
    indentacion                    shift and go to state 61
    vacio                          shift and go to state 63

state 136

    (14) parametro_extra -> COMA NOMBRE . parametro_extra
    (14) parametro_extra -> . COMA NOMBRE parametro_extra
    (15) parametro_extra -> . vacio
    (80) vacio -> .

    COMA            shift and go to state 126
    PARDER          reduce using rule 80 (vacio -> .)

    parametro_extra                shift and go to state 148
    vacio                          shift and go to state 127

state 137

    (59) condicion -> tipo_variable operador_condicional tipo_variable condicion_extra .

    PARDER          reduce using rule 59 (condicion -> tipo_variable operador_condicional tipo_variable condicion_extra .)
    PUNTOYCOMA      reduce using rule 59 (condicion -> tipo_variable operador_condicional tipo_variable condicion_extra .)


state 138

    (60) condicion_extra -> operador_logico . tipo_variable operador_condicional tipo_variable condicion_extra
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    tipo_variable                  shift and go to state 149
    llamado_funcion                shift and go to state 59
    indentacion                    shift and go to state 61
    vacio                          shift and go to state 63

state 139

    (61) condicion_extra -> vacio .

    PARDER          reduce using rule 61 (condicion_extra -> vacio .)
    PUNTOYCOMA      reduce using rule 61 (condicion_extra -> vacio .)


state 140

    (78) operador_logico -> AND .

    NOMBRE          reduce using rule 78 (operador_logico -> AND .)
    DOUBLE          reduce using rule 78 (operador_logico -> AND .)
    INT             reduce using rule 78 (operador_logico -> AND .)
    STRING          reduce using rule 78 (operador_logico -> AND .)
    FALSE           reduce using rule 78 (operador_logico -> AND .)
    TRUE            reduce using rule 78 (operador_logico -> AND .)
    TABULACION      reduce using rule 78 (operador_logico -> AND .)


state 141

    (79) operador_logico -> OR .

    NOMBRE          reduce using rule 79 (operador_logico -> OR .)
    DOUBLE          reduce using rule 79 (operador_logico -> OR .)
    INT             reduce using rule 79 (operador_logico -> OR .)
    STRING          reduce using rule 79 (operador_logico -> OR .)
    FALSE           reduce using rule 79 (operador_logico -> OR .)
    TRUE            reduce using rule 79 (operador_logico -> OR .)
    TABULACION      reduce using rule 79 (operador_logico -> OR .)


state 142

    (35) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA . condicion PUNTOYCOMA incdec PARDER
    (59) condicion -> . tipo_variable operador_condicional tipo_variable condicion_extra
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    indentacion                    shift and go to state 61
    condicion                      shift and go to state 150
    tipo_variable                  shift and go to state 87
    llamado_funcion                shift and go to state 59
    vacio                          shift and go to state 63

state 143

    (46) dec_vector -> indentacion DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica .

    NEWLINE         reduce using rule 46 (dec_vector -> indentacion DECVARIABLE CORCHETEIZQ NOMBRE CORCHETEDER ASIGNACION op_aritmetica .)


state 144

    (47) dec_vector -> indentacion DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica .

    NEWLINE         reduce using rule 47 (dec_vector -> indentacion DECVARIABLE CORCHETEIZQ INT CORCHETEDER ASIGNACION op_aritmetica .)


state 145

    (19) parametro_llamado_extra -> COMA NOMBRE parametro_llamado_extra .

    PARDER          reduce using rule 19 (parametro_llamado_extra -> COMA NOMBRE parametro_llamado_extra .)


state 146

    (71) op_aritmetica_extra -> operador_aritmetico tipo_variable op_aritmetica_extra .

    NEWLINE         reduce using rule 71 (op_aritmetica_extra -> operador_aritmetico tipo_variable op_aritmetica_extra .)
    PARDER          reduce using rule 71 (op_aritmetica_extra -> operador_aritmetico tipo_variable op_aritmetica_extra .)


state 147

    (72) op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable . op_aritmetica_extra PARDER
    (71) op_aritmetica_extra -> . operador_aritmetico tipo_variable op_aritmetica_extra
    (72) op_aritmetica_extra -> . operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER
    (73) op_aritmetica_extra -> . vacio
    (74) operador_aritmetico -> . SUMA
    (75) operador_aritmetico -> . RESTA
    (76) operador_aritmetico -> . MULT
    (77) operador_aritmetico -> . DIV
    (80) vacio -> .

    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULT            shift and go to state 82
    DIV             shift and go to state 83
    PARDER          reduce using rule 80 (vacio -> .)

    operador_aritmetico            shift and go to state 122
    op_aritmetica_extra            shift and go to state 151
    vacio                          shift and go to state 124

state 148

    (14) parametro_extra -> COMA NOMBRE parametro_extra .

    PARDER          reduce using rule 14 (parametro_extra -> COMA NOMBRE parametro_extra .)


state 149

    (60) condicion_extra -> operador_logico tipo_variable . operador_condicional tipo_variable condicion_extra
    (53) operador_condicional -> . DIFERENTE
    (54) operador_condicional -> . IGUAL
    (55) operador_condicional -> . MAYOR
    (56) operador_condicional -> . MAYORIGUAL
    (57) operador_condicional -> . MENOR
    (58) operador_condicional -> . MENORIGUAL

    DIFERENTE       shift and go to state 106
    IGUAL           shift and go to state 107
    MAYOR           shift and go to state 108
    MAYORIGUAL      shift and go to state 109
    MENOR           shift and go to state 110
    MENORIGUAL      shift and go to state 111

    operador_condicional           shift and go to state 152

state 150

    (35) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion . PUNTOYCOMA incdec PARDER

    PUNTOYCOMA      shift and go to state 153


state 151

    (72) op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra . PARDER

    PARDER          shift and go to state 154


state 152

    (60) condicion_extra -> operador_logico tipo_variable operador_condicional . tipo_variable condicion_extra
    (62) tipo_variable -> . NOMBRE
    (63) tipo_variable -> . DOUBLE
    (64) tipo_variable -> . INT
    (65) tipo_variable -> . STRING
    (66) tipo_variable -> . FALSE
    (67) tipo_variable -> . TRUE
    (68) tipo_variable -> . llamado_funcion
    (16) llamado_funcion -> . indentacion NOMBRE PARIZQ parametro_llamado PARDER
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

  ! shift/reduce conflict for NOMBRE resolved as shift
    NOMBRE          shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    STRING          shift and go to state 56
    FALSE           shift and go to state 57
    TRUE            shift and go to state 58
    TABULACION      shift and go to state 24

  ! NOMBRE          [ reduce using rule 80 (vacio -> .) ]

    tipo_variable                  shift and go to state 155
    llamado_funcion                shift and go to state 59
    indentacion                    shift and go to state 61
    vacio                          shift and go to state 63

state 153

    (35) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA . incdec PARDER
    (36) incdec -> . indentacion pre_incdec
    (37) incdec -> . indentacion post_incdec
    (3) indentacion -> . vacio
    (4) indentacion -> . TABULACION indentacion
    (80) vacio -> .

    TABULACION      shift and go to state 24
    INCREMENTAR     reduce using rule 80 (vacio -> .)
    DECREMENTAR     reduce using rule 80 (vacio -> .)
    NOMBRE          reduce using rule 80 (vacio -> .)

    indentacion                    shift and go to state 156
    incdec                         shift and go to state 157
    vacio                          shift and go to state 63

state 154

    (72) op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER .

    NEWLINE         reduce using rule 72 (op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER .)
    PARDER          reduce using rule 72 (op_aritmetica_extra -> operador_aritmetico PARIZQ tipo_variable op_aritmetica_extra PARDER .)


state 155

    (60) condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable . condicion_extra
    (60) condicion_extra -> . operador_logico tipo_variable operador_condicional tipo_variable condicion_extra
    (61) condicion_extra -> . vacio
    (78) operador_logico -> . AND
    (79) operador_logico -> . OR
    (80) vacio -> .

    AND             shift and go to state 140
    OR              shift and go to state 141
    PARDER          reduce using rule 80 (vacio -> .)
    PUNTOYCOMA      reduce using rule 80 (vacio -> .)

    operador_logico                shift and go to state 138
    condicion_extra                shift and go to state 158
    vacio                          shift and go to state 139

state 156

    (36) incdec -> indentacion . pre_incdec
    (37) incdec -> indentacion . post_incdec
    (38) pre_incdec -> . INCREMENTAR NOMBRE
    (39) pre_incdec -> . DECREMENTAR NOMBRE
    (40) post_incdec -> . NOMBRE INCREMENTAR
    (41) post_incdec -> . NOMBRE DECREMENTAR

    INCREMENTAR     shift and go to state 49
    DECREMENTAR     shift and go to state 50
    NOMBRE          shift and go to state 159

    pre_incdec                     shift and go to state 46
    post_incdec                    shift and go to state 47

state 157

    (35) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec . PARDER

    PARDER          shift and go to state 160


state 158

    (60) condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra .

    PARDER          reduce using rule 60 (condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra .)
    PUNTOYCOMA      reduce using rule 60 (condicion_extra -> operador_logico tipo_variable operador_condicional tipo_variable condicion_extra .)


state 159

    (40) post_incdec -> NOMBRE . INCREMENTAR
    (41) post_incdec -> NOMBRE . DECREMENTAR

    INCREMENTAR     shift and go to state 75
    DECREMENTAR     shift and go to state 76


state 160

    (35) for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER .

    NEWLINE         reduce using rule 35 (for -> indentacion FOR PARIZQ DECVARIABLE ASIGNACION INT PUNTOYCOMA condicion PUNTOYCOMA incdec PARDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRIVATE in state 0 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 0 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 2 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 2 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 4 resolved as shift
WARNING: shift/reduce conflict for TABULACION in state 4 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 23 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 66 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 68 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 70 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 71 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 73 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 74 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 79 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 105 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 122 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 131 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 132 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 135 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 138 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 142 resolved as shift
WARNING: shift/reduce conflict for NOMBRE in state 152 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (inicial -> vacio)
WARNING: rejected rule (funcion -> vacio) in state 3
WARNING: reduce/reduce conflict in state 21 resolved using rule (indentacion -> vacio)
WARNING: rejected rule (instrucciones -> vacio) in state 21
